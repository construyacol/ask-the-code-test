{"version":3,"sources":["components/wallets/newWallet/newWalletLayout.js","components/wallets/newWallet/newWalletContainer.js"],"names":["NewWalletLayout","props","handleSubmit","actualizarEstado","name","currency","step","loader","address","short_currency_name","qr","clearCurrency","availableCurrencies","useAvailableWalletCreator","idForNewWalletButton","useKeyActionAsClick","className","onSubmit","style","width","clase","type","label","placeholder","active","autoFocus","ItemSelectionContainer","itemSelect","update_control_form","items","clearItem","id","xmlns","height","alt","fill","stroke","strokeWidth","cx","cy","r","d","src","getCdnPath","valueToCopy","color","toggleModal","finalizar","connect","state","user","modelData","search","form","search_coin","form_wallet","buttonActive","form_control_wallet","isLoading","current","currencies","wallets","dispatch","action","bindActionCreators","actions","setName","useState","setCurrency","length","setShortCurrencyName","coinsendaServices","useCoinsendaServices","toastMessage","useToastMessage","crearWallet","async","get_currency","matchItem","primary","body","data","description","country","enabled","is_token","createWallet","errorHandle","getWalletsByUser","account","createAndInsertDepositProvider","msg","isAppLoading","success_sound","CleanForm","history","push","ReduceStep","event","target","short_name","names","value","siguiente","IncreaseStep","useEffect","CurrentForm","states","preventDefault","searchMatch"],"mappings":"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","file":"static/js/64.dfec7847.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./newWallet.css\";\nimport { InputButton, ButtonSuccess } from \"../../widgets/buttons/buttons\";\nimport InputForm from \"../../widgets/inputs\";\nimport ItemSelectionContainer from \"../../widgets/items/ItemSelectionContainer\";\nimport CopyContainer from \"../../widgets/copy/copyContainer\";\nimport { SimpleLoader } from \"../../widgets/loaders\";\nimport useAvailableWalletCreator from \"../../hooks/useAvailableWalletCreator\";\nimport useKeyActionAsClick from \"../../../hooks/useKeyActionAsClick\";\nimport NewWalletSkeleton from './skeleton'\nimport { getCdnPath } from '../../../environment'\n \n\nconst NewWalletLayout = (props) => {\n  const {\n    handleSubmit,\n    actualizarEstado,\n    name,\n    currency,\n    step,\n    loader,\n    address,\n    short_currency_name,\n    qr,\n    clearCurrency,\n  } = props;\n\n  const [availableCurrencies] = useAvailableWalletCreator();\n  const idForNewWalletButton = useKeyActionAsClick(true, \"add-new-wallet-button\", 13, false, \"onkeypress\", true);\n\n  return (\n    <div className=\"containerFormWallet newWallet\">\n      {step === 1 && (\n        <div className=\"step1 newWallet\">\n          {availableCurrencies ? (\n            <>\n              <h1 className=\"fuente\"> Nueva billetera </h1>\n              <form onSubmit={handleSubmit} style={{ width: \"100%\" }}>\n                <InputForm\n                  clase=\"nameWallet containerInputComponent\"\n                  type=\"text\"\n                  label=\"Nombra tu nueva billetera\"\n                  placeholder=\"Billetera de trading\"\n                  name=\"name\"\n                  actualizarEstado={actualizarEstado}\n                  active={name && currency}\n                  autoFocus={true}\n                  // value={name}\n                />\n                <ItemSelectionContainer\n                  type=\"coins\"\n                  label=\"¿Cúal moneda manejarás en tu billetera?\"\n                  itemSelect={currency}\n                  actualizarEstado={actualizarEstado}\n                  update_control_form={props.update_control_form}\n                  items={availableCurrencies}\n                  clearItem={clearCurrency}\n                />\n                <InputButton\n                  id={idForNewWalletButton}\n                  label=\"Crear Billetera\"\n                  type=\"primary\"\n                  active={name && currency}\n                />\n              </form>\n            </>\n          ) : (\n            <NewWalletSkeleton />\n          )}\n        </div>\n      )}\n\n      {step === 2 && (\n        <div className=\"step2\">\n          {loader ? (\n            <SimpleLoader label={`Creando wallet ${currency}`} />\n          ) : (\n            <section className=\"stepFinish\">\n              <div className=\"nWCabeza\">\n                <div className=\"icon icon--order-success svg\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"72px\"\n                    height=\"72px\"\n                    alt=\"\"\n                  >\n                    <g fill=\"none\" stroke=\"white\" strokeWidth=\"3\">\n                      <circle cx=\"36\" cy=\"36\" r=\"35\"></circle>\n                      <path\n                        className=\"check\"\n                        d=\"M17.417,37.778l9.93,9.909l25.444-25.393\"\n                      ></path>\n                    </g>\n                  </svg>\n                </div>\n                <p className=\"titleWhite fuente\"> Operación Exitosa</p>\n              </div>\n\n              <div className=\"nWbody fuente\">\n                <div className=\"nWadress\">\n                  <div className=\"nWname\">\n                    {short_currency_name !== \"\" && (\n                      <img\n                        className=\"itemFuera\"\n                        src={`${getCdnPath('assets')}coins/${short_currency_name}.png`}\n                        width=\"30\"\n                        alt=\"\"\n                      />\n                    )}\n                    <p>Nueva wallet de {props.currency} creada</p>\n                  </div>\n                  <p>{name}</p>\n                  <img className=\"itemFuera\" src={qr} width=\"180\" alt=\"\" />\n                  <CopyContainer valueToCopy={address} color=\"white\" />\n                </div>\n              </div>\n\n              <div className=\"nWcta\">\n                <ButtonSuccess\n                  id=\"add-new-wallet-button\"\n                  toggleModal={props.finalizar}\n                >\n                  Finalizar\n                </ButtonSuccess>\n              </div>\n            </section>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NewWalletLayout;\n","import React, { useEffect, useState } from \"react\";\nimport NewWalletLayout from \"./newWalletLayout\";\nimport { connect } from \"react-redux\";\n// import { updateFormControl, FormWallet } from '../../../actions'\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../actions\";\nimport { matchItem } from \"../../../utils\";\nimport { useCoinsendaServices } from \"../../../services/useCoinsendaServices\";\nimport useToastMessage from \"../../../hooks/useToastMessage\";\n\nconst NewWallet = (props) => {\n  const [name, setName] = useState();\n  const [currency, setCurrency] = useState(\n    props.search.length && props.search[0].currency\n  );\n  const [address] = useState();\n  const [short_currency_name, setShortCurrencyName] = useState();\n  const [coinsendaServices] = useCoinsendaServices();\n  const [toastMessage] = useToastMessage();\n\n  const update_control_form = (searchMatch) => {\n    // if (!searchMatch || props.search.length > 1) {\n    //   props.action.UpdateFormControl('wallet', false)\n    // }\n    // if (name !== \"\" && props.search.length === 1) {\n    //   props.action.UpdateFormControl('wallet', true)\n    // }\n  };\n\n  const clearCurrency = () => {\n    setCurrency(null);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.action.isAppLoading(true);\n    siguiente();\n    actualizarEstado(event);\n    crearWallet();\n  };\n\n  const crearWallet = async () => {\n    // simulación Endpoint Crear wallet\n    const { user, currencies } = props;\n\n    let get_currency = await matchItem(\n      currencies,\n      { primary: currency },\n      \"currency\"\n    );\n\n    const body = {\n      data: {\n        name: name,\n        description: \"description\",\n        country: user && user.country,\n        enabled: true,\n        currency: {\n          currency: get_currency[0].currency,\n          is_token: get_currency[0].is_token,\n        },\n      },\n    };\n\n    const wallets = await coinsendaServices.createWallet(body);\n\n    if (!wallets) {\n      return errorHandle(\"Error al crear la billetera...\");\n    }\n    await coinsendaServices.getWalletsByUser();\n    const { account } = wallets;\n\n    const dep_prov = await coinsendaServices.createAndInsertDepositProvider(\n      account\n    );\n\n    if (!dep_prov) {\n      return errorHandle(\n        \"Error al crear el proveedor de deposito de la billetera...\"\n      );\n    }\n\n    // si la acción se lleva satisfactoriamente actualizamos el fondo del modal a un color verde\n    let msg = `Nueva wallet ${account.currency.currency} creada!`;\n    toastMessage(msg, \"success\");\n\n    // await props.action.add_item_state('wallets', { ...account, visible: true })\n    // await props.action.get_account_balances(props.user)\n    // return console.log('=================> CREATE WALLET CURRENCIE=>', wallets)\n\n    props.action.isAppLoading(false);\n    props.action.success_sound();\n    await props.action.toggleModal();\n    await props.action.CleanForm(\"wallet\");\n\n    return props.history.push(`/wallets/deposit/${account.id}`);\n  };\n\n  const errorHandle = (msg) => {\n    props.action.ReduceStep(\"wallets\");\n    props.action.isAppLoading(false);\n    return toastMessage(\n      msg ? msg : \"Ups, al parecer esto no podrá ser...\",\n      \"error\"\n    );\n  };\n\n  const actualizarEstado = async (event) => {\n    if (event.target.short_name) {\n      await setShortCurrencyName(event.target.short_name);\n    }\n    const names = event.target.name;\n    const value = event.target.value;\n    // update_control_form(value)\n    // update_form()\n    switch (names) {\n      case \"name\":\n        return setName(value);\n      case \"currency\":\n        return setCurrency(value);\n      default:\n    }\n  };\n\n  const siguiente = () => {\n    return props.action.IncreaseStep(props.current);\n  };\n\n  const finalizar = (event) => {\n    // reiniciamos el estado del formulario(./reducers/form)\n    props.action.toggleModal();\n    props.action.CleanForm(\"wallet\");\n  };\n\n  useEffect(() => {\n    return () => props.action.CurrentForm(\"wallets\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let states = {\n    name,\n    currency,\n    address,\n    short_currency_name,\n  };\n\n  return (\n    <NewWalletLayout\n      clearCurrency={clearCurrency}\n      actualizarEstado={actualizarEstado}\n      handleSubmit={handleSubmit}\n      update_control_form={update_control_form}\n      buttonActive={props.buttonActive}\n      loader={props.loader}\n      finalizar={finalizar}\n      step={props.step}\n      {...states}\n      {...props}\n    />\n  );\n};\n\nfunction mapStateToProps(state, props) {\n  const user = state.modelData.user;\n\n  return {\n    search: state.form.search_coin,\n    form_wallet: state.form.form_wallet,\n    buttonActive: state.form.form_control_wallet,\n    loader: state.isLoading.loader,\n    step: state.form.form_wallet.step,\n    current: state.form.current,\n    user,\n    state: state.modelData,\n    currencies: state.modelData.currencies,\n    wallets: state.modelData.wallets,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewWallet);\n"],"sourceRoot":""}