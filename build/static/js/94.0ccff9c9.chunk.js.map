{"version":3,"sources":["components/withKeyActions.js","components/widgets/inputs/ui/dropdownlayout.js","components/widgets/inputs/dropdownContainer.js","components/withdrawAccounts/new/flows/bankAccountFlow.js","components/withdrawAccounts/new/withdrawAccountFormLayout.js","components/withdrawAccounts/new/withdrawAccountForm.js"],"names":["withKeyActions","AsComponent","props","idCancel","useKeyActionAsClick","eventName","idAccept","DropDownLayout","elements","label","open","active","placeholder","className","onClick","abrir","style","height","length","map","element","id","value","ui_name","selectItem","DropDownContainer","Component","state","this","placeHolder","e","setState","event","console","log","target","dataset","estado","name","actualizarEstado","componentDidMount","selected","indexOfSelectedElement","findIndex","render","BankAccountFlow","banks","cities","loader","initComponent","async","withdraw_providers_list","res","bank_list","info_needed","bank_name","serve_bank_list","serveBankOrCityList","id_types_object","addIndexToRootObject","id_type","id_type_list","objectToArray","account_type_object","account_type","account_type_list","currency","id_types","account_types","update_city","payload","body","code","componentDidUpdate","prevProps","short_name","shortName","accountTypes","compatible_account_types","accountId","statusInput","handleKeyPress","siguiente","update_control_form","handleSubmit","account_number","step","search","final_step_create_account","src","getCdnPath","alt","fontWeight","_id","type","onSubmit","ItemSelectionContainer","autoFocus","items","format","itemSelect","preventSubmit","gridTemplateRows","actives","status","selectWithdrawProviders","createSelector","modelData","user","withdrawProviders","_withdrawProviders","wp","provider_type","push","connect","current","form","dispatch","action","bindActionCreators","actions","MethodView","loadable","FinalTicket","RemittanceAccountFlow","WithdrawAccountFormLayout","select_withdraw_way","withdraw_way","ticket","finalizar","title","subtitle","payment_method","select_method","item_active","withdraw","finishAction","wAccount","ticket_type","WithdrawAccountForm","surname","form_bank","id_number","city","email","searchMatch","UpdateFormControl","update_form","keynum","window","keyCode","which","test","String","fromCharCode","preventDefault","crearCuenta","withdraw_accounts","isAppLoading","Object","values","filter","WAccount","info","ReduceStep","toastMessage","coinsendaServices","addNewWithdrawAccount","fetchWithdrawAccounts","withdraw_flow","withdraw_flow_action","success_sound","ModalView","persist","requestAnimationFrame","truncateString","maxLength","replace","slice","UpdateForm","cleanSearch","IncreaseStep","CleanForm","setTimeout","history","CurrentForm","route","buttonActive","initPrevKeyActions","w_id","withRouter","search_bank","form_control_bank","isLoading","form_withdraw","withCoinsendaServices"],"mappings":"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","file":"static/js/94.0ccff9c9.chunk.js","sourcesContent":["import React from \"react\";\nimport useKeyActionAsClick from \"../hooks/useKeyActionAsClick\";\n\nexport default function withKeyActions(AsComponent) {\n  return function (props) {\n    const idCancel = useKeyActionAsClick(\n      true,\n      `cancel-button-${props.eventName}`,\n      8,\n      true,\n      props.eventName,\n      true\n    );\n    const idAccept = useKeyActionAsClick(\n      true,\n      `accept-button-${props.eventName}`,\n      13,\n      false,\n      props.eventName,\n      true\n    );\n\n    return <AsComponent idCancel={idCancel} idAccept={idAccept} {...props} />;\n  };\n}\n","import React from \"react\";\n\nconst DropDownLayout = (props) => {\n  const { elements, label, open, active, placeholder } = props;\n\n  // console.log('eeeeeeeeeeeeeeste es el    -- D R O P _ D O W N --', props)\n\n  return (\n    <div className=\"containerInputComponent\">\n      <p className=\"labelText fuente\">{label}</p>\n      <div className={`inputContainer2 ${active ? \"inputActivado\" : \"\"}`}>\n        <div\n          className={`InputDropDown ${active ? \"activeText\" : \"\"}`}\n          onClick={props.abrir}\n        >\n          {placeholder}\n          <div\n            className={`InputDesplegable ${open ? \"Idesplegado\" : \"\"}`}\n            style={{ height: open ? `${elements.length * 45}px` : \"0px\" }}\n          >\n            {elements.map((element, id) => {\n              return (\n                <p\n                  key={id}\n                  data-value={element.value}\n                  data-ui_name={element.ui_name}\n                  onClick={props.selectItem}\n                >\n                  {element.ui_name}{\" \"}\n                </p>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DropDownLayout;\n","import React, { Component } from \"react\";\nimport DropDownLayout from \"./ui/dropdownlayout\";\nimport \"./inputStyles.css\";\n\nclass DropDownContainer extends Component {\n  state = {\n    elements: this.props.elements,\n    open: false,\n    placeHolder: this.props.placeholder,\n  };\n\n  componentDidMount() {\n    if (this.props.selected && this.props.elements) {\n      const indexOfSelectedElement = this.props.elements.findIndex(\n        (element) => element.value === this.props.selected\n      );\n\n      this.setState({\n        placeHolder: this.props.elements[indexOfSelectedElement].ui_name,\n      });\n    }\n  }\n\n  abrir = (e) => {\n    this.setState({\n      open: !this.state.open,\n    });\n  };\n\n  selectItem = (event) => {\n    console.log('_________________________________________________________selectItem', this.state.elements, event.target.dataset)\n\n    let value\n    if(!event.target.dataset.value){  \n      if(event.target.dataset.ui_name === \"Cuenta corriente\") value = \"cuenta_corriente\";\n      if(event.target.dataset.ui_name === \"Cuenta de ahorros\") value = \"cuenta_ahorro\";\n      if(event.target.dataset.ui_name === \"Depósito electrónico\") value = \"deposito_electronico\";\n    }\n\n    const estado = {\n      target: {\n        name: this.props.name,\n        value: event.target.dataset.value || value,\n      },\n    };\n\n    this.setState({\n      placeHolder: event.target.dataset.ui_name,\n    });\n\n    this.props.actualizarEstado(estado);\n  };\n\n  render() {\n    const { label, active } = this.props;\n    // console.log('DESDE EL CONTENEDOR DEL DROPDOWN::::', this.props)\n    return (\n      <DropDownLayout\n        elements={this.state.elements}\n        open={this.state.open}\n        abrir={this.abrir}\n        placeholder={this.state.placeHolder}\n        selectItem={this.selectItem}\n        label={label}\n        active={active}\n      />\n    );\n  }\n}\n\nexport default DropDownContainer;\n","import React, { Component, Fragment } from \"react\";\nimport { InputButton } from \"../../../widgets/buttons/buttons\";\nimport { InputForm } from \"../../../widgets/inputs\";\nimport DropDownContainer from \"../../../widgets/inputs/dropdownContainer\";\nimport { ButtonForms } from \"../../../widgets/buttons/buttons\";\nimport ItemSelectionContainer from \"../../../widgets/items/ItemSelectionContainer\";\nimport ItemLayout from \"../../../widgets/items/itemLayout\";\n// import bank from \"../../../../assets/bank.png\";\nimport { getCdnPath } from '../../../../environment'\nimport SimpleLoader from \"../../../widgets/loaders\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../../actions\";\nimport {\n  serveBankOrCityList,\n  addIndexToRootObject,\n  objectToArray,\n} from \"../../../../utils\"; \n// import { doLogout } from '../../../utils'\n// import MVList from \"../../../widgets/itemSettings/modal_views/listView\";\nimport { createSelector } from \"reselect\";\nimport withKeyActions from \"../../../withKeyActions\";\n\n// const dropDawnElements = [\n//   {name:'ahorro'},\n//   {name:'corriente'},\n// ]\n//\n// const dropDawnElements2 = [\n//   {name:'ahorro', id:1},\n//   {name:'corriente', id:2},\n// ]\n\nclass BankAccountFlow extends Component {\n  state = {\n    banks: null,\n    cities: null,\n    loader: false,\n  };\n\n  componentDidMount() {\n    this.initComponent();\n    this.props.actualizarEstado({\n      target: {\n        name: \"provider_type\",\n        value: \"bank\",\n      },\n    });\n  }\n\n  initComponent = async () => {\n\n    const { withdraw_providers_list } = this.props;\n\n    this.setState({ loader: true });\n\n    let res = withdraw_providers_list;\n    // console.log('withdraw_providers_list', withdraw_providers_list)\n    if (!res || (res && !res.length)) {\n      return\n      // return doLogout('?message=Vuelve a iniciar session');\n    }\n\n    let bank_list = res && res[0].info_needed.bank_name;\n    // let city_list = res && res[0].info_needed.city;\n\n\n    let serve_bank_list = await serveBankOrCityList(bank_list, \"bank\");\n    // let serve_city_list = await serveBankOrCityList(city_list, \"city\");\n    // console.log('============================================================== serve_bank_list', serve_bank_list)\n\n    let id_types_object = await addIndexToRootObject(\n      res && res[0].info_needed.id_type\n    );\n    let id_type_list = await objectToArray(id_types_object);\n\n    let account_type_object = await addIndexToRootObject(\n      res && res[0].info_needed.account_type\n    );\n    let account_type_list = await objectToArray(account_type_object);\n    console.log('|||||||||||||||||||||||||| °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°| account_type_list |', account_type_list)\n    // console.log(' --- - - - - -- - - - - -  °°°°|||||°°°   : BANK LIST', serve_bank_list)\n    // console.log(' --- - - - - -- - - - - -  °°°°|||||°°°   : VIRGIN BANK', bank_list)\n\n    await this.props.actualizarEstado({\n      target: { name: \"currency\", value: res[0].currency },\n    });\n    // console.log('|||||||||||||||||||||||||||||||||||||||||||serve_bank_list', serve_bank_list)\n\n    this.setState({\n      banks: serve_bank_list,\n      // cities: serve_city_list,\n      id_types: id_type_list, //tipos de documentos disponibles para indicar con el que se abrio la cuenta de retiro\n      account_types: account_type_list, //tipos de cuentas bancarias disponibles\n      loader: false,\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      if(this.props.short_name && this.props.withdraw_providers_list && this.props.withdraw_providers_list[0]){\n        const info_needed = {...this.props.withdraw_providers_list && this.props.withdraw_providers_list[0].info_needed}\n        const shortName = this.props.short_name\n        const accountTypes = info_needed.bank_name[shortName] && info_needed.bank_name[shortName].compatible_account_types.map((accountId)=>{\n          return info_needed.account_type[accountId]\n        })\n        console.log('===================================0 accountTypes ',  accountTypes, info_needed)\n        if(accountTypes){\n          this.setState({\n            account_types:accountTypes\n          })\n        }\n        // console.log('accountTypes',  accountTypes)\n        // console.log('===================================0 CHANGES ',  info_needed.bank_name)\n      }\n\n    }\n  }\n\n  update_city = (payload) => {\n    // console.log('CITY SELECT',payload)\n\n    let body = {\n      target: {\n        name: \"city\",\n        value: payload.code,\n      },\n    };\n\n    this.props.actualizarEstado(body);\n  };\n\n  render() {\n    const {\n      statusInput,\n      handleKeyPress,\n      short_name,\n      siguiente,\n      update_control_form,\n      handleSubmit,\n      account_number,\n      account_type,\n      bank_name,\n      step,\n      search,\n      actualizarEstado,\n      // city,\n      final_step_create_account,\n      // id_type,\n      // id_number,\n      // user,\n      idAccept,\n    } = this.props;\n\n    const { banks, loader } = this.state;\n\n    console.log('|||||| step::', step)\n\n    return (\n      <Fragment>\n        {step === 2 && (\n          <div className=\"nBstep1 fuente\">\n            <div className=\"titleNewAccount\">\n              <img src={`${getCdnPath('assets')}bank.png`} alt=\"\" height=\"70\" />\n              <p style={{ fontWeight:'bold' }}>\n                Crea una cuenta de retiro\n              </p>\n            </div>\n            <p className=\"nBtextInit fuente\">\n            Son las cuentas a las que envías COP desde Coinsenda. Por ejemplo: Tu cuenta bancaria.\n            </p>\n\n            <div id=\"bankChooseButton\">\n              <ButtonForms\n                _id={idAccept}\n                type=\"primary\"\n                active={true}\n                siguiente={siguiente}\n              >\n                OK, comencemos\n              </ButtonForms>\n            </div>\n          </div>\n        )}\n\n        {step === 3 && (\n          <div className=\"step1\">\n            <form onSubmit={handleSubmit} className=\"NWithdrawAccountFlow\">\n              <div className=\"titleAccountFlow\">\n                <h1 className=\"DLtitles2 fuente\">Elige la entidad de la cuenta que quieres agregar</h1>\n              </div>\n              {loader ? (\n                <SimpleLoader label=\"Cargando...\" />\n              ) : (\n                <ItemSelectionContainer\n                  type=\"banks\"\n                  autoFocus={true}\n                  items={banks}\n                  format=\"svg\"\n                  itemSelect={bank_name}\n                  actualizarEstado={actualizarEstado}\n                  handleSubmit={handleSubmit}\n                  update_control_form={update_control_form}\n                />\n              )}\n\n              <div id=\"bankChooseButton\">\n                <InputButton\n                  id={idAccept}\n                  preventSubmit={true}\n                  label=\"Continuar\"\n                  type=\"primary\"\n                  active={search.length === 1 && bank_name !== \"\"}\n                />\n              </div>\n            </form>\n          </div>\n        )}\n\n        {(step === 4 || step === 5) && (\n          <div className=\"step2\">\n            <div\n              id=\"contMsg\"\n              className=\"contMsg\"\n              style={{\n                gridTemplateRows:\n                  step === 4 ? \"auto 1fr 15vh\" : step >= 5 ? \"auto 1fr\" : \"\",\n              }}\n            >\n              <div className=\"nBcontBank\">\n                <ItemLayout\n                  format=\"svg\"\n                  actives={true}\n                  type=\"bank\"\n                  code={short_name}\n                  name={bank_name}\n                />\n              </div>\n\n              {step === 4 && ( \n                <form className=\"formAccountFlow\" onSubmit={async(e) => {\n                  await handleSubmit(e)\n                  final_step_create_account(e)\n                }}>\n                  <div className=\"contForminputsAccount\">\n                    <DropDownContainer\n                      placeholder=\"Tipo de cuenta\"\n                      elements={this.state.account_types}\n                      label=\"Elige el tipo de cuenta:\"\n                      actualizarEstado={actualizarEstado}\n                      name=\"account_type\"\n                      selected={account_type}\n                      active={account_type && account_number}\n                    />\n\n                    <InputForm\n                      type=\"text\"\n                      label=\"Escribe el número de tu cuenta\"\n                      placeholder=\"Ej: 1123321...\"\n                      name=\"account_number\"\n                      autoFocus={true}\n                      actualizarEstado={actualizarEstado}\n                      active={account_type && account_number}\n                      value={account_number}\n                      handleKeyPress={handleKeyPress}\n                      status={statusInput}\n                    />\n                  </div>\n                  <div id=\"bankChooseButton\" className=\"contbuttonAccount\">\n                    <InputButton\n                      id={idAccept}\n                      preventSubmit={true}\n                      label=\"Continuar\"\n                      type=\"primary\"\n                      active={account_type && account_number}\n                    />\n                  </div>\n                </form>\n              )}\n\n            </div>\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nconst selectWithdrawProviders = createSelector(\n  [\n    (state) => state.modelData.user.withdrawProviders,\n    (state) => state.modelData.withdrawProviders,\n  ],\n  (_withdrawProviders, withdrawProviders) => {\n    const withdraw_providers_list = [];\n    _withdrawProviders &&\n      _withdrawProviders.map((wp) => {\n        if (withdrawProviders[wp].provider_type !== \"bank\") {\n          return false;\n        }\n        return withdraw_providers_list.push(withdrawProviders[wp]);\n      });\n    return withdraw_providers_list;\n  }\n);\n\nfunction mapStateToProps(state) {\n  const { user } = state.modelData;\n\n  return {\n    withdraw_providers_list: selectWithdrawProviders(state),\n    user: user,\n    current: state.form.current,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withKeyActions(BankAccountFlow));\n","import React, { Fragment } from \"react\";\nimport loadable from \"@loadable/component\";\nimport SimpleLoader from \"../../widgets/loaders\";\nimport { payment_method } from \"../../api/ui/api.json\";\nimport BankAccountFlow from \"./flows/bankAccountFlow\";\nimport \"./newAccount.css\";\nimport \"../../wallets/newWallet/newWallet.css\";\n\nconst MethodView = loadable(() => import(\"./views/1method\"));\nconst FinalTicket = loadable(() => import(\"./views/finalTicket\"));\nconst RemittanceAccountFlow = loadable(() =>\n  import(\"./flows/remittanceAccountFlow\")\n);\n\nconst WithdrawAccountFormLayout = (props) => {\n  const {\n    siguiente,\n    step,\n    select_withdraw_way,\n    withdraw_way,\n    ticket,\n    finalizar,\n    eventName,\n  } = props;\n\n  // console.log\n\n  return (\n    <div className=\"containerFormWallet\">\n      {step === 1 && (\n        <Fragment>\n          <MethodView\n            title=\"En esta cuenta deseas\"\n            subtitle=\"efectuar los retiros por:\"\n            items={payment_method}\n            select_method={select_withdraw_way}\n            item_active={withdraw_way}\n            siguiente={siguiente}\n            withdraw={true}\n          />\n        </Fragment>\n      )}\n\n      {step >= 2 && withdraw_way === \"bankaccount\" && (\n        <BankAccountFlow eventName={eventName} {...props} />\n      )}\n\n      {step >= 2 && withdraw_way === \"cash\" && (\n        <RemittanceAccountFlow {...props} />\n      )}\n\n      {step === 6 && (\n        <Fragment>\n          {!ticket ? (\n            <SimpleLoader label={`Creando Cuenta de retiro`} />\n          ) : (\n            <FinalTicket\n              finishAction={finalizar}\n              wAccount={ticket}\n              ticket_type=\"withdraw_form\"\n            />\n          )}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default WithdrawAccountFormLayout;\n","import React, { Component } from \"react\";\nimport WithdrawAccountFormLayout from \"./withdrawAccountFormLayout\";\nimport { connect } from \"react-redux\";\n// import { updateFormControl, FormWallet } from '../../../actions'\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../actions\";\nimport { withRouter } from \"react-router\";\nimport withCoinsendaServices from \"../../withCoinsendaServices\";\nimport { createSelector } from \"reselect\";\n\nclass WithdrawAccountForm extends Component {\n  state = {\n    name: this.props.user.name,\n    surname: this.props.user.surname,\n    bank_name: this.props.form_bank.bank_name,\n    account_type: this.props.form_bank.account_type,\n    account_number: this.props.form_bank.account_number,\n    short_name: this.props.form_bank.short_name,\n    id_type: null,\n    statusInput: \"\",\n    withdraw_way: \"bankaccount\",\n    provider_type: \"\",\n    id_number: \"\",\n    city: \"medellin\",\n    email: this.props.user.email,\n    currency: null,\n    ticket: null,\n  };\n\n  update_control_form = (searchMatch) => {\n    //esta función valida si tenemos un nombre item escrito y si tenemos un item coin/bank seleccionado, si cumple con esto, nos habilita el call to action para seguir hacia la proxima acción\n    // console.log('update_control_form SE ESTA ACTUALIZANDO: ', searchMatch)\n\n    if (!searchMatch || this.props.search.length > 1) {\n      this.props.action.UpdateFormControl(\"bank\", false);\n    }\n\n    switch (this.props.step) {\n      case 3:\n        if (this.props.search.length === 1) {\n          this.props.action.UpdateFormControl(\"bank\", true);\n        }\n        break;\n\n      case 5:\n        if (\n          this.state.account_type !== \"\" &&\n          this.state.account_number !== \"\"\n        ) {\n          this.props.action.UpdateFormControl(\"bank\", true);\n        }\n        break;\n      default:\n        console.log(\"\");\n    }\n  };\n\n  // this.props.action.UpdateForm('deposit', this.state)\n\n  select_withdraw_way = async (payload, withdraw_way) => {\n    await this.setState({\n      withdraw_way: withdraw_way,\n      provider_type: withdraw_way === \"bankaccount\" ? \"bank\" : \"\",\n    });\n\n    // this.props.action.UpdateFormControl('deposit', true)\n    this.update_form();\n  };\n\n  handleKeyPress = (e) => {\n    var keynum = window.event ? window.event.keyCode : e.which;\n    // if ((keynum == 8) || (keynum == 46) || (keynum == 45) || (keynum == 44) ){\n    if (keynum < 48 || keynum > 57) {\n      this.setState({ statusInput: \"Solo se aceptan números en este campo\" });\n      return true;\n    }\n\n    this.setState({ statusInput: \"\" });\n    return /\\d/.test(String.fromCharCode(keynum));\n  };\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    this.actualizarEstado(event);\n\n    await this.siguiente();\n    // if(this.props.step === 7){\n    //   this.crearCuenta()\n    // }\n  };\n\n  final_step_create_account = async (event) => {\n    await this.handleSubmit(event);\n    // if(this.props.withdraw_flow){\n    //   return this.props.withdraw_flow_action()\n    // }\n    this.crearCuenta();\n  };\n\n  crearCuenta = async () => {\n    // simulación Endpoint Crear wallet\n    const { withdraw_accounts } = this.props\n    this.props.action.isAppLoading(true);\n\n    if(withdraw_accounts){\n      // validate if withdraw account already exist \n      const result = Object.values(withdraw_accounts).filter(WAccount => WAccount.info.bank_name === this.state.bank_name && WAccount.info.account_number === this.state.account_number)\n      if(result.length){\n        this.props.action.ReduceStep(this.props.current, 2);\n        this.props.toastMessage(\"La cuenta de retiro ya existe\", \"error\")\n        return this.props.action.isAppLoading(false)\n      }\n    }\n\n    let res = await this.props.coinsendaServices.addNewWithdrawAccount(\n      this.state\n    );\n    if (!res) {\n      this.props.action.ReduceStep(this.props.current, 2);\n      this.props.toastMessage(\"No es posible crear la cuenta ahora.\", \"error\");\n      return this.props.action.isAppLoading(false);\n    }\n\n    await this.props.coinsendaServices.fetchWithdrawAccounts();\n\n    if (this.props.withdraw_flow) {\n      return this.props.withdraw_flow_action(res);\n    }\n\n    await this.setState({\n      ticket: res,\n    });\n\n    // setTimeout(()=>{\n    this.props.action.success_sound();\n    this.update_form();\n    this.props.action.isAppLoading(false);\n    this.props.action.ModalView(\"modalSuccess\");\n    // }, 1500)\n  };\n\n  actualizarEstado = async (event) => {\n    event.persist && event.persist();\n    \n    if (event.target && event.target.short_name) {\n      this.setState({ short_name: event.target.short_name });\n    }\n\n    const name = event.target.name;\n    let value = event.target.value;\n    // console.log('|||||| ACTUALIZANDO ESTADO:::', name, value)\n    console.log('|||||||||||||||||||||||||||||||||||||||||||  actualizarEstado  ===>', event.target, this.state)\n\n    window.requestAnimationFrame(() => {\n      let truncateString = false;\n      let maxLength = 50;\n      if (name && name === \"id_number\") {\n        truncateString = true;\n        if (this.state.id_type === \"pasaporte\") {\n          if (value && !/^[a-zA-Z0-9]{1,20}$/g.test(value)) return;\n        } else if (this.state.id_type === \"nit\") {\n          maxLength = 11;\n          value = value.replace(/(\\d{9})(\\d{1})/, \"$1-$2\");\n        } else {\n          if (value && !/^[0-9]{1,12}$/g.test(value)) return;\n        }\n      }\n\n      if (name && name === \"account_number\") {\n        value = value.replace(/[^0-9]/g, \"\");\n        truncateString = true;\n        maxLength = 20;\n      }\n\n      if (this.state.short_name === 'nequi') {\n        maxLength = 10\n      }\n\n      if(this.state.bank_name === 'bancolombia'){\n        maxLength = 11\n      }\n\n      if (truncateString && value.length > maxLength) {\n        value = value.slice(0, maxLength);\n      }\n\n      if (name) {\n        this.setState({ [name]: value });\n      }\n\n      // optimize, the actions below make app slow\n      this.update_control_form(value);\n      this.update_form();\n    });\n    \n    \n  };\n\n  update_form = () => {\n    // Acualizamos el estado del formulario en redux\n    this.props.action.UpdateForm(\"bank\", this.state);\n  };\n\n  siguiente = async () => {\n    // this.props.action.UpdateFormControl('bank',false)\n    // this.update_form(this.state)\n\n    if (this.props.step === 1) {\n      await this.cleanSearch();\n    }\n    return this.props.action.IncreaseStep(this.props.current);\n  };\n\n  finalizar = (event) => {\n    this.props.action.CleanForm(\"bank\");\n    this.props.action.CleanForm(\"withdraw\");\n    // this.props.action.toggleModal()\n  };\n\n  cleanSearch = () => {\n    this.setState({\n      bank_name: \"\",\n    });\n    this.props.action.UpdateFormControl(\"bank\", false);\n    this.props.action.cleanSearch(\"bank\");\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.props.history.push(`?form=wa_terms`);\n    }, 100);\n\n    const { withdraw_flow } = this.props;\n\n    if (withdraw_flow) {\n      return this.props.action.CurrentForm(\"withdraw\");\n    }\n\n    this.props.action.CurrentForm(\"bank\");\n  }\n\n  componentDidUpdate(prevProps) {\n    // inserto las siguientes rutas para poder hacer seguimiento al funnel desde hotjar\n    if (prevProps.step === this.props.step) {\n      return;\n    }\n    // console.log('||||||||||||||||||| STEP WITHDRAW ACCOUNT FORM ==> ', prevProps.step, this.props.step, this.props)\n\n    let route;\n\n    if (this.props.step === 2) {\n      route = `?form=wa_terms`;\n    }\n\n    if (this.props.step === 3) {\n      route = `?form=wa_choose_bank`;\n    }\n\n    if (this.props.step === 4) {\n      route = `?form=wa_enter_bank_details`;\n    }\n\n    if (this.props.step === 5) {\n      route = `?form=wa_id_type`;\n    }\n\n    if (this.props.step === 6) {\n      route = `?form=wa_opening_city`;\n    }\n\n    if (this.props.step === 7) {\n      route = `?form=wa_success`;\n    }\n    // console.log('||||||||||||||||||||||||||||||| componentDidUpdate =?=> ')\n    setTimeout(() => {\n      this.props.history.push(route);\n    }, 100);\n    // alert()\n  }\n\n  render() {\n    // console.log('R E N D E R I Z A N D O',this.props.action)\n    // console.log('ESTAMOS RENDERIZANDO EL S T A T E de BANK ::::::  ', this.state)\n    const {\n      step,\n      search,\n      withdraw_flow,\n      withdraw_flow_action,\n      eventName = \"onkeyup\",\n    } = this.props;\n\n    // console.log('R E N D E R I Z A N D O', step)\n\n    return (\n      <WithdrawAccountFormLayout\n        withdraw_flow={withdraw_flow}\n        withdraw_flow_action={withdraw_flow_action}\n        statusInput={this.state.statusInput}\n        handleKeyPress={this.handleKeyPress}\n        crearCuenta={this.crearCuenta}\n        siguiente={this.siguiente}\n        actualizarEstado={this.actualizarEstado}\n        handleSubmit={this.handleSubmit}\n        update_control_form={this.update_control_form}\n        buttonActive={this.props.buttonActive}\n        loader={this.props.loader}\n        finalizar={this.finalizar}\n        step={step}\n        select_withdraw_way={this.select_withdraw_way}\n        cleanSearch={this.cleanSearch}\n        initPrevKeyActions={this.props.initPrevKeyActions}\n        search={search}\n        final_step_create_account={this.final_step_create_account}\n        eventName={eventName}\n        {...this.state}\n      />\n    );\n  }\n}\n\nconst selectWithdrawProviders = createSelector(\n  [\n    (state) => state.modelData.user.withdrawProviders,\n    (state) => state.modelData.withdrawProviders,\n  ],\n  (_withdrawProviders, withdrawProviders) => {\n    return (\n      _withdrawProviders &&\n      _withdrawProviders.map((w_id) => {\n        return withdrawProviders[w_id];\n      })\n    );\n  }\n);\n\nfunction mapStateToProps(state, props) {\n  // console.log('R E N D E R I Z A N D O ssssssss', props)\n  const { withdraw_flow } = props;\n  const { user, withdraw_accounts } = state.modelData;\n\n  return {\n    search: state.form.search_bank,\n    withdrawProviders: selectWithdrawProviders(state),\n    form_bank: state.form.form_bank,\n    buttonActive: state.form.form_control_bank,\n    loader: state.isLoading.loader,\n    current: state.form.current,\n    step: withdraw_flow\n      ? state.form.form_withdraw.step\n      : state.form.form_bank.step,\n    user: user,\n    withdraw_accounts\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withCoinsendaServices(WithdrawAccountForm))\n);\n"],"sourceRoot":""}