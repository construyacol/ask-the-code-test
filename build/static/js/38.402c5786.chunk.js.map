{"version":3,"sources":["components/widgets/maps/sAmerica.js","components/widgets/maps/select_country/select_country.js"],"names":["svg","path","countriesGroup","zoom","minZoom","maxZoom","projection","w","h","active","d3","SAmerica","state","current_data","country","navigator","boxZoom","box","centroid","paddingPerc","d","this_index","paths","properties","admin","toLowerCase","_this2$props","_this2","props","available_countries","select_country_component","classed","reset","_this","setState","target","value","minXY","maxXY","zoomWidth","Math","abs","zoomHeight","zoomMidX","zoomMidY","maxXscale","document","getElementById","clientWidth","maxYscale","clientHeight","zoomScale","min","offsetX","max","offsetY","dleft","dtop","transition","duration","call","transform","translate","scale","initiateZoom","scaleExtent","translateExtent","midX","midY","geoProd","center","on","t","attr","x","y","k","append","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","json","_this2$props2","action_loader","wrap","_context","prev","next","abrupt","selectAll","data","features","enter","i","p","bounds","stop","_x","apply","this","arguments","userAgent","indexOf","loader","react_default","createElement","id","className","loaders","label","Component","SelectCountry","disabled","country_match","payload","load_countries","res","coinsendaServices","countryValidators","sent","countries","available_country_list","country_list","update_country","_callee2","e","without_click","match","_context2","matchItem","primary","length","simulate_click","concat","reset_data","new_country_selected","select_country","_this$props","appLoadLabel","_this$state","react","inputs","handleSubmit","style","display","maps_sAmerica","width","height","connect","_state$modelData","modelData","user","wallets","all_pairs","isLoading","dispatch","action","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/38.402c5786.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleLoader from \"../loaders\";\n\nimport * as d3 from \"d3\";\nimport \"./sAmerica.css\";\n\nlet svg,\n  path,\n  countriesGroup,\n  zoom,\n  minZoom,\n  maxZoom,\n  w = 3000,\n  h = 1250,\n  projection,\n  active = d3.select(null);\n\nclass SAmerica extends Component {\n  state = {\n    current_data: {\n      country: null,\n    },\n    navigator: null,\n  };\n\n  componentDidMount() {\n    var es_firefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n    if (es_firefox) {\n      this.setState({ navigator: \"firefox\" });\n    }\n    this.geoProd();\n    //console.log('componentDidMount', document.getElementById('map').clientWidth)\n  }\n\n  // zoom to show a bounding box, with optional additional padding as percentage of box size\n  boxZoom = (box, centroid, paddingPerc, d, this_index, paths) => {\n    const { properties } = d;\n    let country = properties.admin.toLowerCase();\n\n    const { available_countries, select_country_component } = this.props;\n    let available_country = available_countries[country];\n    if (!available_country) {\n      return false;\n    }\n\n    active.classed(\"active\", false);\n\n    const { current_data } = this.state;\n    if (country === current_data.country) return this.reset();\n\n    // console.log('||||||| Find PATH', paths[this_index])\n    let _this = paths[this_index];\n    active = d3.select(_this).classed(\"active\", true);\n\n    this.setState({\n      current_data: {\n        country: country,\n      },\n    });\n\n    if (select_country_component) {\n      let data = {\n        target: {\n          value: country,\n        },\n      };\n      select_country_component(data, true);\n    }\n\n    if (this.state.navigator === \"firefox\") {\n      return false;\n    }\n\n    let minXY = box[0];\n    let maxXY = box[1];\n    // find size of map area defined\n    let zoomWidth = Math.abs(minXY[0] - maxXY[0]);\n    let zoomHeight = Math.abs(minXY[1] - maxXY[1]);\n    // find midpoint of map area defined\n    let zoomMidX = centroid[0];\n    let zoomMidY = centroid[1];\n    // increase map area to include padding\n    zoomWidth = zoomWidth * (1 + paddingPerc / 100);\n    zoomHeight = zoomHeight * (1 + paddingPerc / 100);\n    // find scale required for area to fill svg\n    let maxXscale = document.getElementById(\"svg_map\").clientWidth / zoomWidth;\n    let maxYscale =\n      document.getElementById(\"svg_map\").clientHeight / zoomHeight;\n    let zoomScale = Math.min(maxXscale, maxYscale);\n    // handle some edge cases\n    // limit to max zoom (handles tiny countries)\n    zoomScale = Math.min(zoomScale, maxZoom);\n    // limit to min zoom (handles large countries and countries that span the date line)\n    zoomScale = Math.max(zoomScale, minZoom);\n    // Find screen pixel equivalent once scaled\n    let offsetX = zoomScale * zoomMidX;\n    let offsetY = zoomScale * zoomMidY;\n    // Find offset to centre, making sure no gap at left or top of holder\n    let dleft = Math.min(\n      0,\n      document.getElementById(\"svg_map\").clientWidth / 2 - offsetX\n    );\n    let dtop = Math.min(\n      0,\n      document.getElementById(\"svg_map\").clientHeight / 2 - offsetY\n    );\n    // Make sure no gap at bottom or right of holder\n    dleft = Math.max(\n      document.getElementById(\"svg_map\").clientWidth - w * zoomScale,\n      dleft\n    );\n    dtop = Math.max(\n      document.getElementById(\"svg_map\").clientHeight - h * zoomScale,\n      dtop\n    );\n    // set zoom\n    svg\n      .transition()\n      .duration(500)\n      .call(\n        zoom.transform,\n        d3.zoomIdentity.translate(dleft, dtop).scale(zoomScale)\n      );\n  };\n\n  reset = () => {\n    // svg.classed(\"active\", false);\n    active = d3.select(null);\n    this.setState({\n      current_data: {\n        country: null,\n        path: null,\n      },\n    });\n    this.initiateZoom();\n  };\n\n  // Function that calculates zoom/pan limits and sets zoom to default value\n  initiateZoom = () => {\n    minZoom = Math.max(\n      document.getElementById(\"map-holder\").clientWidth / w,\n      document.getElementById(\"map-holder\").clientHeight / h\n    );\n    maxZoom = 20 * minZoom;\n    // set extent of zoom to chosen values\n    // set translate extent so that panning can't cause map to move out of viewport\n    zoom.scaleExtent([minZoom, maxZoom]).translateExtent([\n      [0, 0],\n      [w, h],\n    ]);\n    // define X and Y offset for centre of map to be shown in centre of holder\n    let midX =\n      (document.getElementById(\"map-holder\").clientWidth - minZoom * w) / 2;\n    let midY =\n      (document.getElementById(\"map-holder\").clientHeight - minZoom * h) / 2;\n    // change zoom transform to min zoom and centre offsets\n    svg\n      .transition()\n      .duration(750)\n      .call(\n        zoom.transform,\n        d3.zoomIdentity.translate(midX, midY).scale(minZoom)\n      );\n  };\n\n  geoProd = () => {\n    projection = d3\n      .geoEquirectangular()\n      .center([-60, -25])\n      .scale(700)\n      .translate([w / 2, h / 2]);\n    // Define map path\n    path = d3.geoPath().projection(projection);\n    // Create function to apply zoom to countriesGroup\n    // Define map zoom behaviour\n    zoom = d3.zoom().on(\"zoom\", zoomed);\n    // create an SVG\n    svg = d3\n      .select(\"#map-holder\")\n      .append(\"svg\")\n      // set to the same size as the \"map-holder\" div\n      .attr(\"id\", \"svg_map\")\n      .attr(\"width\", document.getElementById(\"map-holder\").clientWidth)\n      .attr(\"height\", document.getElementById(\"map-holder\").clientHeight);\n    // add zoom functionality\n    // .call(zoom)\n\n    countriesGroup = svg.append(\"g\").attr(\"id\", \"map\");\n\n    function zoomed() {\n      let t = d3.event.transform;\n      countriesGroup.attr(\n        \"transform\",\n        \"translate(\" + [t.x, t.y] + \")scale(\" + t.k + \")\"\n      );\n    }\n\n    // window.addEventListener(\"resize\", ()=>{\n    //   svg\n    //     .attr(\"width\", document.getElementById('map').clientWidth)\n    //     .attr(\"height\", document.getElementById('map').clientHeight)\n    //   ;\n    //   initiateZoom();\n    //\n    // });\n\n    // get map data\n    d3.json(\n      \"https://api.jsonbin.io/b/5e961dcd5fa47104cea07454\",\n      // \"https://api.jsonbin.io/b/5c904d232d33133c40168935\",\n      async (json) => {\n        if (!json) return;\n        const { action_loader, available_countries } = this.props;\n\n        await action_loader(false);\n\n        // draw a path for each feature/country\n        countriesGroup\n          .selectAll(\"path\")\n          .data(json.features)\n          .enter()\n          .append(\"path\")\n          .attr(\"d\", path)\n          .attr(\"stroke\", \"white\")\n          .attr(\"id\", function (d, i) {\n            return d.properties.admin.toLowerCase();\n          })\n          .attr(\"fill\", (data) => {\n            let filled =\n              available_countries &&\n              available_countries[data.properties.admin.toLowerCase()];\n            if (!filled) {\n              return \"#e5e5e5\";\n            }\n            return \"#cecdcd\";\n          })\n          .attr(\"class\", (data) => {\n            let filled =\n              available_countries &&\n              available_countries[data.properties.admin.toLowerCase()];\n            if (!filled) {\n              return \"\";\n            }\n            return \"available_country\";\n          })\n          .on(\"click\", (d, i, p) => {\n            // d3.selectAll(\".country\").classed(\"country-on\", false);\n            // d3.select(this).classed(\"country-on\", true);\n            this.boxZoom(path.bounds(d), path.centroid(d), 20, d, i, p);\n          });\n\n        this.initiateZoom();\n      }\n    );\n\n    // drawMaps = async(geojson) => {\n    //\n    //   const {\n    //     action_loader,\n    //     available_countries\n    //   } = this.props\n    //\n    //\n    //   map.selectAll(\"path\")\n    //     .data(geojson.features)\n    //     .enter()\n    //     .append(\"path\")\n    //     .attr(\"d\", path)\n    //     .attr(\"stroke\", \"white\")\n    //     .attr(\"fill\", (data) => {\n    //       let filled = available_countries && available_countries[data.properties.admin.toLowerCase()]\n    //       if(!filled){return \"#f1f1f1\"}\n    //       return \"#dadada\"\n    //     })\n    //     .attr(\"class\", (data) => {\n    //       let filled = available_countries && available_countries[data.properties.admin.toLowerCase()]\n    //       if(!filled){return \"\"}\n    //       return \"available_country\"\n    //     })\n    //     .on(\"click\", (d, i) => {\n    //       return this.boxZoom(path.bounds(d), path.centroid(d), 20);\n    //     });\n    //     // .on('mouseover', mouseover)\n    //     // .on('mouseout', mouseout)\n    //     // .on(\"click\", this.clicked);\n    //     // console.log('DrawMaps => ::', geojson)\n    //     // console.log('DrawMaps => ::', map.select())\n    //     // map.select(\"path\").classed(\"active\", true);\n    // }\n  };\n\n  render() {\n    const { loader } = this.props;\n\n    return (\n      <div id=\"map-holder\">\n        {loader && (\n          <div className=\"mapLoader\">\n            <SimpleLoader label=\"Cargando mapa\" />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SAmerica;\n","import React, { Component, Fragment } from \"react\";\nimport SimpleLoader from \"../../loaders\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../../actions\";\nimport SAmerica from \"../sAmerica\";\nimport { InputCountry } from \"../../inputs\";\nimport { matchItem } from \"../../../../utils\";\nimport { simulate_click } from \"../../../../utils\";\n\nimport \"./loader_app.css\";\nimport withCoinsendaServices from \"../../../withCoinsendaServices\";\n\nclass SelectCountry extends Component {\n  state = {\n    available_countries: null,\n    disabled: true,\n    country_match: null,\n  };\n\n  componentDidMount() {\n    this.load_countries();\n  }\n\n  action_loader = (payload) => {\n    // this.props.action.isAppLoading(payload)\n    this.setState({ disabled: false });\n  };\n\n  load_countries = async () => {\n    // this.props.action.isAppLoading(true)\n    let res = await this.props.coinsendaServices.countryValidators();\n    if (!res) {\n      return false;\n    }\n    // console.log('||||| =====================================> SelectCountry', res)\n    return this.setState({\n      available_countries: res.countries,\n      available_country_list: res.country_list,\n    });\n  };\n\n  update_country = async (e, without_click) => {\n    // alert('update country')\n    const { value } = e.target;\n    const { available_country_list } = this.state;\n    let match = await matchItem(\n      available_country_list,\n      { primary: value },\n      \"value\"\n    );\n    if (match && match.length === 1) {\n      //Si hay una coincidencia con la busqueda simulamos el click en el país de coincidencia\n      this.setState({ country_match: match[0] });\n\n      if (!without_click) {\n        simulate_click(document.getElementById(`${match[0].value}`), \"click\");\n      }\n    }\n  };\n\n  reset_data = () => {\n    simulate_click(\n      document.getElementById(`${this.state.country_match.value}`),\n      \"click\"\n    );\n    this.setState({ country_match: null });\n  };\n\n  new_country_selected = () => {\n    const { value } = this.state.country_match;\n    this.props.select_country(value);\n  };\n\n  render() {\n    const { appLoadLabel, loader } = this.props;\n\n    const { available_countries, country_match, disabled } = this.state;\n\n    // console.log('available_countries',available_countries)\n\n    return (\n      <Fragment>\n        {available_countries ? (\n          <div className=\"selectCountry\">\n            <div className=\"LoaderAppTittle\">\n              <InputCountry\n                country_match={country_match}\n                update_country={this.update_country}\n                reset_data={this.reset_data}\n                loader={loader}\n                // disabled={disabled}\n                handleSubmit={this.new_country_selected}\n                active={country_match ? true : null}\n              />\n            </div>\n            <div className={`SamericaContainer ${!disabled ? \"enableMap\" : \"\"}`} >\n              <div className=\"blocker\" style={{ display: country_match ? \"initial\" : \"none\" }} ></div>\n              <SAmerica\n                width={900}\n                height={768}\n                action_loader={this.action_loader}\n                available_countries={available_countries}\n                select_country_component={this.update_country}\n              />\n            </div>\n            <p></p>\n          </div>\n        ) : (\n          <SimpleLoader label={`${appLoadLabel}`} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  // console.log('||||||||| LOADEER STATE', state)\n  const { user, wallets, all_pairs } = state.modelData;\n  const { loader } = state.isLoading;\n\n  return {\n    appLoadLabel: state.isLoading.appLoadLabel,\n    user: user,\n    wallets,\n    all_pairs,\n    country: null,\n    loader,\n    // country:'colombia'\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withCoinsendaServices(SelectCountry));\n"],"sourceRoot":""}