{"version":3,"sources":["components/widgets/inputs/index.js","components/widgets/maps/AmericaMap.jsx","components/widgets/maps/select_country/select_country.js"],"names":["IconSwitch","loadable","CountryUrl","Environtment","InputForm","props","clase","disabled","address","focusAction","status","addressVerify","unFocusAction","state_item","autoFocus","className","style","display","label","active","type","placeholder","onChange","actualizarEstado","onFocus","onBlur","name","value","onKeyPress","handleKeyPress","autoComplete","icon","color","size","InputFormAuth","verifying","error","handleFocus","handleBlur","border","defaultValue","Component","InputDepositForm","state","placeHolder","window","innerWidth","finalValue","componentDidMount","this","setState","componentWillReceiveProps","number_format","render","actualizar","fontSize","length","InputCountryPrefix","toggleSection","search_result","open","update","clean_search_result","onClick","src","flag","alt","width","height","prefix","InputKycBasic","kyc","handleSubmit","step","_onFocus","search_results","Array","isArray","id","open_sect","top","map","item","inputProps","ui_type","console","log","min","max","pattern","classNames","onSubmit","data_state","colorMessage","message","InputCountry","update_country","country_match","reset_data","loader","idNextButton","useKeyActionAsClick","ui_name","AmericaMap","availableCountries","actionLoader","setSelectedCountry","wrapperid","useState","getCountryName","data","properties","admin","toLowerCase","useEffect","d3Cdn","getCdnPath","loadDynamicScript","d3","mapContainer","document","getElementById","isFirefox","navigator","userAgent","indexOf","currentData","country","w","h","select","minZoom","Math","clientWidth","clientHeight","maxZoom","projection","geoEquirectangular","center","scale","translate","path","geoPath","svg","append","attr","countriesGroup","zoom","on","transform","x","y","k","initiateZoom","scaleExtent","translateExtent","midX","midY","transition","duration","call","zoomIdentity","json","then","selectAll","features","enter","node","children","selectedCountryElement","querySelector","isActived","classList","includes","remove","target","box","centroid","paddingPerc","paths","ppp","classed","minXY","maxXY","zoomWidth","abs","zoomHeight","zoomMidX","zoomMidY","maxXscale","maxYscale","zoomScale","offsetX","offsetY","dleft","dtop","boxZoom","bounds","mapPaths","SelectCountry","available_countries","action_loader","payload","load_countries","async","res","coinsendaServices","countryValidators","countries","available_country_list","country_list","e","without_click","match","matchItem","primary","simulate_click","new_country_selected","select_country","appLoadLabel","selectedCountry","connect","user","wallets","all_pairs","modelData","isLoading","dispatch","action","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/29.3e0ac66c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport loadable from \"@loadable/component\";\nimport { number_format } from \"../../../utils\";\nimport { SimpleLoader } from \"../loaders\";\nimport Environtment from \"../../../environment\";\n// import MaskedInput from \"react-text-mask\";\n// import createAutoCorrectedDatePipe from \"text-mask-addons/dist/createAutoCorrectedDatePipe\";\nimport useKeyActionAsClick from \"../../../hooks/useKeyActionAsClick\";\nimport { getCdnPath } from '../../../environment'\nimport \"./inputStyles.css\";\n\nconst IconSwitch = loadable(() => import(\"../icons/iconSwitch\"));\nconst NumberInput = loadable(() => import(\"./numberInput\"));\n\n// const autoCorrectedDatePipe = createAutoCorrectedDatePipe(\"dd/mm/yyyy\");\nconst { CountryUrl } = Environtment;\n\nexport const InputFormConverter = (props) => {\n  return (\n    <div className=\"contInputFormConverter\">\n      {props.icon && (\n        <div className={`iconConverterContainer iConver ${props.iconPosition}`}>\n          <div className=\"contIconvert\">\n            <IconSwitch icon={props.icon} size={25} />\n          </div>\n          <p className=\"currencyNameConv fuente\">{props.currency_short_name}</p>\n        </div>\n      )}\n      <input\n        className={`inputElement ${props.iconPosition}`}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={props.onChange}\n        value={props.value}\n        // onFocus={props.focusAction}\n        // onBlur={unFocusAction}\n        name={props.name}\n        // defaultValue={props.value}\n        // disabled={disabled}\n      />\n    </div>\n  );\n};\n\nexport const InputForm = (props) => {\n  const {\n    clase,\n    disabled,\n    address,\n    focusAction,\n    status,\n    addressVerify,\n    unFocusAction,\n    state_item,\n    autoFocus,\n  } = props;\n  return (\n    <div className={`${!clase ? \"containerInputComponent\" : clase}`}>\n      <p\n        className=\"labelText fuente\"\n        style={{ display: !props.label ? \"none\" : \"initial\" }}\n      >\n        {props.label}\n      </p>\n      <div\n        className={`inputContainer ${\n          props.active ? \"inputActivado\" : \"\"\n        } ${state_item}`}\n      >\n        <input\n          className={`inputElement ${\n            props.active ? \"inputActivado\" : \"\"\n          } ${addressVerify}`}\n          type={props.type}\n          placeholder={props.placeholder}\n          onChange={props.actualizarEstado}\n          onFocus={focusAction}\n          onBlur={unFocusAction}\n          name={props.name}\n          value={props.value}\n          onKeyPress={\n            props.name === \"account_number\" ? props.handleKeyPress : null\n          }\n          disabled={disabled}\n          autoFocus={autoFocus}\n          autoComplete=\"off\"\n        />\n        {address && (\n          <div className=\"contIconAddress\">\n            <IconSwitch\n              icon={addressVerify === \"Verify\" ? \"verify\" : \"wallet\"}\n              color={addressVerify === \"Verify\" ? \"#4caf50\" : \"gray\"}\n              size={25}\n            />\n          </div>\n        )}\n      </div>\n      {(props.type === \"number\" || props.type === \"password\") && (\n        <p className=\"statusInput\">{status}</p>\n      )}\n    </div>\n  );\n};\n\nexport const InputFormAuth = (props) => {\n  const {\n    clase,\n    label,\n    active,\n    type,\n    placeholder,\n    actualizarEstado,\n    name,\n    value,\n    handleKeyPress,\n    status,\n    verifying,\n    error,\n    handleFocus,\n    handleBlur,\n    disabled,\n  } = props;\n\n  // console.log(`${}`)\n  // <SimpleLoader/>\n\n  return (\n    <div\n      className={`${!clase ? \"containerInputComponent AuthInputComp\" : clase}`}\n    >\n      <p\n        className=\"labelText fuente\"\n        style={{ display: !label ? \"none\" : \"initial\" }}\n      >\n        {label}\n      </p>\n      <div\n        // className={`inputContainer ${active ? 'inputActivado' : '' }`}\n        className=\"inputContainer inputAuths\"\n        style={{\n          border:\n            verifying && !active\n              ? \"1px solid #039aff\"\n              : active\n              ? \"1px solid #59b200\"\n              : error\n              ? \"1px solid red\"\n              : \"1px solid #50667a61\",\n        }}\n      >\n        {!verifying ? (\n          <input\n            className={`inputElement TwoFactorTypo fuente2`}\n            style={{ color: active ? \"#59b200\" : \"gray\" }}\n            type={type}\n            placeholder={placeholder}\n            onChange={actualizarEstado}\n            name={name}\n            defaultValue={value}\n            onKeyPress={name === \"account_number\" ? handleKeyPress : null}\n            onFocus={handleFocus ? handleFocus : null}\n            onBlur={handleBlur ? handleBlur : null}\n            disabled={disabled}\n            autoFocus={true}\n          />\n        ) : (\n          <div className=\"AuthLoader\">\n            <SimpleLoader />\n          </div>\n        )}\n      </div>\n      <p\n        className=\"statusInput fuente\"\n        style={{\n          color:\n            verifying && !active\n              ? \"#039aff\"\n              : active\n              ? \"#59b200\"\n              : error\n              ? \"red\"\n              : \"#50667a61\",\n        }}\n      >\n        <i\n          className=\"fas fa-check\"\n          style={{ display: active ? \"initial\" : \"none\" }}\n        ></i>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport class ReadReceiveCoin extends Component {\n  render() {\n    const {\n      secondary_value,\n      placeholder,\n      secondary_coin,\n      isReadOnly,\n      active,\n      actualizarEstado,\n      name,\n      primary_value,\n      selectPair,\n      totalValue,\n    } = this.props;\n\n    return (\n      <>\n        {/* <div className={`${!clase ? 'containerInputComponent' : clase}`}> */}\n        <div className={`inputContainer ${active ? \"inputActivado\" : \"\"}`}>\n          {!secondary_value ? (\n            <div className=\"ReadReceiveCoinLoader\">\n              <SimpleLoader />\n            </div>\n          ) : (\n            <>\n              <div\n                className=\"coinBalance2 fuente2\"\n                onClick={() => selectPair(false)}\n              >\n                <div className=\"coinB2\">\n                  <i className=\"fas fa-angle-down\"></i>\n                  <p>{secondary_coin}</p>\n                  {secondary_coin && (\n                    <img\n                      src={`${getCdnPath('assets')}coins/${secondary_coin}.png`}\n                      alt=\"\"\n                      width=\"30\"\n                    />\n                  )}\n                </div>\n              </div>\n              {!isReadOnly ? (\n                <input\n                  className={`inputElement ${active ? \"inputActivado\" : \"\"}`}\n                  type=\"number\"\n                  placeholder={placeholder}\n                  onChange={actualizarEstado}\n                  name={name}\n                  value={primary_value}\n                />\n              ) : (\n                <p\n                  className=\"read_only\"\n                  style={{ color: active ? \"#3A7BD5\" : \"gray\" }}\n                >\n                  {\" \"}\n                  {totalValue} {totalValue ? secondary_coin : \"0\"}{\" \"}\n                </p>\n              )}\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport const InputFormCoin = (props) => {\n  const {\n    saldoDisponible,\n    coin,\n    value,\n    placeholder,\n    getMaxAvailable,\n    secondary_value,\n    handleChange,\n    useFiatInput,\n    active,\n    label,\n    name,\n    handleKeyPress,\n  } = props;\n\n  const isMovilViewport = window.innerWidth < 768;\n  return (\n    <>\n      {/* <div className={`${!clase ? 'containerInputComponent' : clase}`}> */}\n      <div>\n        <p\n          className=\"labelText fuente\"\n          style={{ display: !label ? \"none\" : \"initial\" }}\n        >\n          {label}\n        </p>\n        <div\n          className={`InputFormCoin inputContainer ${\n            active ? \"inputActivado\" : \"\"\n          }`}\n        >\n          <div\n            className=\"coinBalance fuente2\"\n            onClick={!secondary_value ? null : getMaxAvailable}\n          >\n            <p>\n              {!isMovilViewport && \"Saldo disponible \"}\n              {saldoDisponible > 0\n                ? useFiatInput\n                  ? `${number_format(saldoDisponible)}`\n                  : `${saldoDisponible}`\n                : \"0\"}{\" \"}\n              {coin}\n            </p>\n            {coin && (\n              <img\n                src={`${getCdnPath('assets')}coins/${coin}.png`}\n                alt=\"\"\n                width=\"30\"\n              />\n            )}\n          </div>\n          {useFiatInput ? (\n            <NumberInput\n              type=\"text\"\n              autoComplete=\"off\"\n              onChange={handleChange}\n              placeholder={placeholder}\n              name={name}\n              className={`inputElement ${active ? \"inputActivado\" : \"\"}`}\n              value={value}\n              max_available={saldoDisponible}\n            />\n          ) : (\n            <input\n              className={`inputElement ${active ? \"inputActivado\" : \"\"}`}\n              type=\"number\"\n              placeholder={placeholder}\n              onChange={handleChange}\n              name={name}\n              value={value}\n              onKeyPress={name === \"account_number\" ? handleKeyPress : null}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport class InputDepositForm extends Component {\n  state = {\n    placeHolder: window.innerWidth > 768 ? \"Escribe la cantidad\" : \"Cantidad\",\n    finalValue: \"\",\n  };\n\n  componentDidMount() {\n    this.setState({\n      finalValue: this.state.placeHolder,\n    });\n  }\n\n  componentWillReceiveProps(props) {\n    // console.log('InputDepositForm / componentWillReceiveProps -', isNaN(props.value))\n    const { value } = props;\n\n    if (value) {\n      this.setState({\n        finalValue: number_format(value),\n      });\n    } else {\n      this.setState({\n        finalValue: this.state.placeHolder,\n      });\n    }\n  }\n\n  render() {\n    const { actualizar, handleKeyPress, value, name, autoFocus } = this.props;\n    const { finalValue } = this.state;\n    const style = {\n      fontSize:\n        finalValue.length < 10\n          ? \"90px\"\n          : finalValue.length < 15\n          ? \"60px\"\n          : \"40px\",\n    };\n\n    return (\n      <div className=\"containerInputComponent with-adapt\">\n        <input\n          className={`inputElement2 signoPesos fuente2 width-adapt-child`}\n          type=\"text\"\n          style={style}\n          placeholder={`$ ${finalValue}`}\n          onChange={actualizar}\n          name={name}\n          autoFocus={autoFocus}\n          value={value ? `$ ${finalValue}` : \"\"}\n          onKeyPress={handleKeyPress}\n        />\n      </div>\n    );\n  }\n}\n\nexport const InputCountryPrefix = (props) => {\n  const {\n    toggleSection,\n    search_result,\n    open,\n    update,\n    clean_search_result,\n    autoFocus,\n  } = props;\n\n  // @Param search_result:object  => modelo que almacena la información del país (imagen, prefijo)\n  // code: \"colombia\"\n  // flag: \"https://restcountries.eu/data/col.svg\"\n  // id: 1\n  // name: \"Colombia\"\n  // prefix: \"57\"\n\n  // @Param open:boolean => Define si esta desplegado el componente o contraido\n\n  // console.log('||||InputCountryPrefix', search_result && search_result.prefix)\n\n  return (\n    <div\n      className={`PhoneamEsta ${open ? \"openS\" : \"\"}`}\n      onClick={open ? null : toggleSection}\n    >\n      <div className=\"inputPhone\">\n        {search_result && (\n          <img\n            src={`${CountryUrl}${search_result.flag}`}\n            alt=\"\"\n            className=\"PhoneamEsta_img\"\n            width={20}\n            height={20}\n          />\n        )}\n        <p className=\"fuentePrin PhoneamEsta_p\">\n          + {search_result ? search_result.prefix[0] : \"--\"}\n        </p>\n        <div\n          className={`inputComponentPhone ${open ? \"openS\" : \"\"} ${\n            search_result ? \"search_result\" : \"\"\n          }`}\n        >\n          {search_result ? (\n            <p className={`search_result_kyc ${open ? \"openS\" : \"\"}`}>\n              {search_result.name}\n              <i\n                className=\"fas fa-times cerratelo\"\n                onClick={clean_search_result}\n              ></i>\n            </p>\n          ) : (\n            <input\n              type=\"text\"\n              className=\"inputElement3\"\n              autoFocus={autoFocus}\n              placeholder=\"Escribe el país del indicativo.\"\n              onChange={update}\n              // name=\"findbar_name\"\n              name=\"country_prefix\"\n            />\n          )}\n        </div>\n      </div>\n      <i\n        className={`fas fa-chevron-down PhoneamEsta_icon ${open ? \"anim\" : \"\"}`}\n        onClick={toggleSection}\n      ></i>\n      <span className=\"linePhone\"></span>\n    </div>\n  );\n};\n\nexport const InputKycBasic = (props) => {\n  const {\n    kyc,\n    update,\n    handleSubmit,\n    state,\n    step,\n    toggleSection,\n    _onFocus,\n    search_results,\n    clean_search_result,\n  } = props;\n\n  let search_result = Array.isArray(search_results) && search_results[0];\n  \n\n  return (\n    <div\n      id=\"kycPrime\"\n      className={`containerInputComponent2 ${state.open_sect ? \"openS\" : \"\"}`}\n    >\n      {/* <div id=\"kycPrime\" className={`containerInputComponent2`}> */}\n\n      <div className=\"inputLabelsCont\">\n        <div className=\"InputCarous\" style={{ top: `-${(step - 1) * 40}px` }}>\n          {kyc.map((item) => {\n            return (\n              <p key={item.id} className=\"labelText2 fuente\">\n                {item.label}\n              </p>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className={`inputContainer3 ${state.active ? \"inputActivado\" : \"\"}`}>\n        {kyc.map((item) => {\n          const isDateInput = state.ui_type === \"date\";\n          let inputProps = {}\n          if(isDateInput){\n            console.log('|||||||||||| isDateInput ====> ', state)\n            inputProps = {\n              min:\"1940-01-01\",\n              max:\"2003-12-12\",\n              pattern:/\\d{4}-\\d{2}-\\d{2}/,\n              autoFocus:true\n            }\n          }\n          const classNames = `inputElement3 ${state.active ? \"inputActivado\" : \"\"} ${state.ui_type === \"phone\" ? \"phone\" : \"\"}`;\n          return (\n            step === item.id && (\n              <form onSubmit={handleSubmit} key={item.id} id={`${state.ui_type === \"phone\" ? \"phone\" : \"\"}`}>\n                {state.ui_type === \"phone\" && (\n                  <InputCountryPrefix\n                    open={state.open_sect}\n                    autoFocus={true}\n                    search_result={search_result}\n                    {...props}\n                  />\n                )}\n\n                {/* {isDateInput && (\n                  <MaskedInput\n                    mask={[/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/,]}\n                    className={classNames}\n                    placeholder={item.placeholder}\n                    guide={true}\n                    name={item.name}\n                    autoFocus={true}\n                    pipe={autoCorrectedDatePipe}\n                    onChange={(e) => {\n                      e.persist();\n                      update(e);\n                    }}\n                  />\n                )} */}\n\n                {/* cuando se confirma deposito, consulto tx security si hay scope para confirmación de deposito */}\n                {/* type biometric user id */}\n                {/* identity service  */}\n                {/* biometric data */}\n\n                {search_result && state.ui_type === \"select\" ? (\n                  <p className={`search_result_kyc openS`}>\n                    {search_result.name}\n                    <i className=\"fas fa-times cerratelo\"  onClick={clean_search_result} ></i>\n                  </p>\n                ) : (\n                  (\n                    <input\n                      key={item.id}\n                      autoFocus={true}\n                      className={classNames}\n                      type={\n                        state.ui_type === \"phone\"\n                          ? \"text\"\n                          : state.ui_type === \"select\"\n                          ? \"text\"\n                          : state.ui_type\n                      }\n                      placeholder={\n                        state.data_state[item.name]\n                          ? state.data_state[item.name]\n                          : item.placeholder\n                      }\n                      onChange={update}\n                      name={item.name}\n                      value={state.data_state[item.name]}\n                      onFocus={_onFocus}\n                      {...inputProps}\n                    />\n                  )\n                )}\n              </form>\n            )\n          );\n        })}\n\n        <div className=\"InputProgressBar\">\n          <div\n            className=\"InputProgressed\"\n            style={{ width: step < 2 ? 0 : `${(step * 100) / kyc.length}%` }}\n          ></div>\n        </div>\n\n        <div\n          className={`ctaInputKyc ${state.open_sect ? \"openPhone\" : \"\"}`}\n          onClick={state.open_sect ? toggleSection : handleSubmit}\n        >\n          <div className=\"contCtaKyc\">\n            <i className=\"fas fa-arrow-right arrowcito backInputKyc\"></i>\n            <i\n              className={` ${\n                state.ui_type === \"phone\" ? \"fas fa-mobile-alt\" : \"fas fa-check\"\n              } frontInputKyc`}\n            ></i>\n          </div>\n        </div>\n      </div>\n      <div className=\"InputContainerT\">\n        <p\n          className=\"fuente Inputmsg\"\n          style={{ color: `${state.colorMessage}` }}\n        >\n          {state.message}\n        </p>\n        <p className=\"fuente2 InputStep\">\n          {step}/{kyc.length}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport const InputCountry = (props) => {\n  const {\n    handleSubmit,\n    update_country,\n    country_match,\n    reset_data,\n    disabled,\n    active,\n    loader,\n  } = props;\n\n  const idNextButton = useKeyActionAsClick(\n    true,\n    \"id-next-subfix-button\",\n    13,\n    false,\n    \"onkeydown\"\n  );\n\n  return (\n    <div id=\"kycPrime\" className=\"containerInputComponent3\">\n      <div className=\"inputLabelsCont\">\n        <div className=\"InputCarous\">\n          <p className=\"labelText3 fuente \">\n            Elige el país desde el que operarás\n          </p>\n        </div>\n      </div>\n\n      <div className={`inputContainer3 ${active ? \"inputActivado\" : \"\"}`}>\n        {loader && (\n          <div className=\"inputCountryLoader\">\n            <SimpleLoader loader={2} />\n          </div>\n        )}\n\n        {country_match ? (\n          <div className=\"country_selected\">\n            <IconSwitch icon={country_match.value} size={25} />\n            <p className=\"fuente\">{country_match.ui_name}</p>\n            <i className=\"fas fa-times cerratelo\" onClick={reset_data}></i>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit}>\n            <input\n              className={`inputElement3 ${active ? \"inputActivado\" : \"\"}`}\n              type=\"text\"\n              placeholder=\"Ej: Colombia\"\n              onChange={update_country}\n              name=\"country\"\n              disabled={disabled}\n              // defaultValue=\"\"\n            />\n          </form>\n        )}\n\n        <div className=\"InputProgressBar countryppp\">\n          {/* <div className=\"InputProgressed\" style={{ width: step<2 ? 0 : `${(((step*100))/kyc.length)}%` }} ></div> */}\n          <div\n            className=\"InputProgressed\"\n            style={{ width: country_match ? \"100%\" : \"0\" }}\n          ></div>\n        </div>\n\n        <i\n          id={idNextButton}\n          className={`fas fa-arrow-right arrowcito2 ${\n            country_match ? \"aparecer\" : \"\"\n          }`}\n          onClick={country_match ? handleSubmit : null}\n        ></i>\n      </div>\n      <div className=\"InputContainerT\">\n        {/* <p className=\"fuente Inputmsg\" style={{ color: `${colorMessage}` }} >{message}</p> */}\n        {/* <p className=\"fuente2 InputStep\" >{step}/{kyc.length}</p> */}\n      </div>\n    </div>\n  );\n};\n\nexport default InputForm;\n","import React, { useEffect, useState } from 'react'\nimport SimpleLoader from '../loaders'\nimport { getCdnPath } from '../../../environment'\nimport loadDynamicScript from '../../../utils/loadDynamicScript'\n\nimport './sAmerica.css'\n\n\nconst AmericaMap = ({\n    availableCountries,\n    actionLoader,\n    loader,\n    setSelectedCountry, \n    // selectedCountry\n}) => {\n\n    const [wrapperid] = useState('map-holder')\n    const getCountryName = (data) => data.properties.admin.toLowerCase()\n\n    useEffect(() => {\n        let d3Cdn = getCdnPath('d3')\n        loadDynamicScript(\n            () => {\n                const d3 = window.d3\n                const mapContainer = document.getElementById(wrapperid)\n                if (!mapContainer) return\n\n                const isFirefox = navigator && navigator.userAgent.toLowerCase().indexOf('firefox') > -1\n\n                const currentData = {\n                    country: null,\n                }\n                const w = 3000\n                const h = 1250\n                let active = d3.select(null)\n                let minZoom = Math.max(\n                    mapContainer.clientWidth / w,\n                    mapContainer.clientHeight / h\n                )\n                let maxZoom = 20 * minZoom\n\n                const projection = d3\n                    .geoEquirectangular()\n                    .center([-60, -25])\n                    .scale(700)\n                    .translate([w / 2, h / 2])\n                // Define map path\n                const path = d3.geoPath().projection(projection)\n                // create an SVG\n                const svg = d3\n                    .select(`#${wrapperid}`)\n                    .append('svg')\n                    // set to the same size as the \"map-holder\" div\n                    .attr('id', 'svg_map')\n                    .attr('width', mapContainer.clientWidth)\n                    .attr('height', mapContainer.clientHeight)\n                // add zoom functionality\n                // .call(zoom)\n\n                const countriesGroup = svg.append('g').attr('id', 'map')\n                \n                // Create function to apply zoom to countriesGroup\n\n                // Define map zoom behaviour\n                const zoomed = ({ transform }) => {\n                    let { x, y, k } = transform\n                    countriesGroup.attr(\n                        'transform',\n                        'translate(' + [x, y] + ')scale(' + k + ')'\n                    )\n                }\n                const zoom = d3.zoom().on('zoom', zoomed)\n                // Function that calculates zoom/pan limits and sets zoom to default value\n                const initiateZoom = () => {\n                    // set extent of zoom to chosen values\n                    // set translate extent so that panning can't cause map to move out of viewport\n                    zoom.scaleExtent([minZoom, maxZoom]).translateExtent([\n                        [0, 0],\n                        [w, h],\n                    ])\n                    // define X and Y offset for centre of map to be shown in centre of holder\n                    let midX = (mapContainer.clientWidth - minZoom * w) / 2\n                    let midY = (mapContainer.clientHeight - minZoom * h) / 2\n                    // change zoom transform to min zoom and centre offsets\n                    svg.transition()\n                        .duration(750)\n                        .call(\n                            zoom.transform,\n                            d3.zoomIdentity.translate(midX, midY).scale(minZoom)\n                        )\n                }\n\n                const boxZoom = (\n                    box,\n                    centroid,\n                    paddingPerc,\n                    data,\n                    paths,\n                    ppp\n                ) => {\n                    let country = getCountryName(data)\n                    let available_country = availableCountries[country]\n                    \n                    if (!available_country) {\n                        return false\n                    }\n\n                    active.classed('active', false)\n                    active.classed('disabled', false)\n                    // if (country === currentData.country) return reset()\n\n                    d3.select('#map').selectAll('path').classed('active', false)\n                    d3.select(ppp.target).classed('active', true)\n                    currentData.country = country\n\n                    if (isFirefox) {\n                        return false\n                    }\n\n                    // setSelectedCountry(country)\n\n\n                    const minXY = box[0]\n                    const maxXY = box[1]\n                    // find size of map area defined\n                    let zoomWidth = Math.abs(minXY[0] - maxXY[0])\n                    let zoomHeight = Math.abs(minXY[1] - maxXY[1])\n                    // find midpoint of map area defined\n                    const zoomMidX = centroid[0]\n                    const zoomMidY = centroid[1]\n                    // increase map area to include padding\n                    zoomWidth = zoomWidth * (1 + paddingPerc / 100)\n                    zoomHeight = zoomHeight * (1 + paddingPerc / 100)\n                    // find scale required for area to fill svg\n                    const maxXscale =\n                        document.getElementById('svg_map').clientWidth /\n                        zoomWidth\n                    const maxYscale =\n                        document.getElementById('svg_map').clientHeight /\n                        zoomHeight\n                    let zoomScale = Math.min(maxXscale, maxYscale)\n                    // handle some edge cases\n                    // limit to max zoom (handles tiny countries)\n                    zoomScale = Math.min(zoomScale, maxZoom)\n                    // limit to min zoom (handles large countries and countries that span the date line)\n                    zoomScale = Math.max(zoomScale, minZoom)\n                    // Find screen pixel equivalent once scaled\n                    const offsetX = zoomScale * zoomMidX\n                    const offsetY = zoomScale * zoomMidY\n                    // Find offset to centre, making sure no gap at left or top of holder\n                    let dleft = Math.min(\n                        0,\n                        document.getElementById('svg_map').clientWidth / 2 -\n                            offsetX\n                    )\n                    let dtop = Math.min(\n                        0,\n                        document.getElementById('svg_map').clientHeight / 2 -\n                            offsetY\n                    )\n                    // Make sure no gap at bottom or right of holder\n                    dleft = Math.max(\n                        document.getElementById('svg_map').clientWidth -\n                            w * zoomScale,\n                        dleft\n                    )\n                    dtop = Math.max(\n                        document.getElementById('svg_map').clientHeight -\n                            h * zoomScale,\n                        dtop\n                    )\n                    // set zoom\n                    svg.transition()\n                        .duration(500)\n                        .call(\n                            zoom.transform,\n                            d3.zoomIdentity\n                                .translate(dleft, dtop)\n                                .scale(zoomScale)\n                        )\n                }\n\n\n                d3.json('https://api.jsonbin.io/b/5e961dcd5fa47104cea07454').then((json) => {\n                    if (!json) return\n                    actionLoader(false)\n                    // draw a path for each feature/country\n                    countriesGroup\n                        .selectAll('path')\n                        .data(json.features)\n                        .enter()\n                        .append('path')\n                        .attr('d', path)\n                        .attr('stroke', 'white')\n                        .attr('id', (data) => getCountryName(data))\n                        .attr('fill', (data) => {\n                            const isValidCountry =\n                                availableCountries &&\n                                availableCountries[getCountryName(data)]\n\n                            const filled = isValidCountry\n                                ? '#cecdcd'\n                                : '#e5e5e5'\n\n                            return filled\n                        })\n                        .attr('class', (data) => {\n                            const isValidCountry =\n                                availableCountries &&\n                                availableCountries[getCountryName(data)]\n\n                            const filled = isValidCountry\n                                ? 'available_country'\n                                : ''\n\n                            return filled\n                        })\n                        .on('click', (props, data) => {\n\n                            const mapPaths = d3.select('#map').node().children\n                            const country = getCountryName(data)\n                            let selectedCountryElement = document.querySelector(`#${country}`)\n                            const isActived = selectedCountryElement.classList.value.includes('active')\n                            \n                            console.log('isActive => ', isActived)\n\n                            if(isActived){\n                                // disabled country selection\n                                selectedCountryElement.classList.remove('active')\n                                setSelectedCountry({target:{value:null}}, true)\n                                initiateZoom()\n\n                            }else {\n                                setSelectedCountry({target:{value:country}}, true)\n                                boxZoom(\n                                    path.bounds(data),\n                                    path.centroid(data),\n                                    20,\n                                    data,\n                                    mapPaths,\n                                    props\n                                )\n                            }\n                        })\n                    initiateZoom()\n                })\n            },\n            d3Cdn,\n            'd3'\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wrapperid])\n\n    return (\n        <div id={wrapperid}>\n            {loader && (\n                <div className=\"mapLoader\">\n                    <SimpleLoader label=\"Cargando mapa\" />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default AmericaMap\n","import React, { Component, Fragment } from \"react\";\nimport SimpleLoader from \"../../loaders\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../../actions\";\n// import SAmerica from \"../sAmerica\";\nimport AmericaMap from '../AmericaMap'\nimport { InputCountry } from \"../../inputs\";\nimport { matchItem } from \"../../../../utils\";\nimport { simulate_click } from \"../../../../utils\";\n\nimport \"./loader_app.css\";\nimport withCoinsendaServices from \"../../../withCoinsendaServices\";\n\nclass SelectCountry extends Component {\n  state = {\n    available_countries: null,\n    disabled: true,\n    country_match: null,\n  };\n\n  componentDidMount() {\n    this.load_countries();\n  }\n\n  action_loader = (payload) => {\n    // this.props.action.isAppLoading(payload)\n    this.setState({ disabled: false });\n  };\n\n  load_countries = async () => {\n    // this.props.action.isAppLoading(true)\n    let res = await this.props.coinsendaServices.countryValidators();\n    if (!res) {\n      return false;\n    }\n    // console.log('||||| =====================================> SelectCountry', res)\n    return this.setState({\n      available_countries: res.countries,\n      available_country_list: res.country_list,\n    });\n  };\n\n  update_country = async (e, without_click) => {\n    // alert('update country')\n    let value = e.target && e.target.value \n    const { available_country_list } = this.state;\n    console.log('update_country', value)\n    if(!value){return}\n    let match = await matchItem(\n      available_country_list,\n      { primary: value },\n      \"value\"\n    );\n\n    if (match && match.length === 1) {\n      //Si hay una coincidencia con la busqueda simulamos el click en el país de coincidencia\n      this.setState({ country_match: match[0] });\n\n      if (!without_click) {\n        simulate_click(document.getElementById(`${match[0].value}`), \"click\");\n      }\n    }\n  };\n\n\n  reset_data = () => {\n    simulate_click(document.getElementById(`${this.state.country_match.value}`), \"click\");\n    this.setState({ country_match: null });\n  };\n\n  new_country_selected = () => {\n    const { value } = this.state.country_match;\n    this.props.select_country(value);\n  };\n\n  render() {\n    const { appLoadLabel, loader } = this.props;\n\n    const { available_countries, country_match, disabled } = this.state;\n\n    // console.log('available_countries',available_countries)\n\n    return (\n      <Fragment>\n        {available_countries ? (\n          <div className=\"selectCountry\">\n            <div className=\"LoaderAppTittle\">\n              <InputCountry\n                country_match={country_match}\n                update_country={this.update_country}\n                reset_data={this.reset_data}\n                loader={loader}\n                // disabled={disabled}\n                handleSubmit={this.new_country_selected}\n                active={country_match ? true : null}\n              />\n            </div>\n            <div className={`SamericaContainer ${!disabled ? \"enableMap\" : \"\"}`} >\n              <div className=\"blocker\" style={{ display: country_match ? \"initial\" : \"none\" }} ></div>\n              <AmericaMap\n                width={900}\n                height={768}\n                actionLoader={this.action_loader}\n                availableCountries={available_countries}\n                setSelectedCountry={this.update_country}\n                selectedCountry={this.state.country_match}\n              />\n\n              {/* <SAmerica\n                width={900}\n                height={768}\n                action_loader={this.action_loader}\n                available_countries={available_countries}\n                select_country_component={this.update_country}\n              /> */}\n\n            </div>\n            <p></p>\n          </div>\n        ) : (\n          <SimpleLoader label={`${appLoadLabel}`} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  // console.log('||||||||| LOADEER STATE', state)\n  const { user, wallets, all_pairs } = state.modelData;\n  const { loader } = state.isLoading;\n\n  return {\n    appLoadLabel: state.isLoading.appLoadLabel,\n    user: user,\n    wallets,\n    all_pairs,\n    country: null,\n    loader,\n    // country:'colombia'\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withCoinsendaServices(SelectCountry));\n"],"sourceRoot":""}