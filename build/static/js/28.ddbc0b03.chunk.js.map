{"version":3,"sources":["components/forms/widgets/kyc/validations.js"],"names":["textInputValidator","value","data","validateLabelMsg","_value","parseOnlyLetters","status","match","settings","successPattern","selectListValidator","selectList","generalValidator","replace","result","Object","keys","forEach","itemList","includes","toLowerCase","length","addItemTag","key","uiName","kycValidation","location_country","province","address","city","phone","parseOnlyNumbers","meta_phone","filter","countryItem","nationality","id_type","name","surname","birthday","parseBirth","state","formatMaskDate","birthYear","Date","getFullYear","age","datePick","document","querySelector","targetLabel","setTimeout","classList","add","writeOnLabel","defaultMessage","remove","id_number","_data","JSON","parse","stringify","others","errors","parseAlphanumeric","toUpperCase"],"mappings":"uHAAA,oBAYA,MAwDQA,EAAqB,CAACC,EAAOC,KACjCC,2BAAiBF,EAAOC,GACxB,IAAIE,EAASC,2BAAiBJ,GAC1BK,EAASF,EAAOG,MAAML,EAAKM,SAASC,iBAAmB,UAC3D,MAAO,CAAEL,EAAQE,IAgBfI,EAAsB,CAACT,EAAOC,KAAU,IAAD,IACzC,KAAG,OAACA,QAAD,IAACA,OAAD,EAACA,EAAMS,YAAY,OAAOC,EAAiBX,EAAOC,GACrDC,2BAAiBF,EAAOC,GAExB,IAAIE,EAASH,EAAMY,QAAQ,eAAgB,IAEvCC,EAAS,GACbC,OAAOC,KAAP,OAAYd,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,YAAYM,SAAQC,IACjCA,EAASC,SAASlB,EAAMmB,iBACzBN,EAAS,IAAIA,EAAQI,OAIzBJ,EAAOG,SAAQC,IACVA,IAAajB,EAAMmB,gBACpBN,EAAS,CAAEI,OAKf,IAAIZ,EAAUF,EAAOG,MAAP,OAAaL,QAAb,IAAaA,GAAb,UAAaA,EAAMM,gBAAnB,aAAa,EAAgBC,iBAAqC,IAAlBK,EAAOO,QAAiB,UACpD,IAAD,EAAX,KAAb,QAAN,EAAAP,SAAA,eAAQO,SAAgBpB,IACzBG,EAASU,GAAUA,EAAO,GAC1BQ,qBAAWpB,EAAKqB,IAAN,OAAWrB,QAAX,IAAWA,GAAX,UAAWA,EAAMS,WAAWG,EAAO,WAAnC,aAAW,EAA6BU,SAEpD,MAAO,CAAEpB,EAAQE,IAGbM,EAAmB,CAACX,EAAOC,IAExB,CAAED,EADMA,EAAMoB,OAAS,GAAK,WA0B/BI,EAAgB,IArBK,CACzBC,iBAAiBhB,EACjBiB,SAASjB,EACTkB,QAAQhB,EACRiB,KAAKnB,MAGmB,CACxBoB,MAxFY,CAAC7B,EAAOC,KACpBC,2BAAiBF,EAAOC,GACxB,IAAIE,EAAS2B,2BAAiB9B,GAE1BK,EAASF,EAAOG,MAAML,EAAKM,SAASC,iBAAmB,UAC3D,MAAO,CAAEL,EAAQE,IAoFjB0B,WAjFiB,CAAC/B,EAAOC,KACzBC,2BAAiBF,EAAOC,GAExB,IAAIE,EAASH,EAAMY,QAAQ,eAAgB,IAEvCC,EAASC,OAAOC,KAAP,OAAYd,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,YAAYsB,QAAOC,GAAeA,EAAYf,SAASlB,EAAMmB,iBAExFd,EAAUF,EAAOG,MAAML,EAAKM,SAASC,iBAAqC,IAAlBK,EAAOO,QAAiB,UACnD,IAAD,EAAX,IAAlBP,EAAOO,QAAgBpB,IACxBG,EAASU,GAAUA,EAAO,GAC1BQ,qBAAWpB,EAAKqB,IAAN,OAAWrB,QAAX,IAAWA,GAAX,UAAWA,EAAMS,WAAWG,EAAO,WAAnC,aAAW,EAA6BU,OAAQ,0BAG5D,MAAO,CAAEpB,EAAQE,QAuEQ,CACzB6B,YAAYzB,EACZ0B,QAAQ1B,EACR2B,KAAKrC,EACLsC,QAAQtC,EACRuC,SA/Ha,CAACtC,EAAOC,KAAU,IAAD,UAG9B,IAAIsC,GADa,UAAGtC,EAAKuC,aAAR,iBAAG,EAAYF,gBAAf,aAAG,EAAsBpB,SAAS,MACpBuB,yBAAc,UAACxC,EAAKuC,aAAN,aAAC,EAAYF,UAA9B,UAA0CrC,EAAKuC,aAA/C,aAA0C,EAAYF,SAC9EI,GAAY,cAAIC,KAAKJ,UAAT,eAAsBK,iBAAiB,IAAID,MAAOC,cAE9DC,GADc,IAAIF,MAAOC,cACLF,EACpBvC,EAASH,GAAgB,KACzBK,EAAWwC,GAAO,IAAMA,EAAM,KAAQ1C,GAAW,UAErD,MAAM2C,EAAWC,SAASC,cAAc,qBAClCC,EAAW,uBAAmBhD,EAAKqB,KAazC,MAZc,YAAXjB,GACD6C,YAAW,KAAKJ,EAASK,UAAUC,IAAI,kBAAkB,IACzDC,uBAAaJ,EAAahD,EAAKM,SAAS+C,kBAErCT,EAAM,IACPQ,uBAAaJ,EAAa,iDAAkD,SAE3EJ,EAAM,KACPQ,uBAAaJ,EAAa,mDAAiD,SAE7EC,YAAW,KAAKJ,EAASK,UAAUI,OAAO,kBAAkB,KAEvD,CAAEpD,EAAQE,IAwGjBmD,UAjEgB,CAACxD,EAAOC,KAAU,IAAD,MACjC,IAAIwD,EAAQC,KAAKC,MAAMD,KAAKE,UAAU3D,IACtC,MAAM,QAAEkC,GAAF,OAAcsB,QAAd,IAAcA,OAAd,EAAcA,EAAOjB,MACrBhC,EAA6B,cAAZ2B,EAA0BlC,EAAKM,SAASC,eAAe2B,GAAWlC,EAAKM,SAASC,eAAeqD,OACtHJ,EAAMlD,SAASuD,OAAqB,cAAZ3B,EAAA,OAA0BlC,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAMM,gBAAhC,aAA0B,EAAgBuD,OAAO3B,GAAjD,OAA4DlC,QAA5D,IAA4DA,GAA5D,UAA4DA,EAAMM,gBAAlE,iBAA4D,EAAgBuD,cAA5E,aAA4D,EAAwBD,OAC5G3D,2BAAiBF,EAAOyD,GACxB,IAAItD,EAAqB,cAAZgC,EAA0B4B,4BAAkB/D,GAAS8B,2BAAiB9B,GACnFG,EAASA,EAAO6D,cAChB,IAAI3D,EAASF,EAAOG,MAAME,IAAmB,UAC7C,MAAO,CAAEL,EAAQE,MAiENmB","file":"static/js/28.ddbc0b03.chunk.js","sourcesContent":["import {\n    parseOnlyLetters,\n    validateLabelMsg,\n    parseOnlyNumbers,\n    addItemTag,\n    writeOnLabel,\n    parseAlphanumeric,\n    formatMaskDate\n} from './utils'\n\n\n\nconst birthday = (value, data) => {\n\n    const isMaskInput = data.state?.birthday?.includes('/') \n    let parseBirth = isMaskInput ? formatMaskDate(data.state?.birthday) : data.state?.birthday\n    let birthYear = new Date(parseBirth)?.getFullYear() || new Date().getFullYear()\n    let currentYear = new Date().getFullYear()\n    let age = currentYear - birthYear \n    let _value = value ? value : null\n    let status = ((age >= 18 && age < 100) && _value) && 'success' \n  \n    const datePick = document.querySelector('[name=\"birthday\"]')\n    const targetLabel = `.label_text__${data.key}`\n    if(status === 'success'){\n      setTimeout(()=>{datePick.classList.add('date_success')}, 10)\n      writeOnLabel(targetLabel, data.settings.defaultMessage)\n    }else{\n      if(age < 18){\n        writeOnLabel(targetLabel, 'Debes de ser mayor de edad(+18) para continuar', 'error')\n      }\n      if(age > 100){\n        writeOnLabel(targetLabel, 'Has superado los lÃ­mites de longevidad humana', 'error')\n      }\n      setTimeout(()=>{datePick.classList.remove('date_success')}, 10)\n    }\n    return [ _value, status ]\n  }\n  \n  \n  \n   \n  const phone = (value, data) => {\n    validateLabelMsg(value, data)\n    let _value = parseOnlyNumbers(value)\n    // let status = (_value.match(data.settings.successPattern) && data.state['meta_phone']) && 'success'\n    let status = _value.match(data.settings.successPattern) && 'success';\n    return [ _value, status ]\n  }\n  \n  const meta_phone = (value, data) => {\n    validateLabelMsg(value, data)\n    //accepts only letters, spaces and underscore\n    let _value = value.replace(/[^a-zA-Z _]/g, '')\n    // Find and match the value with  select list key value\n    let result = Object.keys(data?.selectList).filter(countryItem => countryItem.includes(value.toLowerCase()))\n    // If it meets the pattern and matches 1 result from the entire list, the search was successful\n    let status = (_value.match(data.settings.successPattern) && result.length === 1) && 'success';\n    if(result.length === 1 && value){\n      _value = result && result[0]\n      addItemTag(data.key, data?.selectList[result[0]]?.uiName, \".prefixInputContainer\")\n    }\n    // console.log('||||||||||| metadata phone ==> ', value, data)\n    return [ _value, status ]\n  }\n  \n  \n  \n  const textInputValidator = (value, data) => {\n    validateLabelMsg(value, data)\n    let _value = parseOnlyLetters(value)\n    let status = _value.match(data.settings.successPattern) && 'success'\n    return [ _value, status ]\n  }\n  \n  const id_number = (value, data) => {\n    let _data = JSON.parse(JSON.stringify(data)) //deep object copy\n    const { id_type } = _data?.state\n    const successPattern = id_type === 'pasaporte' ? data.settings.successPattern[id_type] : data.settings.successPattern.others\n    _data.settings.errors = id_type === 'pasaporte' ? data?.settings?.errors[id_type] : data?.settings?.errors?.others\n    validateLabelMsg(value, _data)\n    let _value = id_type === 'pasaporte' ? parseAlphanumeric(value) : parseOnlyNumbers(value)\n    _value = _value.toUpperCase()\n    let status = _value.match(successPattern) && 'success'\n    return [ _value, status ]\n  }\n\n\nconst selectListValidator = (value, data) => {\n    if(!data?.selectList) return generalValidator(value, data);\n    validateLabelMsg(value, data)\n    //accepts only letters, spaces and underscore\n    let _value = value.replace(/[^a-zA-Z _]/g, '')\n  \n    let result = []\n    Object.keys(data?.selectList).forEach(itemList => {\n      if(itemList.includes(value.toLowerCase())){\n        result = [...result, itemList ]\n      }\n    })\n  \n    result.forEach(itemList => {\n      if(itemList === value.toLowerCase()){\n        result = [ itemList ]\n      }\n    })\n  \n    // If it meets the pattern and matches 1 result from the entire list, the search was successful\n    let status = (_value.match(data?.settings?.successPattern) && result.length === 1) && 'success';\n    if(result?.length === 1 && value){\n      _value = result && result[0]\n      addItemTag(data.key, data?.selectList[result[0]]?.uiName)\n    }\n    return [ _value, status ]\n  } \n  \n  const generalValidator = (value, data) => {\n    const status = value.length > 3 && 'success' \n    return [ value, status ]\n  }\n\n\n  const locationValidation = {\n    location_country:selectListValidator,\n    province:selectListValidator,\n    address:generalValidator,\n    city:selectListValidator\n  }\n\n  const contactValidation = {\n    phone,\n    meta_phone\n  }\n\n  const identityValidation = {\n    nationality:selectListValidator,\n    id_type:selectListValidator,\n    name:textInputValidator,\n    surname:textInputValidator,\n    birthday,\n    id_number\n  }\n\n  const kycValidation = {\n    ...locationValidation,\n    ...contactValidation,\n    ...identityValidation\n  }\n\nexport default kycValidation"],"sourceRoot":""}