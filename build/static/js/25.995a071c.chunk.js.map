{"version":3,"sources":["components/widgets/inputs/numberInput.js"],"names":["inputNumberFormat","value","parts","replace","removeCommas","split","join","NumberInput","props","inputRef","useRef","setValue","useState","caretPos","setCaretPos","handleChange","event","String","target","test","cursor","selectionEnd","newValue","onChange","setValueAndCaretPos","prevValue","cursorPos","rightCharsCount","length","toSetPosition","Math","max","useEffect","current","setSelectionRange","max_available","ref","onKeyDown","keyCode","key","preventDefault","currentValue","currentTarget","selectionStart","newPosition","includes"],"mappings":"uHAAA,kEAEA,MAIMA,EAAqBC,IACzB,MAAMC,EALcD,IACbA,EAAQA,EAAME,QAAQ,KAAM,IAAM,GAI3BC,CAAaH,GAAOI,MAAM,KAExC,OADAH,EAAM,GAAKA,EAAM,GAAGC,QAAQ,wBAAyB,KAC9CD,EAAMI,KAAK,MAGL,SAASC,EAAYC,GAClC,MAAMC,EAAWC,oBACVT,EAAOU,GAAYC,mBAASZ,EAAkBQ,EAAMP,QAAU,KAC9DY,EAAUC,GAAeF,mBAAS,CAAC,EAAG,IAEvCG,EAAgBC,IACpB,MAAMf,EAAQgB,OAAOD,EAAME,OAAOjB,OAElC,IADgB,kCAAkCkB,KAAKlB,GAErD,OAEF,MAAMmB,EAASJ,EAAME,OAAOG,cAAgB,EAE5C,IAAIC,EAAWrB,GAAS,GACxBqB,EAAWtB,EAAkBsB,GACzBd,EAAMe,UACRf,EAAMe,SAASP,GAGjBQ,EAAoBF,EAAUrB,EAAOmB,IAGjCI,EAAsB,CAACvB,EAAOwB,EAAWC,KAC7C,MAAMC,EAAkBF,EAAUG,OAASF,EACrCG,EAAgBC,KAAKC,IAAI9B,EAAM2B,OAASD,EAAiB,GAC/DhB,EAASV,GACTa,EAAY,CAACe,EAAeA,KAkC9B,OAbAG,qBAAU,KACJvB,EAASwB,SACXxB,EAASwB,QAAQC,qBAAqBrB,KAEvC,CAACA,IAEJmB,qBAAU,KACJxB,EAAMP,QAAUO,EAAM2B,eACxBpB,EAAa,CAAEG,OAAQ,CAAEjB,MAAOO,EAAMP,WAGvC,CAACO,EAAMP,QAGR,uBACEmC,IAAK3B,KACDD,EACJP,MAAOA,EACPsB,SAAUR,EACVsB,UArCoBrB,IACtB,GAAsB,MAAlBA,EAAMsB,SAAiC,UAAdtB,EAAMuB,IACjC,OAAOvB,EAAMwB,iBACf,GAAsB,IAAlBxB,EAAMsB,SAA+B,cAAdtB,EAAMuB,IAAqB,CACpD,MAAME,EAAezB,EAAM0B,cAAczC,MACnCmB,EAASJ,EAAM0B,cAAcC,gBAAkB,EAC/CC,EAAcd,KAAKC,IAAIX,EAAS,EAAG,GAGvCqB,EAAaG,IACbH,EAAaG,GAAaC,SAAS,OAEnCrB,EAAoBiB,EAAcA,EAAcG,GAChD5B,EAAMwB","file":"static/js/25.995a071c.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nconst removeCommas = (value) => {\n  return value ? value.replace(/,/g, \"\") : \"\";\n};\n\nconst inputNumberFormat = (value) => {\n  const parts = removeCommas(value).split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n};\n\nexport default function NumberInput(props) {\n  const inputRef = useRef();\n  const [value, setValue] = useState(inputNumberFormat(props.value) || \"\");\n  const [caretPos, setCaretPos] = useState([0, 0]);\n\n  const handleChange = (event) => {\n    const value = String(event.target.value);\n    const isValid = /^[\\d,]{0,30}([.])?([\\d]{1,8})?$/.test(value);\n    if (!isValid) {\n      return;\n    }\n    const cursor = event.target.selectionEnd || 0;\n\n    let newValue = value || \"\";\n    newValue = inputNumberFormat(newValue);\n    if (props.onChange) {\n      props.onChange(event);\n    }\n\n    setValueAndCaretPos(newValue, value, cursor);\n  };\n\n  const setValueAndCaretPos = (value, prevValue, cursorPos) => {\n    const rightCharsCount = prevValue.length - cursorPos;\n    const toSetPosition = Math.max(value.length - rightCharsCount, 0);\n    setValue(value);\n    setCaretPos([toSetPosition, toSetPosition]);\n  };\n\n  const keyDownHandler = (event) => {\n    if (event.keyCode === 188 || event.key === \"Comma\")\n      return event.preventDefault();\n    if (event.keyCode === 8 || event.key === \"Backspace\") {\n      const currentValue = event.currentTarget.value;\n      const cursor = event.currentTarget.selectionStart || 0;\n      const newPosition = Math.max(cursor - 1, 0);\n\n      if (\n        currentValue[newPosition] &&\n        currentValue[newPosition].includes(\",\")\n      ) {\n        setValueAndCaretPos(currentValue, currentValue, newPosition);\n        event.preventDefault();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.setSelectionRange(...caretPos);\n    }\n  }, [caretPos]);\n\n  useEffect(() => {\n    if (props.value === props.max_available) {\n      handleChange({ target: { value: props.value } });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.value]);\n\n  return (\n    <input\n      ref={inputRef}\n      {...props}\n      value={value}\n      onChange={handleChange}\n      onKeyDown={keyDownHandler}\n    />\n  );\n}\n"],"sourceRoot":""}