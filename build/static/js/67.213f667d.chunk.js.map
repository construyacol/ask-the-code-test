{"version":3,"sources":["components/withListCreator.js","components/widgets/accountList/account-list.js"],"names":["specialListCreatorSelector","createSelector","state","withdraw_accounts","wallets","_","isWithdrawView","withdrawAccounts","data","Object","keys","filter","key","currency_type","map","IconSwitch","loadable","AccountsNotFound","account_type","isMovilViewport","useViewport","className","id","size","icon","withListCreator","AsComponent","props","isWalletsView","actions","mainListLoader","items","label","coinsendaService","useCoinsendaServices","isVerified","setIsVerified","useState","setCurrentSelection","useNavigationKeyActions","loader","uniqueIdForElement","default","isDesktop","window","innerWidth","idForClickableElement","useKeyActionAsClick","availableCurrencies","useAvailableWalletCreator","console","log","useEffect","verified","getUserVerificationStatus","showValidationPrompt","confirmationModalToggle","confirmationModalPayload","title","description","txtPrimary","action","svg","callToValidate","isHugeContainer","isWithdrawListStyle","mainButtonText","isBottonAvailable","length","style","account","visible","number","focusedId","color","type","handleClick","verificationState","toggleModal","React","memo","useSelector","isLoading","ui","loaders","mainList","modelData","useActions","toProps"],"mappings":"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","file":"static/js/67.213f667d.chunk.js","sourcesContent":["import React from \"react\";\nimport { useActions } from \"../hooks/useActions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nconst specialListCreatorSelector = createSelector(\n  (state) => state.withdraw_accounts,\n  (state) => state.wallets,\n  (_, isWithdrawView) => isWithdrawView,\n  (withdrawAccounts, wallets, isWithdrawView) => {\n    const data = isWithdrawView ? withdrawAccounts : wallets;\n    return (\n      data &&\n      Object.keys(data)\n        .filter((key) => {\n          return !(isWithdrawView && data[key].currency_type === \"crypto\");\n        })\n        .map((key) => {\n          return data[key];\n        })\n    );\n  }\n);\n\nexport default function withListCreator(AsComponent) {\n  return React.memo(function (props) {\n    const loader = useSelector((state) => state.isLoading.loader);\n    const mainListLoader = useSelector((state) => state.ui.loaders.mainList);\n    const items = useSelector((state) =>\n      specialListCreatorSelector(state.modelData, props.isWithdrawView)\n    );\n    const actions = useActions();\n    const toProps = {\n      verificationState: true,\n      mainListLoader,\n      loader,\n    };\n\n    return (\n      <AsComponent {...toProps} actions={actions} items={items} {...props} />\n    );\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport loadable from \"@loadable/component\";\nimport SimpleLoader from \"../loaders\";\nimport ItemAccount from \"./item_account\";\nimport { AddNewItem } from \"../buttons/buttons\";\nimport PropTypes from \"prop-types\";\nimport { AccountListContainer } from \"./styles\";\nimport withListCreator from \"../../withListCreator\";\nimport { useCoinsendaServices } from \"../../../services/useCoinsendaServices\";\nimport useNavigationKeyActions from \"../../../hooks/useNavigationKeyActions\";\nimport useKeyActionAsClick from \"../../../hooks/useKeyActionAsClick\";\nimport useViewport from \"../../../hooks/useWindowSize\";\nimport useAvailableWalletCreator from \"../../hooks/useAvailableWalletCreator\";\nimport \"../../wallets/views/wallet_views.css\";\n\n\nconst IconSwitch = loadable(() => import(\"../icons/iconSwitch\"));\n\nfunction AccountList(props) {\n  const {\n    isWalletsView,\n    isWithdrawView,\n    actions,\n    mainListLoader,\n  } = props;\n  const items = props.items || [];\n  const label = `Obteniendo tus ${\n    isWalletsView ? \"Billeteras\" : \"Cuentas de retiro\"\n  }`;\n  const [coinsendaService] = useCoinsendaServices();\n  const [isVerified, setIsVerified] = useState(false);\n  const [setCurrentSelection] = useNavigationKeyActions({\n    items,\n    loader: mainListLoader,\n    uniqueIdForElement: \"accountItem\",\n    default: -1,\n  });\n  const isDesktop = window.innerWidth > 900;\n  // 97 keyCode for A\n  const idForClickableElement = useKeyActionAsClick(\n    true,\n    \"main-accounts-add-button\",\n    97\n  );\n\n  const [availableCurrencies] = useAvailableWalletCreator();\n\n  console.log('|||||||  availableCurrencies  => ', availableCurrencies)\n\n  useEffect(() => {\n    // actions.cleanCurrentSection()\n    const verified = coinsendaService.getUserVerificationStatus(\"level_1\");\n    setIsVerified(verified);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const createNewWallet = () => {\n    if (props.verificationState === \"confirmed\") {\n      return showValidationPrompt();\n    }\n\n    if (!isVerified) {\n      return callToValidate();\n    }\n    actions.toggleModal();\n  };\n\n  const showValidationPrompt = () => {\n    actions.confirmationModalToggle();\n    actions.confirmationModalPayload({\n      title: \"Estamos trabajando en esto...\",\n      description:\n        \"Hemos recibido satisfactoriamente tus datos de verificación, en breve podrás operar en coinsenda.\",\n      txtPrimary: \"Entendido\",\n      action: false,\n      svg: \"verified\",\n    });\n  };\n\n  // const goToVerification = async () => {\n  //   actions.confirmationModalToggle();\n  //   actions.confirmationModalPayload(null);\n  //   // const verificationState = props.verificationState;\n  //   //\n  //   // if (verificationState === \"confirmed\" || verificationState === \"pending\") {\n  //   //   await actions.ToStep(\"globalStep\", 2);\n  //   // }\n  //   //\n  //   // if (verificationState === \"rejected\") {\n  //   //   await actions.ToStep(\"globalStep\", 0);\n  //   // }\n  //   //\n  //   // await history.push(`/security`);\n  //   // setTimeout(() => {\n  //   //   actions.toggleModal();\n  //   // }, 0);\n  // };\n\n  const callToValidate = () => {\n    // const message = isWalletsView\n    //   ? \"billeteras crypto/fiat.\"\n    //   : \"cuentas de retiro fiat.\";\n\n    actions.confirmationModalToggle();\n    actions.confirmationModalPayload({\n      title: \"Estamos trabajando en esto...\",\n      description:\n        \"Hemos recibido satisfactoriamente tus datos de verificación, en breve podrás operar en coinsenda.\",\n      txtPrimary: \"Entendido\",\n      action: false,\n      svg: \"verified\",\n    });\n  };\n  const isHugeContainer = items > 10;\n  const styleForHugeContainer = {\n    // height: 'auto',\n  };\n  const isWithdrawListStyle = {\n    // marginBottom: '40px'\n  };\n\n  let mainButtonText = isWithdrawView\n    ? \"Añadir nueva cuenta de retiro\"\n    : \"Añadir nueva billetera\";\n  mainButtonText = isDesktop ? `${mainButtonText} [A]` : mainButtonText;\n\n  const isBottonAvailable = !isWalletsView ? true : (isWalletsView && availableCurrencies?.length) ? true : false\n  \n\n  return (\n    <>\n      {items && items.length > 0 ? (\n        <AccountListContainer\n          style={\n            isHugeContainer\n              ? { ...styleForHugeContainer, ...isWithdrawListStyle }\n              : isWithdrawListStyle\n          }\n          className=\"AccountListContainer\"\n        >\n          {items.map((account, id) => {\n            if (!account || !account.visible) {\n              return null;\n            }\n            return (\n              <ItemAccount\n                key={id}\n                setCurrentSelection={setCurrentSelection}\n                number={id}\n                focusedId={`accountItem${id}`}\n                account={account}\n                account_type={isWalletsView ? \"wallets\" : \"withdraw_accounts\"}\n                loader={props.loader}\n              />\n            );\n          })}\n        </AccountListContainer>\n      ) : props.loader ? (\n        <SimpleLoader color=\"blue\" label={label} />\n      ) : (\n        items.length < 1 &&\n        !props.loader && (\n          <AccountsNotFound\n            account_type={isWalletsView ? \"wallets\" : \"withdraw_accounts\"}\n          />\n        )\n      )}\n\n      {!props.loader && (\n        <AddNewItem\n          id={idForClickableElement}\n          label={mainButtonText}\n          type={`${isBottonAvailable ? \"primary\" : \"disabled\"}`}\n          handleClick={isBottonAvailable ? createNewWallet : null}\n        />\n      )}\n    </>\n  );\n}\n\nAccountList.propTypes = {\n  all_pairs: PropTypes.object,\n  isAppLoaded: PropTypes.bool,\n  currencies: PropTypes.array,\n  current_wallet: PropTypes.object,\n  items: PropTypes.array,\n  loader: PropTypes.bool,\n};\n\nconst AccountsNotFound = ({ account_type }) => {\n  const { isMovilViewport } = useViewport();\n\n  return (\n    <div className=\"withdraw_accounts_screen\">\n      <div className=\"withdraw_accounts_screen_cont\">\n        <p id=\"WalletList2\" className=\"fuente\">\n          {account_type === \"withdraw_accounts\"\n            ? \"Aún no tienes cuentas de retiro agregadas, añade y gestiona retiros en tu moneda local.\"\n            : \"Aún no tienes billeteras agregadas, añade y gestiona Billeteras de Bitcoin, Ethereum, etc... para que puedas hacer retiros y depositos\"}\n        </p>\n        <IconSwitch size={isMovilViewport ? 230 : 330} icon=\"newAccount\" />\n      </div>\n    </div>\n  );\n};\n\nexport default withListCreator(AccountList);\n"],"sourceRoot":""}