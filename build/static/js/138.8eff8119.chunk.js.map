{"version":3,"sources":["components/sockets/sockets.js"],"names":["SocketUrl","Environtment","SocketsComponent","Component","state","currentSwap","currentDeposit","currentWithdraw","isUpdated","withdraw_account_mangagement","async","this","props","withdraw_accounts","withdrawAccount","id","action","update_item_state","toastMessage","success_sound","withdraw_mangagement","withdraw","proof","withdraws","cWithdraw","coinsendaServices","getOrderById","get_withdraws","account_id","setState","sent","updateActivityState","addNotification","order_id","isModalActive","isRenderModalActive","socket_notify","toggleOtherModal","currency_type","sessionStorage","removeItem","funcDebounce","res","addUpdateWithdraw","isAppLoading","console","log","new_withdraw_model","addItemToState","manageBalance","amount","add_new_transaction_animation","history","push","new_withdraw","withdraw_account_id","withdraw_account","used_counter","inscribed","setTimeout","getWalletsByUser","deposit_mangagement","deposit","type_order","wallets","count","deposits","cDeposit","getDepositById","info","is_referral","activity_for_account","get_deposits","add_coin_sound","confirmations","walletAccount","currency","currencies","find","renderModal","exit_sound","swap_management","swap","new_swap","activeTrade","account_from","swaps","bought","ticket_rejected","spent","account_to","status","ticket_canceled","identity_management","includes","identity","file_state","updateUserStatus","init","prevProps","loggedIn","socket","io","user","userToken","getToken","tryReconnect","connected","connect","intervalID","setInterval","on","reason","clearInterval","body","access_token","emit","document","querySelector","classList","add","currentWithdrawAccount","render","withRouter","auth","modelData","ui","form","storage","otherModal","modal","formModal","isModalVisible","dispatch","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/138.8eff8119.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../actions\";\nimport io from \"socket.io-client\";\nimport Environtment from \"../../environment\";\nimport { withRouter } from \"react-router\";\nimport withCoinsendaServices from \"../withCoinsendaServices\";\nimport { getToken } from '../utils'\nimport { funcDebounce } from '../../utils'\n// import { objectToArray } from '../../services'\n// let statusCounter = 0\n\nconst { SocketUrl } = Environtment;\n\nclass SocketsComponent extends Component {\n  \n  state = {\n    currentSwap: null,\n    currentDeposit: null,\n    currentWithdraw: null,\n    isUpdated: false\n  };\n\n  // async testSocketExecuted(orderMock) {\n  //   console.log('======================================== ______ testSocketExecuted: ', orderMock)\n  //   if (orderMock.state === \"pending\" && orderMock.currency_type === \"crypto\") {\n  //     await this.setState({ currentDeposit: orderMock });\n  //   } else {\n  //     this.deposit_mangagement(orderMock);\n  //   }\n  // }\n\n  // async testSocket() {\n\n  //   // let identityMock = {\n  //   //   id:\"6184c8f067e372004414b156\",\n  //   //   file_state:\"accepted\"\n  //   // }\n\n  //   // setTimeout(()=>{\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //     // this.identity_management(identityMock)\n  //   // }, 3800)\n  //   // this.identity_management(identityMock)\n  //   // this.identity_management(identityMock)\n  //   // this.identity_management(identityMock)\n   \n\n  //   // let orderMock = {\n  //   //   id:\"6184c8f067e372004414b156\",\n  //   //   state:\"rejected\"\n  //   // }\n\n  //   // this.withdraw_mangagement(orderMock);\n  //   // this.testSocketExecuted()\n\n\n  //   // let confirmations = 1\n  //   // setInterval(()=>{\n  //   //   if(confirmations < 7){\n  //   //     orderMock = {\n  //   //       confirmations: confirmations,\n  //   //       id: \"617621370b0a1b0048ae9cae\"\n  //   //     }\n  //   //     this.testSocketExecuted(orderMock)\n  //   //     confirmations++\n  //   //   }\n  //   // }, 5000)\n\n  //   // let statusMock = {\n  //   //   countries:{\n  //   //     international: \"level_1\"\n  //   //   },\n  //   //   id: \"620403008a485b0067ed919b\",\n  //   //   updated_at: \"2022-02-09T18:09:28.614Z\",\n  //   //   userId: \"620402efbe929e0042d9de6c\"\n  //   // }\n\n  //   // for (let index = 0; index < 2; index++) {\n  //     // this.status_management(statusMock);\n  //   // }\n\n  // }\n\n//  componentDidMount(){\n//     this.testSocket()\n//  }\n\n async componentDidUpdate(prevProps) {\n\n\n    if (!this.state.isUpdated || this.props.loggedIn !== prevProps.loggedIn) {\n      this.setState({\n        isUpdated: true,\n      });\n      if (this.props.loggedIn) {\n        const socket = io(SocketUrl);\n        const { user } = this.props;\n        const { userToken } = await getToken()\n\n        let tryReconnect = () => {\n          if (socket.connected === false) {\n            socket.connect();\n          } \n        };\n\n        // setInterval(tryReconnect, 30000);\n        let intervalID = setInterval(tryReconnect, 30000);\n        socket.on(\"disconnect\", async function (reason) {\n          console.log(' ============ SOCKET discconect', reason)\n          intervalID = setInterval(tryReconnect, 2000);\n        });\n\n        socket.on(\"connect_error\", (reason) => {\n          console.log('|||||||||||||||||||||||||  connect_error ===>', reason)\n          setTimeout(() => {\n            socket.connect();\n          }, 1000);\n        });\n\n        socket.on(\"connect\", () => {\n          clearInterval(intervalID);\n          const body = { body: { access_token: userToken } };\n          // console.log('authentication userToken', userToken)\n          // debugger\n          socket.emit(\"authentication\", body);\n\n          socket.on(\"authenticated\", () => {\n            document.querySelector('#home-container')?.classList?.add('socket-authenticated')\n            socket.on(`/swap/${user.id}`, async (swap) => {\n              if (swap.state === \"pending\") {\n                await this.setState({ currentSwap: swap });\n              }\n              this.swap_management(swap);\n            });\n\n            // socket.on(`/biometric_data/${user.id}`, async (biometric) => {\n            //   console.log('biometric_data', biometric)\n            //   debugger\n            // });\n\n\n            socket.on(`/deposit/${user.id}`, async (deposit) => {\n              if (deposit.state === \"pending\" && deposit.currency_type === \"crypto\") {\n                await this.setState({ currentDeposit: deposit });\n              } else {\n                this.deposit_mangagement(deposit);\n              }\n            });\n\n\n            socket.on(`/withdraw/${user.id}`, async (withdraw) => {\n              console.log(withdraw)\n              if (withdraw.state === \"pending\") {\n                await this.setState({ currentWithdraw: withdraw });\n              }\n              this.withdraw_mangagement(withdraw);\n            });\n\n            socket.on(`/withdrawAccount/${user.id}`, async (withdrawAccount) => {\n              if (withdrawAccount.state === \"pending\") {\n                await this.setState({currentWithdrawAccount: withdrawAccount });\n              }\n              this.withdraw_account_mangagement(withdrawAccount);\n            });\n\n            socket.on(`/identity/${user.id}`, async (identity) => {\n              if(identity.file_state){\n                this.identity_management(identity)\n              }\n            });\n\n          });\n        });\n      }\n    }\n  }\n\n\n\n\n\n  withdraw_account_mangagement = async(withdrawAccount) => {\n\n\n      if(!this.props.withdraw_accounts[withdrawAccount.id]){return}\n\n      if(withdrawAccount.state === 'in_progress' || withdrawAccount.state === 'complete' || withdrawAccount.state === 'rejected'){\n        this.props.action.update_item_state({\n          [withdrawAccount.id]: {\n            ...this.props.withdraw_accounts[withdrawAccount.id],\n            ...withdrawAccount\n          }\n        }, \"withdraw_accounts\");\n\n        if(withdrawAccount.state === 'complete'){\n          this.props.toastMessage(\"Nueva cuenta de retiro inscrita\", \"success\");\n          this.props.action.success_sound();\n        }\n\n      }\n\n  } \n\n  withdraw_mangagement = async (withdraw) => {\n\n    if (withdraw.proof) {\n      if (\n        !this.props.withdraws ||\n        (this.props.withdraws && !this.props.withdraws[withdraw.id])\n      ) {\n        // Si no hay ordenes de retiro, ó si las hay, pero no está este retiro dentro de las ordenes disponibles en el estado\n        let cWithdraw = await this.props.coinsendaServices.getOrderById(\n          withdraw.id,\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.get_withdraws(cWithdraw.account_id);\n        // entonces consulte las ultimas ordenes de retiro de esta cuenta y actualiza el estado\n        await this.setState({ currentWithdraw: cWithdraw });\n      }\n      // Teniendo la orden de retiro en el estado, agrégue la prueba de pago y actualice el estado a: \"aceptado\" en el modelo de la orden de retiro\n      if (this.props.withdraws && this.props.withdraws[withdraw.id]) {\n        await this.props.action.update_item_state(\n          {\n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              proof: withdraw.proof,\n              sent: true,\n              state: \"accepted\",\n            },\n          },\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.withdraws[withdraw.id].account_id,\n            order_id: withdraw.id,\n          },\n          1\n        );\n        // this.props.coinsendaServices.showNotification('Retiro exitoso', 'Retiro enviado con éxito')\n        this.props.action.success_sound();\n        if (!this.props.isModalActive && !this.props.isRenderModalActive) {\n          await this.props.action.socket_notify(\n            this.props.withdraws[withdraw.id],\n            \"withdraws\"\n          );\n          this.props.action.toggleOtherModal();\n        }\n      }\n    }\n\n    if (withdraw.state === \"pending\" && withdraw.currency_type === \"crypto\") {\n      // Las ordenes de retiro cripto en estado pendiente se deben de confirmar vía api\n      sessionStorage.removeItem(`withdrawInProcessFrom${withdraw?.account_id}`)\n      funcDebounce(\n        {'storageCryptoWithdraw':`${withdraw.id}_${withdraw.state}`}, \n        async() => {\n          let res = await this.props.coinsendaServices.addUpdateWithdraw(\n            withdraw.id,\n            \"confirmed\"\n          );\n          this.props.action.isAppLoading(false);\n          if (!res) {\n            return this.props.toastMessage(\n              \"Error al confirmar la orden\",\n              \"error\"\n            );\n          }\n        },\n        false,\n        8000\n      );\n    }\n\n    const { currentWithdraw } = this.state;\n    console.log('||||||||||||||||||||||| withdraw socket console ::', withdraw, currentWithdraw)\n    // debugger\n    // console.log('|||||||||||||||||||||||||||||||||||  Withdraw SOCKET ==>', withdraw.state, ' == ', withdraw.id, ' ==> ', currentWithdraw)\n    if (\n      withdraw.state === \"confirmed\" &&\n      currentWithdraw.currency_type === \"crypto\"\n    ) {\n      // Añade esta orden de retiro crypto confirmado al estado\n      // actualiza la actividad de la cuenta a la que corresponde este retiro y actualiza el balance\n      let new_withdraw_model = {\n        id: currentWithdraw.id,\n        account_id: currentWithdraw.account_id,\n        ...currentWithdraw,\n        state: \"confirmed\",\n      };\n      await this.props.coinsendaServices.addItemToState(\n        \"withdraws\",\n        new_withdraw_model\n      );\n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw_model.account_id,\n        \"withdraws\"\n      );\n      await this.props.coinsendaServices.manageBalance(\n        new_withdraw_model.account_id,\n        \"reduce\",\n        new_withdraw_model.amount\n      );\n      await this.props.action.isAppLoading(false);\n      this.props.action.add_new_transaction_animation();\n      // this.props.coinsendaServices.getWalletsByUser(true)\n      this.props.history.push(\n        `/wallets/activity/${new_withdraw_model.account_id}/withdraws`\n      );\n    }\n\n    if (\n      withdraw.state === \"accepted\" &&\n      currentWithdraw.currency_type === \"fiat\"\n    ) {\n  \n      let new_withdraw = {...this.state.currentWithdraw};\n      await this.props.coinsendaServices.addItemToState(\"withdraws\", {\n        ...new_withdraw,\n        state: \"confirmed\",\n      }); \n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw.account_id,\n        \"withdraws\"\n      );\n      this.props.action.add_new_transaction_animation();\n      // alert('withdraw accepted')\n      //update used_counter of withdraw account relation\n\n      if (this.props.withdraw_accounts[currentWithdraw.withdraw_account_id]) {\n        let withdraw_account = this.props.withdraw_accounts[\n          currentWithdraw.withdraw_account_id\n        ];\n        //actualiza el movimiento operacional de la cuenta de retiro\n        this.props.action.update_item_state(\n          {\n            [currentWithdraw.withdraw_account_id]: {\n              ...withdraw_account,\n              used_counter: ++withdraw_account.used_counter,\n              inscribed: true,\n            },\n          },\n          \"withdraw_accounts\"\n        );\n      }\n\n      this.props.history.push(`/wallets/activity/${new_withdraw.account_id}/withdraws`);\n    }\n\n\n    if (withdraw.state === \"rejected\" || withdraw.state === \"canceled\") {\n      \n      // await this.props.coinsendaServices.get_withdraws(this.props.withdraws[withdraw.id].account_id)\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          { \n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              state: withdraw.state,\n            },\n          },\n          \"withdraws\"\n        );\n\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n\n        await this.props.coinsendaServices.getWalletsByUser(true)\n\n      }, 500);\n\n      // this.props.action.exit_sound();\n      let state = withdraw.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Retiro ${state}`, \"error\");\n    }\n\n    // if(withdraw.metadata && !withdraw.state){\n    //   // alert('withdraw socket')\n    //\n    //     const { userId } = withdraw\n    //     let fiat_accounts = await this.props.coinsendaServices.getFiatAccountByUserId()\n    //     if(!fiat_accounts){return false}\n    //\n    //     for (let i = 0; i < fiat_accounts.length; i++) {\n    //       if(fiat_accounts[i].currency.currency !== 'usd'){\n    //         const { activity_for_account } = this.props\n    //         if(activity_for_account[fiat_accounts[i].id] && activity_for_account[fiat_accounts[i].id].withdraws){return false}\n    //         await this.props.coisendaServices.get_withdraws(fiat_accounts[i].id)\n    //       }\n    //     }\n    //     this.props.toastMessage('Retiro(s) ha(n) sido enviado(s) a tu cuenta bancaria.', 'success')\n    //     this.props.action.success_sound()\n    //\n    // }\n  };\n\n  deposit_mangagement = async (deposit) => {\n\n    console.log('|||||||||||||||||||||||||||| |  DEPOSIT_MANAGEMENT   ==> ', deposit)\n    // debugger\n\n    if (deposit.state === \"pending\" && deposit.currency_type === \"fiat\") {\n      await this.props.coinsendaServices.addItemToState(\"deposits\", {\n        ...deposit,\n        type_order: \"deposit\",\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        deposit.account_id,\n        \"deposits\"\n      );\n\n      this.props.action.update_item_state(\n        {\n          [deposit.account_id]: {\n            ...this.props.wallets[deposit.account_id],\n            count: 1,\n          },\n        },\n        \"wallets\"\n      );\n    }\n\n    // if(deposit.state === 'confirmed' && && this.state.currentDeposit.currency_type === 'crypto')){\n    if (deposit.state === \"confirmed\") {\n      // console.log('||||||| SOCKET RESPONSE  ===>', deposit)\n      sessionStorage.removeItem(`depositOrder_${deposit?.id}`)\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n        // si el deposito no está en el estado, es porque es de tipo cripto...\n        let cDeposit = await this.props.coinsendaServices.getDepositById(deposit.id);\n        console.log('|||||||| _______________________________________DEPOSIT cDeposit', cDeposit)\n        if(cDeposit?.info?.is_referral) return;\n\n        if (this.props.activity_for_account[cDeposit.account_id] && this.props.activity_for_account[cDeposit.account_id].deposits) {\n          await this.props.coinsendaServices.addItemToState(\"deposits\", {\n            ...cDeposit,\n            type_order: \"deposit\",\n          });\n          await this.props.coinsendaServices.updateActivityState(cDeposit.account_id, \"deposits\");\n        } else {\n          await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        }\n        this.props.action.update_item_state(\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); //actualiza el movimiento operacional de la wallet\n        this.props.action.addNotification(\"wallets\", { account_id: cDeposit.account_id, order_id: cDeposit.id }, 1);\n        // this.props.coinsendaServices.showNotification('Deposito Cripto', 'Nuevo deposito detectado')\n        await this.props.action.socket_notify(\n          { ...cDeposit, state: \"confirmed\" },\n          \"deposits\",\n          \"Nuevo depósito detectado\"\n        );\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n  \n\n    if (deposit.confirmations) {\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n        let cDeposit = await this.props.coinsendaServices.getOrderById(deposit.id, \"deposits\");\n        await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        // console.log('=============> DEPOSIT SOCKET ', cDeposit)\n      }\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n\n        const walletAccount = this.props.wallets[this?.props?.deposits[deposit.id]?.account_id];\n        const currency = await this.props.currencies?.find(currency => currency?.currency === walletAccount?.currency?.currency)\n        console.log('Finding  ==> ', currency, deposit.confirmations > (currency?.confirmations || 6))\n\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              confirmations: deposit.confirmations,\n              state:deposit.confirmations > (currency?.confirmations || 6) ? 'accepted' : 'confirmed'\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(this.props.deposits[deposit.id].account_id, \"deposits\");\n      }\n      return;\n    }\n\n\n\n\n\n    if (deposit.state === \"accepted\") {\n      let cDeposit = await this.props.coinsendaServices.getOrderById(\n        deposit.id,\n        \"deposits\"\n      );\n\n        if (cDeposit?.info?.is_referral && this.props.activity_for_account[cDeposit.account_id] && this.props.activity_for_account[cDeposit.account_id].deposits) {\n          await this.props.coinsendaServices.addItemToState(\"deposits\", {\n            ...cDeposit,\n            type_order: \"deposit\",\n          });\n        } else if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n          await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        }\n\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n\n        this.props.action.update_item_state(\n          //actualiza el movimiento operacional de la wallet\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); \n        \n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.deposits[deposit.id].account_id,\n            order_id: deposit.id,\n          },\n          1\n        );\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        await this.props.action.socket_notify(\n          this.props.deposits[deposit.id],\n          \"deposits\"\n        );\n        await this.props.action.renderModal(null);\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        // this.props.coinsendaServices.showNotification('Deposito aceptado', 'Tu deposito ha sido aceptado exitosamente')\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n\n\n\n\n\n\n\n    if (deposit.state === \"rejected\" || deposit.state === \"canceled\") {\n      if (this.props.deposits[deposit.id].state === \"canceled\") {\n        return false;\n      }\n      // setTimeout(async()=>{\n      // Tiempo para que transcurra la animación del item\n\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true)\n        // await this.props.action.update_pending_activity(this.props.deposits[deposit.id].account_id, 'deposits')\n      }, 500);\n      this.props.action.exit_sound();\n      let state = deposit.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Depósito ${state}`, \"error\");\n      // }, 2000)\n    }\n\n    if (deposit.state === \"confirmed\") {\n      // console.log('deposito confirmado fiat')\n      // this.props.coinsendaServices.showNotification('Deposito fiat', 'Su deposito ha sido confirmado con éxito')\n      if (\n        this.props.deposits &&\n        this.props.deposits[deposit.id] &&\n        this.props.deposits[deposit.id].currency_type === \"fiat\"\n      ) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        // this.props.history.push('?form=deposit_confirmed_success')\n        this.props.action.isAppLoading(false);\n        this.props.action.success_sound();\n        this.props.toastMessage(\"Depósito confirmado con exito\", \"success\");\n      }\n    }\n  };\n\n\n\n\n\n\n\n  swap_management = async (swap) => {\n    // console.log('||||||||||||||||||||||||||||| ===========> SOCKET SWAP => ', swap.state, '  ==>  ', swap)\n    // debugger\n\n\n    if (swap.state === \"pending\") {\n      // await this.props.action.current_section_params({ active_trade_operation: true })\n      // el bought lo retorna el socket en el estado aceptado\n      let new_swap = swap;\n      await this.props.coinsendaServices.addItemToState(\"swaps\", {\n        ...new_swap,\n        state: \"pending\",\n        activeTrade: true,\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        new_swap.account_from,\n        \"swaps\"\n      );\n      this.props.action.isAppLoading(false);\n      await this.props.history.push(`/wallets/activity/${new_swap.account_from}/swaps`);\n      this.props.action.add_new_transaction_animation();\n    }\n\n\n    if(swap.state === 'rejected' || swap.state === 'canceled'){\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [this.state.currentSwap.id]: {\n              ...this.props.swaps[this.state.currentSwap.id],\n              state: swap.state,\n              bought: swap.bought,\n              activeTrade: false\n            },\n          },\n          \"swaps\"\n        );\n        this.props.coinsendaServices.updateActivityState(this.state.currentSwap.account_from, \"swaps\");\n        this.props.action.ticket_rejected();\n        return this.props.toastMessage(\"El intercambio no se pudo realizar, contacta con soporte\", \"error\");\n      }, 2500);\n\n    }\n\n\n\n\n    if (swap.state === \"accepted\" && this.state.currentSwap.state !== \"done\") {\n      const { currentSwap } = this.state;\n\n      await this.setState({ currentSwap: { ...currentSwap, state: \"done\" } });\n      setTimeout(async () => {\n        await this.props.action.success_sound();\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"confirmed\",\n              bought: swap.bought,\n            },\n          },\n          \"swaps\"\n        );\n      }, 2500);\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"accepted\",\n            },\n          },\n          \"swaps\"\n        );\n        await this.props.action.success_sound();\n        setTimeout(async () => {\n          await this.props.action.update_item_state(\n            {\n              [currentSwap.id]: {\n                ...this.props.swaps[currentSwap.id],\n                activeTrade: false,\n              },\n            },\n            \"swaps\"\n          );\n          await this.props.coinsendaServices.manageBalance(\n            currentSwap.account_from,\n            \"reduce\",\n            currentSwap.spent\n          );\n          await this.props.action.add_coin_sound();\n          await this.props.toastMessage(\n            \"Nuevo intercambio realizado\",\n            \"success\"\n          );\n          this.props.coinsendaServices.updateActivityState(currentSwap.account_from, \"swaps\");\n          this.props.coinsendaServices.updateActivityState(currentSwap.account_to, \"swaps\");\n        }, 2000);\n      }, 5500);\n\n      // add the acredited order into account to\n      if (this.props.wallets[currentSwap.account_to]) {\n        const { wallets } = this.props;\n        this.props.coinsendaServices.updateActivityState(\n          currentSwap.account_to,\n          \"swaps\"\n        );\n        this.props.action.update_item_state(\n          {\n            [currentSwap.account_to]: {\n              ...wallets[currentSwap.account_to],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        );\n      }\n    }\n\n\n\n    if (swap.status === \"error\") {\n      this.props.toastMessage(\n        \"El intercambio no se pudo realizar, contacta con soporte\",\n        \"error\"\n      );\n      this.props.action.ticket_canceled();\n      // this.props.action.current_section_params({swap_socket_channel:this.state.currentSwap})\n    }\n  };\n\n  \n\n  identity_management = async(identity) => {\n    if([\"accepted\"].includes(identity.file_state)){\n      funcDebounce(  \n        {[`identity_${identity.id}`]:`${identity.file_state}_${identity.id}`}, \n        async() => {\n          await this.props.coinsendaServices.updateUserStatus(identity)\n          this.props.coinsendaServices.init()\n          this.props.history.push(`/wallets`);\n        },\n        false,\n        5000\n      );\n    }else{\n      funcDebounce( \n        {[`identity_${identity.id}`]:`${identity.id}`}, \n        async() => {\n          await this.props.coinsendaServices.updateUserStatus(identity)\n        },\n        false,\n        3000\n      );\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\n\n\n\nconst mapStateToProps = (state, props) => {\n  // console.log('||||||||||||||||||||||||||||||||||||||||||||| ======>>> props Sockets ==> ', props)\n\n  const { loggedIn } = state.auth;\n  const {\n    user,\n    deposits,\n    withdraws,\n    wallets,\n    withdraw_accounts,\n    swaps,\n    currencies\n  } = state.modelData;\n  const { ui, form } = state;\n\n  return {\n    loggedIn,\n    user: user,\n    deposits,\n    withdraws,\n    activity_for_account: state.storage.activity_for_account,\n    wallets,\n    swaps,\n    withdraw_accounts,\n    isModalActive: ui.otherModal,\n    isRenderModalActive: ui.modal.render,\n    formModal:form.isModalVisible,\n    currencies\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withCoinsendaServices(SocketsComponent))\n);\n"],"sourceRoot":""}