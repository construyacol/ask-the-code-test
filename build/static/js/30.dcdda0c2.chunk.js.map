{"version":3,"sources":["components/forms/widgets/personalKycComponent/validations.js"],"names":["selectListValidator","value","data","validateLabelMsg","_value","replace","result","Object","keys","selectList","filter","itemList","includes","toLowerCase","status","match","settings","successPattern","length","addItemTag","key","uiName","textInputValidator","parseOnlyLetters","personalKycValidation","country","name","phone","parseOnlyNumbers","state","meta_phone","countryItem","birthday","parseBirth","formatMaskDate","birthYear","Date","getFullYear","age","datePick","document","querySelector","targetLabel","setTimeout","classList","add","writeOnLabel","defaultMessage","remove","address","city","id_number","_data","JSON","parse","stringify","id_type","others","errors","parseAlphanumeric","toUpperCase","nationality","surname"],"mappings":"uHACE,oBAYF,MAqDMA,EAAsB,CAACC,EAAOC,KAAU,IAAD,EAE3CC,2BAAiBF,EAAOC,GAExB,IAAIE,EAASH,EAAMI,QAAQ,eAAgB,IAEvCC,EAASC,OAAOC,KAAP,OAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAMO,YAAYC,QAAOC,GAAYA,EAASC,SAASX,EAAMY,iBAGlFC,EAAUV,EAAOW,MAAP,OAAab,QAAb,IAAaA,GAAb,UAAaA,EAAMc,gBAAnB,aAAa,EAAgBC,iBAAqC,IAAlBX,EAAOY,QAAiB,UACpD,IAAD,EAAX,KAAb,OAANZ,QAAM,IAANA,OAAA,EAAAA,EAAQY,SAAgBjB,IACzBG,EAASE,GAAUA,EAAO,GAC1Ba,qBAAWjB,EAAKkB,IAAN,OAAWlB,QAAX,IAAWA,GAAX,UAAWA,EAAMO,WAAWH,EAAO,WAAnC,aAAW,EAA6Be,SAEpD,MAAO,CAAEjB,EAAQU,IAGbQ,EAAqB,CAACrB,EAAOC,KACjCC,2BAAiBF,EAAOC,GACxB,IAAIE,EAASmB,2BAAiBtB,GAC1Ba,EAASV,EAAOW,MAAMb,EAAKc,SAASC,iBAAmB,UAC3D,MAAO,CAAEb,EAAQU,IAoBbU,EAAwB,CAC1BC,QAAQzB,EACR0B,KAAKJ,EACLK,MAnEU,CAAC1B,EAAOC,KACpBC,2BAAiBF,EAAOC,GACxB,IAAIE,EAASwB,2BAAiB3B,GAC1Ba,EAAUV,EAAOW,MAAMb,EAAKc,SAASC,iBAAmBf,EAAK2B,MAAL,YAA6B,UACzF,MAAO,CAAEzB,EAAQU,IAgEfgB,WA7De,CAAC7B,EAAOC,KACzBC,2BAAiBF,EAAOC,GAExB,IAAIE,EAASH,EAAMI,QAAQ,eAAgB,IAEvCC,EAASC,OAAOC,KAAP,OAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAMO,YAAYC,QAAOqB,GAAeA,EAAYnB,SAASX,EAAMY,iBAExFC,EAAUV,EAAOW,MAAMb,EAAKc,SAASC,iBAAqC,IAAlBX,EAAOY,QAAiB,UACnD,IAAD,EAAX,IAAlBZ,EAAOY,QAAgBjB,IACxBG,EAASE,GAAUA,EAAO,GAC1Ba,qBAAWjB,EAAKkB,IAAN,OAAWlB,QAAX,IAAWA,GAAX,UAAWA,EAAMO,WAAWH,EAAO,WAAnC,aAAW,EAA6Be,OAAQ,0BAG5D,MAAO,CAAEjB,EAAQU,IAiDfkB,SAnGa,CAAC/B,EAAOC,KAAU,IAAD,UAGhC,IAAI+B,GADa,UAAG/B,EAAK2B,aAAR,iBAAG,EAAYG,gBAAf,aAAG,EAAsBpB,SAAS,MACpBsB,yBAAc,UAAChC,EAAK2B,aAAN,aAAC,EAAYG,UAA9B,UAA0C9B,EAAK2B,aAA/C,aAA0C,EAAYG,SAC9EG,GAAY,cAAIC,KAAKH,UAAT,eAAsBI,iBAAiB,IAAID,MAAOC,cAE9DC,GADc,IAAIF,MAAOC,cACLF,EACpB/B,EAASH,GAAgB,KACzBa,EAAWwB,GAAO,IAAMA,EAAM,KAAQlC,GAAW,UAErD,MAAMmC,EAAWC,SAASC,cAAc,qBAClCC,EAAW,uBAAmBxC,EAAKkB,KAazC,MAZc,YAAXN,GACD6B,YAAW,KAAKJ,EAASK,UAAUC,IAAI,kBAAkB,IACzDC,uBAAaJ,EAAaxC,EAAKc,SAAS+B,kBAErCT,EAAM,IACPQ,uBAAaJ,EAAa,iDAAkD,SAE3EJ,EAAM,KACPQ,uBAAaJ,EAAa,mDAAiD,SAE7EC,YAAW,KAAKJ,EAASK,UAAUI,OAAO,kBAAkB,KAEvD,CAAE5C,EAAQU,IA4EfmC,QAXqB,CAAChD,EAAOC,IAExB,CAAED,EADMA,EAAMiB,OAAS,GAAK,WAWjCgC,KAAK5B,EACL6B,UAzBc,CAAClD,EAAOC,KAAU,IAAD,MACjC,IAAIkD,EAAQC,KAAKC,MAAMD,KAAKE,UAAUrD,IACtC,MAAM,QAAEsD,GAAF,OAAcJ,QAAd,IAAcA,OAAd,EAAcA,EAAOvB,MACrBZ,EAA6B,cAAZuC,EAA0BtD,EAAKc,SAASC,eAAeuC,GAAWtD,EAAKc,SAASC,eAAewC,OACtHL,EAAMpC,SAAS0C,OAAqB,cAAZF,EAAA,OAA0BtD,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAMc,gBAAhC,aAA0B,EAAgB0C,OAAOF,GAAjD,OAA4DtD,QAA5D,IAA4DA,GAA5D,UAA4DA,EAAMc,gBAAlE,iBAA4D,EAAgB0C,cAA5E,aAA4D,EAAwBD,OAC5GtD,2BAAiBF,EAAOmD,GACxB,IAAIhD,EAAqB,cAAZoD,EAA0BG,4BAAkB1D,GAAS2B,2BAAiB3B,GACnFG,EAASA,EAAOwD,cAChB,IAAI9C,EAASV,EAAOW,MAAME,IAAmB,UAC7C,MAAO,CAAEb,EAAQU,IAiBf0C,QAAQxD,EACR6D,YAAY7D,EACZ8D,QAAQxC,GAGGE","file":"static/js/30.dcdda0c2.chunk.js","sourcesContent":["\n  import {\n    parseOnlyLetters,\n    validateLabelMsg,\n    parseOnlyNumbers,\n    addItemTag,\n    writeOnLabel,\n    parseAlphanumeric,\n    formatMaskDate\n  } from './utils'\n  \n\n\nconst birthday = (value, data) => {\n\n  const isMaskInput = data.state?.birthday?.includes('/') \n  let parseBirth = isMaskInput ? formatMaskDate(data.state?.birthday) : data.state?.birthday\n  let birthYear = new Date(parseBirth)?.getFullYear() || new Date().getFullYear()\n  let currentYear = new Date().getFullYear()\n  let age = currentYear - birthYear \n  let _value = value ? value : null\n  let status = ((age >= 18 && age < 100) && _value) && 'success' \n\n  const datePick = document.querySelector('[name=\"birthday\"]')\n  const targetLabel = `.label_text__${data.key}`\n  if(status === 'success'){\n    setTimeout(()=>{datePick.classList.add('date_success')}, 10)\n    writeOnLabel(targetLabel, data.settings.defaultMessage)\n  }else{\n    if(age < 18){\n      writeOnLabel(targetLabel, 'Debes de ser mayor de edad(+18) para continuar', 'error')\n    }\n    if(age > 100){\n      writeOnLabel(targetLabel, 'Has superado los lÃ­mites de longevidad humana', 'error')\n    }\n    setTimeout(()=>{datePick.classList.remove('date_success')}, 10)\n  }\n  return [ _value, status ]\n}\n\n\n\n \nconst phone = (value, data) => {\n  validateLabelMsg(value, data)\n  let _value = parseOnlyNumbers(value)\n  let status = (_value.match(data.settings.successPattern) && data.state['meta_phone']) && 'success'\n  return [ _value, status ]\n}\n\nconst meta_phone = (value, data) => {\n  validateLabelMsg(value, data)\n  //accepts only letters, spaces and underscore\n  let _value = value.replace(/[^a-zA-Z _]/g, '')\n  // Find and match the value with  select list key value\n  let result = Object.keys(data?.selectList).filter(countryItem => countryItem.includes(value.toLowerCase()))\n  // If it meets the pattern and matches 1 result from the entire list, the search was successful\n  let status = (_value.match(data.settings.successPattern) && result.length === 1) && 'success';\n  if(result.length === 1 && value){\n    _value = result && result[0]\n    addItemTag(data.key, data?.selectList[result[0]]?.uiName, \".prefixInputContainer\")\n  }\n  // console.log('||||||||||| metadata phone ==> ', value, data)\n  return [ _value, status ]\n}\n\nconst selectListValidator = (value, data) => {\n\n  validateLabelMsg(value, data)\n  //accepts only letters, spaces and underscore\n  let _value = value.replace(/[^a-zA-Z _]/g, '')\n  // Find and match the value with  select list key value\n  let result = Object.keys(data?.selectList).filter(itemList => itemList.includes(value.toLowerCase()))\n  // console.log('|||||||||||||  VALIDATOR result ', result)\n  // If it meets the pattern and matches 1 result from the entire list, the search was successful\n  let status = (_value.match(data?.settings?.successPattern) && result.length === 1) && 'success';\n  if(result?.length === 1 && value){\n    _value = result && result[0]\n    addItemTag(data.key, data?.selectList[result[0]]?.uiName)\n  }\n  return [ _value, status ]\n} \n\nconst textInputValidator = (value, data) => {\n  validateLabelMsg(value, data)\n  let _value = parseOnlyLetters(value)\n  let status = _value.match(data.settings.successPattern) && 'success'\n  return [ _value, status ]\n}\n\nconst id_number = (value, data) => {\n  let _data = JSON.parse(JSON.stringify(data)) //deep object copy\n  const { id_type } = _data?.state\n  const successPattern = id_type === 'pasaporte' ? data.settings.successPattern[id_type] : data.settings.successPattern.others\n  _data.settings.errors = id_type === 'pasaporte' ? data?.settings?.errors[id_type] : data?.settings?.errors?.others\n  validateLabelMsg(value, _data)\n  let _value = id_type === 'pasaporte' ? parseAlphanumeric(value) : parseOnlyNumbers(value)\n  _value = _value.toUpperCase()\n  let status = _value.match(successPattern) && 'success'\n  return [ _value, status ]\n}\n\nconst generalValidator = (value, data) => {\n  const status = value.length > 3 && 'success' \n  return [ value, status ]\n}\n\nconst personalKycValidation = {\n    country:selectListValidator,\n    name:textInputValidator,\n    phone,\n    meta_phone,\n    birthday,\n    address:generalValidator,\n    city:textInputValidator,\n    id_number,\n    id_type:selectListValidator,\n    nationality:selectListValidator,\n    surname:textInputValidator\n}\n\nexport default personalKycValidation"],"sourceRoot":""}