{"version":3,"sources":["components/widgets/inputs/numberInput.js"],"names":["inputNumberFormat","value","parts","replace","removeCommas","split","join","NumberInput","props","inputRef","useRef","_useState","useState","_useState2","Object","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setValue","_useState3","_useState4","caretPos","setCaretPos","handleChange","event","String","target","test","cursor","selectionEnd","newValue","onChange","setValueAndCaretPos","prevValue","cursorPos","rightCharsCount","length","toSetPosition","Math","max","useEffect","_inputRef$current","current","setSelectionRange","apply","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","max_available","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","assign","ref","onKeyDown","keyCode","key","preventDefault","currentValue","currentTarget","selectionStart","newPosition","includes"],"mappings":"4KAMMA,EAAoB,SAACC,GACzB,IAAMC,EALa,SAACD,GACpB,OAAOA,EAAQA,EAAME,QAAQ,KAAM,IAAM,GAI3BC,CAAaH,GAAOI,MAAM,KAExC,OADAH,EAAM,GAAKA,EAAM,GAAGC,QAAQ,wBAAyB,KAC9CD,EAAMI,KAAK,MAGL,SAASC,EAAYC,GAClC,IAAMC,EAAWC,mBADwBC,EAEfC,mBAASZ,EAAkBQ,EAAMP,QAAU,IAF5BY,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAElCV,EAFkCY,EAAA,GAE3BG,EAF2BH,EAAA,GAAAI,EAGTL,mBAAS,CAAC,EAAG,IAHJM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGlCE,EAHkCD,EAAA,GAGxBE,EAHwBF,EAAA,GAKnCG,EAAe,SAACC,GACpB,IAAMrB,EAAQsB,OAAOD,EAAME,OAAOvB,OAElC,GADgB,kCAAkCwB,KAAKxB,GACvD,CAGA,IAAMyB,EAASJ,EAAME,OAAOG,cAAgB,EAExCC,EAAW3B,GAAS,GACxB2B,EAAW5B,EAAkB4B,GACzBpB,EAAMqB,UACRrB,EAAMqB,SAASP,GAGjBQ,EAAoBF,EAAU3B,EAAOyB,KAGjCI,EAAsB,SAAC7B,EAAO8B,EAAWC,GAC7C,IAAMC,EAAkBF,EAAUG,OAASF,EACrCG,EAAgBC,KAAKC,IAAIpC,EAAMiC,OAASD,EAAiB,GAC/DjB,EAASf,GACTmB,EAAY,CAACe,EAAeA,KAiC9B,OAZAG,oBAAU,WACc,IAAAC,EAAlB9B,EAAS+B,UACXD,EAAA9B,EAAS+B,SAAQC,kBAAjBC,MAAAH,EAAAzB,OAAA6B,EAAA,EAAA7B,CAAsCK,KAEvC,CAACA,IAEJmB,oBAAU,WACJ9B,EAAMP,QAAUO,EAAMoC,eACxBvB,EAAa,CAAEG,OAAQ,CAAEvB,MAAOO,EAAMP,UAEvC,CAACO,EAAMP,QAGR4C,EAAAC,EAAAC,cAAA,QAAAjC,OAAAkC,OAAA,CACEC,IAAKxC,GACDD,EAFN,CAGEP,MAAOA,EACP4B,SAAUR,EACV6B,UApCmB,SAAC5B,GACtB,GAAsB,MAAlBA,EAAM6B,SAAiC,UAAd7B,EAAM8B,IACjC,OAAO9B,EAAM+B,iBACf,GAAsB,IAAlB/B,EAAM6B,SAA+B,cAAd7B,EAAM8B,IAAqB,CACpD,IAAME,EAAehC,EAAMiC,cAActD,MACnCyB,EAASJ,EAAMiC,cAAcC,gBAAkB,EAC/CC,EAAcrB,KAAKC,IAAIX,EAAS,EAAG,GAGvC4B,EAAaG,IACbH,EAAaG,GAAaC,SAAS,OAEnC5B,EAAoBwB,EAAcA,EAAcG,GAChDnC,EAAM+B","file":"static/js/12.aa5f7714.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nconst removeCommas = (value) => {\n  return value ? value.replace(/,/g, \"\") : \"\";\n};\n\nconst inputNumberFormat = (value) => {\n  const parts = removeCommas(value).split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n};\n\nexport default function NumberInput(props) {\n  const inputRef = useRef();\n  const [value, setValue] = useState(inputNumberFormat(props.value) || \"\");\n  const [caretPos, setCaretPos] = useState([0, 0]);\n\n  const handleChange = (event) => {\n    const value = String(event.target.value);\n    const isValid = /^[\\d,]{0,30}([.])?([\\d]{1,8})?$/.test(value);\n    if (!isValid) {\n      return;\n    }\n    const cursor = event.target.selectionEnd || 0;\n\n    let newValue = value || \"\";\n    newValue = inputNumberFormat(newValue);\n    if (props.onChange) {\n      props.onChange(event);\n    }\n\n    setValueAndCaretPos(newValue, value, cursor);\n  };\n\n  const setValueAndCaretPos = (value, prevValue, cursorPos) => {\n    const rightCharsCount = prevValue.length - cursorPos;\n    const toSetPosition = Math.max(value.length - rightCharsCount, 0);\n    setValue(value);\n    setCaretPos([toSetPosition, toSetPosition]);\n  };\n\n  const keyDownHandler = (event) => {\n    if (event.keyCode === 188 || event.key === \"Comma\")\n      return event.preventDefault();\n    if (event.keyCode === 8 || event.key === \"Backspace\") {\n      const currentValue = event.currentTarget.value;\n      const cursor = event.currentTarget.selectionStart || 0;\n      const newPosition = Math.max(cursor - 1, 0);\n\n      if (\n        currentValue[newPosition] &&\n        currentValue[newPosition].includes(\",\")\n      ) {\n        setValueAndCaretPos(currentValue, currentValue, newPosition);\n        event.preventDefault();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.setSelectionRange(...caretPos);\n    }\n  }, [caretPos]);\n\n  useEffect(() => {\n    if (props.value === props.max_available) {\n      handleChange({ target: { value: props.value } });\n    }\n  }, [props.value]);\n\n  return (\n    <input\n      ref={inputRef}\n      {...props}\n      value={value}\n      onChange={handleChange}\n      onKeyDown={keyDownHandler}\n    />\n  );\n}\n"],"sourceRoot":""}