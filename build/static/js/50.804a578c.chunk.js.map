{"version":3,"sources":["components/Prices/currency-labels.js","hooks/useChartData.js","components/widgets/chartCoin/chartCoin.js"],"names":["currencyLabels","usd","bitcoin","cop","bitcoin_testnet","useChartData","data","setData","useState","isLoading","setLoading","name","setName","requestBody","setRequestBody","currency_from","currency_to","amount_days","coinsendaServices","modelData","useCoinsendaServices","useEffect","async","res","fetchChartData","pair","getData","currentPair","pairs","currencyTo","primary_currency","currency","includes","secondary_currency","settings","chart","connect","dispatch","action","bindActionCreators","actions","lastPrices","setLastPrices","loader","setLoader","isMovilViewport","useViewport","unparsedData","price_list","date_list","historical_data","days","length","push","close_price","moment","subtract","calendar","getPrices","init_component","datasets","labels","setTimeout","update","ctx","document","getElementById","getContext","gradientStroke","Chart","type","label","Array","fill","backgroundColor","borderColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","borderWidth","steppedLine","options","animation","duration","hover","animationDuration","responsiveAnimationDuration","layout","padding","left","right","top","bottom","tooltips","enabled","elements","line","tension","legend","display","scales","xAxes","stacked","gridLines","ticks","callback","value","index","values","yAxes","className","style","backgroundImage","getCdnPath","id","height"],"mappings":"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","file":"static/js/50.804a578c.chunk.js","sourcesContent":["const currencyLabels = {\n  usd: \"USD\",\n  bitcoin: \"BTC\",\n  cop: \"COP\",\n  bitcoin_testnet: \"BTCT\",\n};\n\nexport default currencyLabels;\n","import { useState, useEffect } from \"react\";\nimport { useCoinsendaServices } from \"../services/useCoinsendaServices\";\nimport currencyLabels from \"../components/Prices/currency-labels\";\n\nexport default function useChartData() {\n  const [data, setData] = useState();\n  const [isLoading, setLoading] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [requestBody, setRequestBody] = useState({\n    currency_from: currencyLabels.bitcoin,\n    currency_to: currencyLabels.cop,\n    amount_days: 60,\n  });\n  const [coinsendaServices, { modelData }] = useCoinsendaServices();\n\n  const getData = async () => {\n    setLoading(true);\n    const res = await coinsendaServices.fetchChartData({ data: requestBody });\n    if (!res) return;\n    setName(res.data.pair);\n    setData(res);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [requestBody]);\n\n  useEffect(() => {\n    const currentPair = modelData.pairs.currentPair;\n    if (currentPair) {\n      const currencyTo = currentPair.primary_currency.currency.includes(\"usd\")\n        ? currentPair.secondary_currency.currency\n        : \"usd\";\n      const settings = {\n        currency_from: currencyLabels[currentPair.primary_currency.currency],\n        currency_to: currencyLabels[currencyTo],\n        amount_days: 45,\n      };\n      setRequestBody(settings);\n    }\n  }, [modelData.pairs.currentPair]);\n\n  return [data, isLoading, name];\n}\n","import React, { useEffect, useState } from \"react\";\nimport Chart from \"chart.js\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../../actions\";\nimport { bindActionCreators } from \"redux\";\nimport useViewport from \"../../../hooks/useWindowSize\";\nimport moment from \"moment\";\nimport \"moment/locale/es\";\nimport { getCdnPath } from '../../../environment'\n// import localForage from 'localforage'\n\nimport \"./chartCoin.css\";\nimport useChartData from \"../../../hooks/useChartData\";\nlet chart;\n\nconst ChartCoin = () => {\n  const [lastPrices, setLastPrices] = useState();\n  const [loader, setLoader] = useState();\n  const { isMovilViewport } = useViewport();\n  const [unparsedData] = useChartData();\n\n  const getPrices = async () => {\n    if (!unparsedData) return;\n    setLoader(true);\n    let price_list = [],\n      date_list = [];\n    const { historical_data } = unparsedData.data;\n    if (!historical_data) return setLoader(false);\n    let days = historical_data.length - 1;\n\n    for (let data of historical_data) {\n      price_list.push(data.close_price);\n      date_list.push(moment().subtract(days, \"days\").calendar());\n      days--;\n    }\n\n    setLastPrices({ price_list: price_list, date_list });\n  };\n\n  useEffect(() => {\n    getPrices();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [unparsedData]);\n\n  useEffect(() => {\n    if (!isMovilViewport) {\n      init_component();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (chart && lastPrices) {\n      chart.data.datasets[0].data = lastPrices.price_list;\n      chart.data.labels = lastPrices.date_list;\n      setTimeout(() => {\n        chart.update();\n        setLoader(false);\n      }, 2000);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chart, lastPrices]);\n\n  const init_component = async () => {\n    // return console.log('|||||||||||||||||||||||||||| GET HISTORICAL DATA ==>', lastPrices, )\n\n    let ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n\n    let gradientStroke = \"rgb(4, 205, 252)\";\n    let gradientFill = \"rgb(43, 55, 66, 0.3)\";\n\n    // if(this.props.landingView){\n    //   gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n    //   gradientStroke.addColorStop(1, \"#005790\");\n    //   gradientStroke.addColorStop(0, \"#1ea4ff\");\n    //\n    //   gradientFill = ctx.createLinearGradient(0, 30, 0, 350);\n    //   gradientFill.addColorStop(1, \"rgb(0, 111, 185, 0)\");\n    //   gradientFill.addColorStop(0, \"rgb(30, 164, 255, 0.65)\");\n    // }else{\n    //   gradientStroke = 'rgb(4, 205, 252)'\n    //   gradientFill = 'rgb(43, 55, 66, 0.3)'\n    // }\n\n    chart = new Chart(ctx, {\n      type: \"line\",\n      data: {\n        datasets: [\n          {\n            label: \"Precio\",\n            data: new Array(45).fill(8000),\n            backgroundColor: gradientFill,\n            fill: true,\n            // backgroundColor: `${this.props.landingView ? gradientFill : 'rgb(43, 55, 66, 0.35)'}`,\n            // borderColor: 'rgb(4, 205, 252)',\n            borderColor: gradientStroke,\n            pointBorderColor: gradientStroke,\n            pointBackgroundColor: gradientStroke,\n            pointHoverBackgroundColor: gradientStroke,\n            pointHoverBorderColor: gradientStroke,\n            borderWidth: 1,\n            steppedLine: \"middle\",\n          },\n        ],\n        labels: new Array(45).fill(8000),\n      },\n      options: {\n        animation: {\n          duration: 0, // general animation time\n        },\n        hover: {\n          animationDuration: 300, // duration of animations when hovering an item\n        },\n        responsiveAnimationDuration: 0, // animation duration after a resize\n        layout: {\n          padding: {\n            left: -5,\n            right: 0,\n            top: 0,\n            bottom: -30,\n          },\n        },\n        tooltips: {\n          enabled: true,\n        },\n        elements: {\n          line: {\n            tension: 0,\n          },\n        },\n        legend: {\n          display: false,\n        },\n        scales: {\n          xAxes: [\n            {\n              stacked: true,\n              gridLines: {\n                display: false,\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return \"\";\n                },\n              },\n            },\n          ],\n          yAxes: [\n            {\n              gridLines: {\n                display: false,\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return \"\";\n                },\n              },\n            },\n          ],\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"chartCoin\">\n      <div className=\"contChartCoin\">\n        <div className=\"contChartCoinImg\"\n          style={{backgroundImage:`url(${getCdnPath('assets')}map.webp`}}\n        ></div>\n        <canvas\n          id=\"myChart\"\n          className={`${loader ? \"skeleton\" : \"\"}`}\n          height=\"200\"\n        ></canvas>\n      </div>\n    </div>\n  );\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(ChartCoin);\n"],"sourceRoot":""}