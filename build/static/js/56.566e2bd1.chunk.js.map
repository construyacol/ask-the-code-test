{"version":3,"sources":["components/widgets/video_player/videoPlayer.js"],"names":["VideoPlayer","Component","state","isFull","goFull","this","setState","minimize","componentWillUnmount","render","video","props","className","style","display","play","onClick","action","default_video_state","enabled","onChange","ref","id","width","height","url","playing","controls","onStart","onPause","onEnded","connect","user","modelData","videos","verification_state","ui","dispatch","bindActionCreators","actions"],"mappings":"6IAAA,+FASA,MAAMA,UAAoBC,YAAW,cAAD,yBAKlCC,MAAQ,CACNC,QAAQ,GANwB,KASlCC,OAAS,KACPC,KAAKC,SAAS,CAAEH,QAAQ,KAVQ,KAalCI,SAAW,KACTF,KAAKC,SAAS,CAAEH,QAAQ,KAb1BK,wBAgBAC,SACE,MAAM,MAAEC,GAAUL,KAAKM,OACjB,OAAER,GAAWE,KAAKH,MAExB,OACE,qBACEU,UAAU,cACVC,MAAO,CAAEC,QAASJ,GAASA,EAAMK,KAAO,QAAU,QAFpD,SAIGL,GAASA,EAAMK,MACd,sBAAKH,UAAU,uBAAf,UACE,qBACEA,UAAU,oBACVI,QAASX,KAAKM,MAAMM,OAAOC,oBAF7B,SAIE,mBAAGN,UAAU,0BAGf,cAAC,IAAD,CACEO,QAAShB,EACTiB,SAAWjB,GAAWE,KAAKC,SAAS,CAAEH,WAFxC,SAIE,cAAC,IAAD,CACEkB,IAAI,SACJC,GAAG,QACHC,MAAM,OACNC,OAAO,OACPC,IAAKf,EAAMe,IACXC,QAAShB,EAAMK,KACfY,UAAQ,EACRC,QAASvB,KAAKD,OAEdyB,QAASxB,KAAKE,SACduB,QAASzB,KAAKM,MAAMM,OAAOC,8BA+B5Ba,uBArBf,SAAyB7B,EAAOS,GAC9B,MAAM,KAAEqB,GAAS9B,EAAM+B,WACjB,OAAEC,EAAF,mBAAUC,GAAuBjC,EAAMkC,GAM7C,MAAO,CACLJ,KAAMA,EACNtB,MAAOwB,EANgB,aAAvBC,GAAsCA,EAEX,YAAvBA,GAAoC,eADpC,aAMJA,yBAIJ,SAA4BE,GAC1B,MAAO,CACLpB,OAAQqB,6BAAmBC,IAASF,MAIzBN,CAA6C/B","file":"static/js/56.566e2bd1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import ReactPlayer from 'react-player'\nimport YouTubePlayer from \"react-player/lib/players/YouTube\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../actions\";\nimport Fullscreen from \"react-full-screen\";\nimport \"./videoPlayer.css\";\n\nclass VideoPlayer extends Component {\n  componentWillUnmount() {\n    // YouTubePlayer.removeCustomPlayers()\n  }\n\n  state = {\n    isFull: false,\n  };\n\n  goFull = () => {\n    this.setState({ isFull: true });\n  };\n\n  minimize = () => {\n    this.setState({ isFull: false });\n  };\n\n  render() {\n    const { video } = this.props;\n    const { isFull } = this.state;\n\n    return (\n      <div\n        className=\"VideoPlayer\"\n        style={{ display: video && video.play ? \"block\" : \"none\" }}\n      >\n        {video && video.play && (\n          <div className=\"videoPlayerContainer\">\n            <div\n              className=\"closeButtonPlayer\"\n              onClick={this.props.action.default_video_state}\n            >\n              <i className=\"far fa-times-circle\"></i>\n            </div>\n\n            <Fullscreen\n              enabled={isFull}\n              onChange={(isFull) => this.setState({ isFull })}\n            >\n              <YouTubePlayer\n                ref=\"player\"\n                id=\"putis\"\n                width=\"100%\"\n                height=\"100%\"\n                url={video.url}\n                playing={video.play}\n                controls\n                onStart={this.goFull}\n                // onPlay={this.goFull}\n                onPause={this.minimize}\n                onEnded={this.props.action.default_video_state}\n              />\n            </Fullscreen>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  const { user } = state.modelData;\n  const { videos, verification_state } = state.ui;\n  let verification_video =\n    verification_state === \"rejected\" || !verification_state\n      ? \"kyc_basic\"\n      : verification_state === \"pending\" && \"kyc_advanced\";\n\n  return {\n    user: user,\n    video: videos[verification_video],\n    verification_state,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VideoPlayer);\n"],"sourceRoot":""}