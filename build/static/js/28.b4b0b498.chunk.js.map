{"version":3,"sources":["../node_modules/wallet-address-validator/src/crypto/utils.js","../node_modules/base-x/src/index.js","../node_modules/wallet-address-validator/src/currencies.js","../node_modules/wallet-address-validator/src/ripple_validator.js","../node_modules/jssha/src/sha256.js","../node_modules/wallet-address-validator/src/crypto/blake256.js","../node_modules/wallet-address-validator/src/crypto/sha3.js","../node_modules/wallet-address-validator/src/crypto/blake2b.js","../node_modules/wallet-address-validator/src/ethereum_validator.js","../node_modules/wallet-address-validator/src/bitcoin_validator.js","../node_modules/wallet-address-validator/src/crypto/base58.js","../node_modules/wallet-address-validator/src/crypto/segwit_addr.js","../node_modules/wallet-address-validator/src/crypto/bech32.js","../node_modules/wallet-address-validator/src/monero_validator.js","../node_modules/wallet-address-validator/src/crypto/cnBase58.js","../node_modules/wallet-address-validator/src/crypto/biginteger.js","../node_modules/wallet-address-validator/src/nano_validator.js","../node_modules/wallet-address-validator/src/wallet_address_validator.js"],"names":["jsSHA","__webpack_require__","Blake256","_keccak","Blake2B","numberToHex","number","hex","Math","round","toString","length","module","exports","toHex","arrayOfBytes","i","sha256","hexString","sha","update","getHash","sha256Checksum","payload","this","substr","blake256","digest","blake256Checksum","blake2b","outlen","arr","push","parseInt","Uint8Array","hexToUint8","keccak256","keccak256Checksum","_Buffer","Buffer","ALPHABET","TypeError","BASE_MAP","fill","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","Error","it4","vch","allocUnsafe","j","encode","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","decode","string","buffer","XRPValidator","ETHValidator","BTCValidator","XMRValidator","NANOValidator","CURRENCIES","name","symbol","addressTypes","prod","testnet","validator","segwitHrp","expectedLength","hashFunction","iAddressTypes","getByNameOrSymbol","currencyNameOrSymbol","nameOrSymbol","toLowerCase","currency","cryptoUtils","ALLOWED_CHARS","codec","baseX","regexp","RegExp","isValidAddress","address","test","verifyChecksum","bytes","slice","__WEBPACK_AMD_DEFINE_RESULT__","I","w","c","a","d","f","n","k","e","h","q","y","p","u","l","b","g","m","t","r","z","encoding","numRounds","lastIndexOf","A","B","setHMACKey","binLen","value","C","D","E","F","ArrayBuffer","v","G","getHMAC","outputUpper","toUpperCase","b64Pad","String","fromCharCode","shakeLen","hasOwnProperty","isNaN","_d","search","indexOf","replace","byteLength","J","K","L","M","N","O","P","Q","R","Number","H","undefined","call","sigma","u256","padding","prototype","_length_carry","data","block","_block","offset","_blockOffset","_length","_compress","zo","oo","rot","_h","_s","_nullt","_zo","_oo","Array","readUInt32BE","_padding","lo","hi","msglen","writeUInt32BE","process","global","ERROR","WINDOW","window","root","JS_SHA3_NO_WINDOW","WEB_WORKER","self","JS_SHA3_NO_NODE_JS","versions","node","ARRAY_BUFFER","JS_SHA3_NO_ARRAY_BUFFER","HEX_CHARS","split","CSHAKE_PADDING","SHIFT","RC","BITS","SHAKE_BITS","OUTPUT_TYPES","CSHAKE_BYTEPAD","128","256","isArray","obj","Object","JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW","isView","constructor","createOutputMethod","bits","outputType","message","Keccak","createShakeOutputMethod","outputBits","createCshakeOutputMethod","s","methods","createKmacOutputMethod","key","createOutputMethods","method","createMethod","type","create","algorithms","bytepad","Kmac","methodNames","algorithm","methodName","newMethodName","blocks","reset","finalized","start","blockCount","byteCount","outputBlocks","extraBytes","notString","code","index","lastByteIndex","right","o","unshift","encodeString","strs","paddingBytes","zeros","finalize","arrayBuffer","array","Uint32Array","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","ADD64AA","o0","o1","ADD64AC","B2B_GET32","B2B_G","ix","iy","x0","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","SIGMA82","map","blake2bCompress","ctx","last","parameter_block","Blake2b","salt","personal","set","blake2bUpdate","input","out","buf","blake2bFinal","hexSlice","final","addressHash","base58","segwit","DEFAULT_NETWORK_TYPE","getAddressType","decoded","getDecoded","getChecksum","networkType","addressType","concat","isValidP2PKHandP2SHAddress","ALPHABET_MAP","reverse","bech32","convertbits","frombits","tobits","pad","acc","ret","maxv","hrp","addr","dec","res","version","program","CHARSET","GENERATOR","polymod","values","chk","top","hrpExpand","bechString","has_lower","has_upper","pos","substring","combined","mod","createChecksum","cnBase58","addressRegTest","integratedAddressRegTest","decodedAddrStr","network","validateNetwork","hextobin","JSBigInt","alphabet_str","alphabet","encoded_block_sizes","alphabet_size","UINT64_MAX","pow","encode_block","num","ZERO","twopow8","add","multiply","uint8_be_to_64","compare","div","divRem","remainder","toJSValue","full_block_count","floor","last_block_size","res_size","subarray","bin","join","bintostr","decode_block","res_num","order","digit","product","divide","uint64_to_8be","enc","strtobin","last_block_decoded_size","bintohex","CONSTRUCT","BigInteger","token","parse","_construct","BigInteger_base","base","base_log10","ONE","M_ONE","_0","_1","small","digits","group","numerals","sign","abs","divmod","valueOf","radixRegex","prefixRE","parts","exec","baseSection","splice","negate","subtract","al","bl","sum","max","min","compareAbs","diff","borrow","addOne","subtractOne","next","prev","isFinite","nl","isUnit","square","pl","partial","bi","jlimit","multiplySingleDigit","imult1","quotient","divRemSmall","guess","b_digits","b_index","quot","part","xlen","ylen","highx","highy","ceil","check","n_s","pop","isEven","isOdd","isPositive","isNegative","isZero","exp10","MAX_EXP","shift","aux","two","modPow","exponent","modulus","result","Infinity","NaN","firstNdigits","lowVal","makeUnary","fn","makeBinary","makeTrinary","unary","binary","trinary","currencies","validate"],"mappings":"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","file":"static/js/28.b4b0b498.chunk.js","sourcesContent":["var jsSHA = require('jssha/src/sha256');\n\nvar Blake256 = require('./blake256');\n\nvar _keccak = require('./sha3')['keccak256'];\n\nvar Blake2B = require('./blake2b');\n\nfunction numberToHex(number) {\n  var hex = Math.round(number).toString(16);\n\n  if (hex.length === 1) {\n    hex = '0' + hex;\n  }\n\n  return hex;\n}\n\nfunction hexToUint8(hexString) {\n  var arr = [];\n\n  for (var i = 0; i < hexString.length; i += 2) {\n    arr.push(parseInt(hexString.substr(i, 2), 16));\n  }\n\n  return new Uint8Array(arr);\n}\n\nmodule.exports = {\n  toHex: function toHex(arrayOfBytes) {\n    var hex = '';\n\n    for (var i = 0; i < arrayOfBytes.length; i++) {\n      hex += numberToHex(arrayOfBytes[i]);\n    }\n\n    return hex;\n  },\n  sha256: function sha256(hexString) {\n    var sha = new jsSHA('SHA-256', 'HEX');\n    sha.update(hexString);\n    return sha.getHash('HEX');\n  },\n  sha256Checksum: function sha256Checksum(payload) {\n    return this.sha256(this.sha256(payload)).substr(0, 8);\n  },\n  blake256: function blake256(hexString) {\n    return new Blake256().update(hexString, 'hex').digest('hex');\n  },\n  blake256Checksum: function blake256Checksum(payload) {\n    return this.blake256(this.blake256(payload)).substr(0, 8);\n  },\n  blake2b: function blake2b(hexString, outlen) {\n    return new Blake2B(outlen).update(hexToUint8(hexString)).digest('hex');\n  },\n  keccak256: function keccak256(hexString) {\n    return _keccak(hexString);\n  },\n  keccak256Checksum: function keccak256Checksum(payload) {\n    return _keccak(payload).toString().substr(0, 8);\n  }\n};","'use strict'; // base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\n\nvar _Buffer = require('safe-buffer').Buffer;\n\nfunction base(ALPHABET) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n\n  var BASE_MAP = new Uint8Array(256);\n  BASE_MAP.fill(255);\n\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n\n    BASE_MAP[xc] = i;\n  }\n\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n\n  function encode(source) {\n    if (!_Buffer.isBuffer(source)) {\n      throw new TypeError('Expected Buffer');\n    }\n\n    if (source.length === 0) {\n      return '';\n    } // Skip & count leading zeroes.\n\n\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    } // Allocate enough space in big-endian base58 representation.\n\n\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size); // Process the bytes.\n\n    while (pbegin !== pend) {\n      var carry = source[pbegin]; // Apply \"b58 = b58 * 256 + ch\".\n\n      var i = 0;\n\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n\n      length = i;\n      pbegin++;\n    } // Skip leading zeroes in base58 result.\n\n\n    var it2 = size - length;\n\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    } // Translate the result into a string.\n\n\n    var str = LEADER.repeat(zeroes);\n\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n\n    return str;\n  }\n\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n\n    if (source.length === 0) {\n      return _Buffer.alloc(0);\n    }\n\n    var psz = 0; // Skip leading spaces.\n\n    if (source[psz] === ' ') {\n      return;\n    } // Skip and count leading '1's.\n\n\n    var zeroes = 0;\n    var length = 0;\n\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    } // Allocate enough space in big-endian base256 representation.\n\n\n    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n\n    var b256 = new Uint8Array(size); // Process the characters.\n\n    while (source[psz]) {\n      // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character\n\n      if (carry === 255) {\n        return;\n      }\n\n      var i = 0;\n\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n\n      length = i;\n      psz++;\n    } // Skip trailing spaces.\n\n\n    if (source[psz] === ' ') {\n      return;\n    } // Skip leading zeroes in b256.\n\n\n    var it4 = size - length;\n\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));\n\n    vch.fill(0x00, 0, zeroes);\n    var j = zeroes;\n\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n\n    return vch;\n  }\n\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n\n    if (buffer) {\n      return buffer;\n    }\n\n    throw new Error('Non-base' + BASE + ' character');\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\n\nmodule.exports = base;","var XRPValidator = require('./ripple_validator');\n\nvar ETHValidator = require('./ethereum_validator');\n\nvar BTCValidator = require('./bitcoin_validator');\n\nvar XMRValidator = require('./monero_validator');\n\nvar NANOValidator = require('./nano_validator'); // defines P2PKH and P2SH address types for standard (prod) and testnet networks\n\n\nvar CURRENCIES = [{\n  name: 'bitcoin',\n  symbol: 'btc',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bitcoincash',\n  symbol: 'bch',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'litecoin',\n  symbol: 'ltc',\n  addressTypes: {\n    prod: ['30', '05', '32'],\n    testnet: ['6f', 'c4', '3a']\n  },\n  validator: BTCValidator\n}, {\n  name: 'peercoin',\n  symbol: 'ppc',\n  addressTypes: {\n    prod: ['37', '75'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'dogecoin',\n  symbol: 'doge',\n  addressTypes: {\n    prod: ['1e', '16'],\n    testnet: ['71', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'beavercoin',\n  symbol: 'bvc',\n  addressTypes: {\n    prod: ['19', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'freicoin',\n  symbol: 'frc',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'protoshares',\n  symbol: 'pts',\n  addressTypes: {\n    prod: ['38', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'megacoin',\n  symbol: 'mec',\n  addressTypes: {\n    prod: ['32', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'primecoin',\n  symbol: 'xpm',\n  addressTypes: {\n    prod: ['17', '53'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'auroracoin',\n  symbol: 'aur',\n  addressTypes: {\n    prod: ['17', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'namecoin',\n  symbol: 'nmc',\n  addressTypes: {\n    prod: ['34'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'biocoin',\n  symbol: 'bio',\n  addressTypes: {\n    prod: ['19', '14'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'garlicoin',\n  symbol: 'grlc',\n  addressTypes: {\n    prod: ['26', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'vertcoin',\n  symbol: 'vtc',\n  addressTypes: {\n    prod: ['0x', '47'],\n    testnet: ['6f', 'c4']\n  },\n  segwitHrp: 'vtc',\n  validator: BTCValidator\n}, {\n  name: 'bitcoingold',\n  symbol: 'btg',\n  addressTypes: {\n    prod: ['26', '17'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'komodo',\n  symbol: 'kmd',\n  addressTypes: {\n    prod: ['3c', '55'],\n    testnet: ['0', '5']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bitcoinz',\n  symbol: 'btcz',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bitcoinprivate',\n  symbol: 'btcp',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1325', '13af'],\n    testnet: ['1957', '19e0']\n  },\n  validator: BTCValidator\n}, {\n  name: 'hush',\n  symbol: 'hush',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'snowgem',\n  symbol: 'sng',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1c28', '1c2d'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'zcash',\n  symbol: 'zec',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'zclassic',\n  symbol: 'zcl',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'zencash',\n  symbol: 'zen',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['2089', '2096'],\n    testnet: ['2092', '2098']\n  },\n  validator: BTCValidator\n}, {\n  name: 'votecoin',\n  symbol: 'vot',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'decred',\n  symbol: 'dcr',\n  addressTypes: {\n    prod: ['073f', '071a'],\n    testnet: ['0f21', '0efc']\n  },\n  hashFunction: 'blake256',\n  expectedLength: 26,\n  validator: BTCValidator\n}, {\n  name: 'digibyte',\n  symbol: 'dgb',\n  addressTypes: {\n    prod: ['1e'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'ethereum',\n  symbol: 'eth',\n  validator: ETHValidator\n}, {\n  name: 'etherzero',\n  symbol: 'etz',\n  validator: ETHValidator\n}, {\n  name: 'ethereumclassic',\n  symbol: 'etc',\n  validator: ETHValidator\n}, {\n  name: 'callisto',\n  symbol: 'clo',\n  validator: ETHValidator\n}, {\n  name: 'ripple',\n  symbol: 'xrp',\n  validator: XRPValidator\n}, {\n  name: 'dash',\n  symbol: 'dash',\n  addressTypes: {\n    prod: ['4c', '10'],\n    testnet: ['8c', '13']\n  },\n  validator: BTCValidator\n}, {\n  name: 'neo',\n  symbol: 'neo',\n  addressTypes: {\n    prod: ['17'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'neogas',\n  symbol: 'gas',\n  addressTypes: {\n    prod: ['17'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'qtum',\n  symbol: 'qtum',\n  addressTypes: {\n    prod: ['3a', '32'],\n    testnet: ['78', '6e']\n  },\n  validator: BTCValidator\n}, {\n  name: 'bankex',\n  symbol: 'bkx',\n  validator: ETHValidator\n}, {\n  name: 'monero',\n  symbol: 'xmr',\n  addressTypes: {\n    prod: ['18'],\n    testnet: ['53']\n  },\n  iAddressTypes: {\n    prod: ['19'],\n    testnet: ['54']\n  },\n  validator: XMRValidator\n}, {\n  name: 'nano',\n  symbol: 'nano',\n  validator: NANOValidator\n}, {\n  name: 'raiblocks',\n  symbol: 'xrb',\n  validator: NANOValidator\n}];\nmodule.exports = {\n  getByNameOrSymbol: function getByNameOrSymbol(currencyNameOrSymbol) {\n    var nameOrSymbol = currencyNameOrSymbol.toLowerCase();\n\n    for (var i = 0; i < CURRENCIES.length; i++) {\n      var currency = CURRENCIES[i];\n\n      if (currency.name === nameOrSymbol || currency.symbol === nameOrSymbol) {\n        return currency;\n      }\n    }\n\n    return null;\n  }\n};","var cryptoUtils = require('./crypto/utils');\n\nvar baseX = require('base-x');\n\nvar ALLOWED_CHARS = 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz';\nvar codec = baseX(ALLOWED_CHARS);\nvar regexp = new RegExp('^r[' + ALLOWED_CHARS + ']{27,35}$');\nmodule.exports = {\n  /**\n   * ripple address validation\n   */\n  isValidAddress: function isValidAddress(address) {\n    if (regexp.test(address)) {\n      return this.verifyChecksum(address);\n    }\n\n    return false;\n  },\n  verifyChecksum: function verifyChecksum(address) {\n    var bytes = codec.decode(address);\n    var computedChecksum = cryptoUtils.sha256Checksum(cryptoUtils.toHex(bytes.slice(0, -4)));\n    var checksum = cryptoUtils.toHex(bytes.slice(-4));\n    return computedChecksum === checksum;\n  }\n};","/*\n A JavaScript implementation of the SHA family of hashes, as\n defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding\n HMAC implementation as defined in FIPS PUB 198a\n\n Copyright Brian Turek 2008-2017\n Distributed under the BSD License\n See http://caligatio.github.com/jsSHA/ for more information\n\n Several functions taken from Paul Johnston\n*/\n'use strict';\n\n(function (I) {\n  function w(c, a, d) {\n    var l = 0,\n        b = [],\n        g = 0,\n        f,\n        n,\n        k,\n        e,\n        h,\n        q,\n        y,\n        p,\n        m = !1,\n        t = [],\n        r = [],\n        u,\n        z = !1;\n    d = d || {};\n    f = d.encoding || \"UTF8\";\n    u = d.numRounds || 1;\n    if (u !== parseInt(u, 10) || 1 > u) throw Error(\"numRounds must a integer >= 1\");\n    if (0 === c.lastIndexOf(\"SHA-\", 0)) {\n      if (q = function q(b, a) {\n        return A(b, a, c);\n      }, y = function y(b, a, l, f) {\n        var g, e;\n        if (\"SHA-224\" === c || \"SHA-256\" === c) g = (a + 65 >>> 9 << 4) + 15, e = 16;else throw Error(\"Unexpected error in SHA-2 implementation\");\n\n        for (; b.length <= g;) {\n          b.push(0);\n        }\n\n        b[a >>> 5] |= 128 << 24 - a % 32;\n        a = a + l;\n        b[g] = a & 4294967295;\n        b[g - 1] = a / 4294967296 | 0;\n        l = b.length;\n\n        for (a = 0; a < l; a += e) {\n          f = A(b.slice(a, a + e), f, c);\n        }\n\n        if (\"SHA-224\" === c) b = [f[0], f[1], f[2], f[3], f[4], f[5], f[6]];else if (\"SHA-256\" === c) b = f;else throw Error(\"Unexpected error in SHA-2 implementation\");\n        return b;\n      }, p = function p(b) {\n        return b.slice();\n      }, \"SHA-224\" === c) h = 512, e = 224;else if (\"SHA-256\" === c) h = 512, e = 256;else throw Error(\"Chosen SHA variant is not supported\");\n    } else throw Error(\"Chosen SHA variant is not supported\");\n    k = B(a, f);\n    n = x(c);\n\n    this.setHMACKey = function (b, a, g) {\n      var e;\n      if (!0 === m) throw Error(\"HMAC key already set\");\n      if (!0 === z) throw Error(\"Cannot set HMAC key after calling update\");\n      f = (g || {}).encoding || \"UTF8\";\n      a = B(a, f)(b);\n      b = a.binLen;\n      a = a.value;\n      e = h >>> 3;\n      g = e / 4 - 1;\n\n      if (e < b / 8) {\n        for (a = y(a, b, 0, x(c)); a.length <= g;) {\n          a.push(0);\n        }\n\n        a[g] &= 4294967040;\n      } else if (e > b / 8) {\n        for (; a.length <= g;) {\n          a.push(0);\n        }\n\n        a[g] &= 4294967040;\n      }\n\n      for (b = 0; b <= g; b += 1) {\n        t[b] = a[b] ^ 909522486, r[b] = a[b] ^ 1549556828;\n      }\n\n      n = q(t, n);\n      l = h;\n      m = !0;\n    };\n\n    this.update = function (a) {\n      var c,\n          f,\n          e,\n          d = 0,\n          p = h >>> 5;\n      c = k(a, b, g);\n      a = c.binLen;\n      f = c.value;\n      c = a >>> 5;\n\n      for (e = 0; e < c; e += p) {\n        d + h <= a && (n = q(f.slice(e, e + p), n), d += h);\n      }\n\n      l += d;\n      b = f.slice(d >>> 5);\n      g = a % h;\n      z = !0;\n    };\n\n    this.getHash = function (a, f) {\n      var d, h, k, q;\n      if (!0 === m) throw Error(\"Cannot call getHash after setting HMAC key\");\n      k = C(f);\n\n      switch (a) {\n        case \"HEX\":\n          d = function d(a) {\n            return D(a, e, k);\n          };\n\n          break;\n\n        case \"B64\":\n          d = function d(a) {\n            return E(a, e, k);\n          };\n\n          break;\n\n        case \"BYTES\":\n          d = function d(a) {\n            return F(a, e);\n          };\n\n          break;\n\n        case \"ARRAYBUFFER\":\n          try {\n            h = new ArrayBuffer(0);\n          } catch (v) {\n            throw Error(\"ARRAYBUFFER not supported by this environment\");\n          }\n\n          d = function d(a) {\n            return G(a, e);\n          };\n\n          break;\n\n        default:\n          throw Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");\n      }\n\n      q = y(b.slice(), g, l, p(n));\n\n      for (h = 1; h < u; h += 1) {\n        q = y(q, e, 0, x(c));\n      }\n\n      return d(q);\n    };\n\n    this.getHMAC = function (a, f) {\n      var d, k, t, u;\n      if (!1 === m) throw Error(\"Cannot call getHMAC without first setting HMAC key\");\n      t = C(f);\n\n      switch (a) {\n        case \"HEX\":\n          d = function d(a) {\n            return D(a, e, t);\n          };\n\n          break;\n\n        case \"B64\":\n          d = function d(a) {\n            return E(a, e, t);\n          };\n\n          break;\n\n        case \"BYTES\":\n          d = function d(a) {\n            return F(a, e);\n          };\n\n          break;\n\n        case \"ARRAYBUFFER\":\n          try {\n            d = new ArrayBuffer(0);\n          } catch (v) {\n            throw Error(\"ARRAYBUFFER not supported by this environment\");\n          }\n\n          d = function d(a) {\n            return G(a, e);\n          };\n\n          break;\n\n        default:\n          throw Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");\n      }\n\n      k = y(b.slice(), g, l, p(n));\n      u = q(r, x(c));\n      u = y(k, e, h, u);\n      return d(u);\n    };\n  }\n\n  function m() {}\n\n  function D(c, a, d) {\n    var l = \"\";\n    a /= 8;\n    var b, g;\n\n    for (b = 0; b < a; b += 1) {\n      g = c[b >>> 2] >>> 8 * (3 + b % 4 * -1), l += \"0123456789abcdef\".charAt(g >>> 4 & 15) + \"0123456789abcdef\".charAt(g & 15);\n    }\n\n    return d.outputUpper ? l.toUpperCase() : l;\n  }\n\n  function E(c, a, d) {\n    var l = \"\",\n        b = a / 8,\n        g,\n        f,\n        n;\n\n    for (g = 0; g < b; g += 3) {\n      for (f = g + 1 < b ? c[g + 1 >>> 2] : 0, n = g + 2 < b ? c[g + 2 >>> 2] : 0, n = (c[g >>> 2] >>> 8 * (3 + g % 4 * -1) & 255) << 16 | (f >>> 8 * (3 + (g + 1) % 4 * -1) & 255) << 8 | n >>> 8 * (3 + (g + 2) % 4 * -1) & 255, f = 0; 4 > f; f += 1) {\n        8 * g + 6 * f <= a ? l += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(n >>> 6 * (3 - f) & 63) : l += d.b64Pad;\n      }\n    }\n\n    return l;\n  }\n\n  function F(c, a) {\n    var d = \"\",\n        l = a / 8,\n        b,\n        g;\n\n    for (b = 0; b < l; b += 1) {\n      g = c[b >>> 2] >>> 8 * (3 + b % 4 * -1) & 255, d += String.fromCharCode(g);\n    }\n\n    return d;\n  }\n\n  function G(c, a) {\n    var d = a / 8,\n        l,\n        b = new ArrayBuffer(d),\n        g;\n    g = new Uint8Array(b);\n\n    for (l = 0; l < d; l += 1) {\n      g[l] = c[l >>> 2] >>> 8 * (3 + l % 4 * -1) & 255;\n    }\n\n    return b;\n  }\n\n  function C(c) {\n    var a = {\n      outputUpper: !1,\n      b64Pad: \"=\",\n      shakeLen: -1\n    };\n    c = c || {};\n    a.outputUpper = c.outputUpper || !1;\n    !0 === c.hasOwnProperty(\"b64Pad\") && (a.b64Pad = c.b64Pad);\n    if (\"boolean\" !== typeof a.outputUpper) throw Error(\"Invalid outputUpper formatting option\");\n    if (\"string\" !== typeof a.b64Pad) throw Error(\"Invalid b64Pad formatting option\");\n    return a;\n  }\n\n  function B(c, a) {\n    var d;\n\n    switch (a) {\n      case \"UTF8\":\n      case \"UTF16BE\":\n      case \"UTF16LE\":\n        break;\n\n      default:\n        throw Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");\n    }\n\n    switch (c) {\n      case \"HEX\":\n        d = function d(a, b, c) {\n          var f = a.length,\n              d,\n              k,\n              e,\n              h,\n              q;\n          if (0 !== f % 2) throw Error(\"String of HEX type must be in byte increments\");\n          b = b || [0];\n          c = c || 0;\n          q = c >>> 3;\n\n          for (d = 0; d < f; d += 2) {\n            k = parseInt(a.substr(d, 2), 16);\n            if (isNaN(k)) throw Error(\"String of HEX type contains invalid characters\");\n            h = (d >>> 1) + q;\n\n            for (e = h >>> 2; b.length <= e;) {\n              b.push(0);\n            }\n\n            b[e] |= k << 8 * (3 + h % 4 * -1);\n          }\n\n          return {\n            value: b,\n            binLen: 4 * f + c\n          };\n        };\n\n        break;\n\n      case \"TEXT\":\n        d = function d(c, b, _d) {\n          var f,\n              n,\n              k = 0,\n              e,\n              h,\n              q,\n              m,\n              p,\n              r;\n          b = b || [0];\n          _d = _d || 0;\n          q = _d >>> 3;\n          if (\"UTF8\" === a) for (r = 3, e = 0; e < c.length; e += 1) {\n            for (f = c.charCodeAt(e), n = [], 128 > f ? n.push(f) : 2048 > f ? (n.push(192 | f >>> 6), n.push(128 | f & 63)) : 55296 > f || 57344 <= f ? n.push(224 | f >>> 12, 128 | f >>> 6 & 63, 128 | f & 63) : (e += 1, f = 65536 + ((f & 1023) << 10 | c.charCodeAt(e) & 1023), n.push(240 | f >>> 18, 128 | f >>> 12 & 63, 128 | f >>> 6 & 63, 128 | f & 63)), h = 0; h < n.length; h += 1) {\n              p = k + q;\n\n              for (m = p >>> 2; b.length <= m;) {\n                b.push(0);\n              }\n\n              b[m] |= n[h] << 8 * (r + p % 4 * -1);\n              k += 1;\n            }\n          } else if (\"UTF16BE\" === a || \"UTF16LE\" === a) for (r = 2, n = \"UTF16LE\" === a && !0 || \"UTF16LE\" !== a && !1, e = 0; e < c.length; e += 1) {\n            f = c.charCodeAt(e);\n            !0 === n && (h = f & 255, f = h << 8 | f >>> 8);\n            p = k + q;\n\n            for (m = p >>> 2; b.length <= m;) {\n              b.push(0);\n            }\n\n            b[m] |= f << 8 * (r + p % 4 * -1);\n            k += 2;\n          }\n          return {\n            value: b,\n            binLen: 8 * k + _d\n          };\n        };\n\n        break;\n\n      case \"B64\":\n        d = function d(a, b, c) {\n          var f = 0,\n              d,\n              k,\n              e,\n              h,\n              q,\n              m,\n              p;\n          if (-1 === a.search(/^[a-zA-Z0-9=+\\/]+$/)) throw Error(\"Invalid character in base-64 string\");\n          k = a.indexOf(\"=\");\n          a = a.replace(/\\=/g, \"\");\n          if (-1 !== k && k < a.length) throw Error(\"Invalid '=' found in base-64 string\");\n          b = b || [0];\n          c = c || 0;\n          m = c >>> 3;\n\n          for (k = 0; k < a.length; k += 4) {\n            q = a.substr(k, 4);\n\n            for (e = h = 0; e < q.length; e += 1) {\n              d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(q[e]), h |= d << 18 - 6 * e;\n            }\n\n            for (e = 0; e < q.length - 1; e += 1) {\n              p = f + m;\n\n              for (d = p >>> 2; b.length <= d;) {\n                b.push(0);\n              }\n\n              b[d] |= (h >>> 16 - 8 * e & 255) << 8 * (3 + p % 4 * -1);\n              f += 1;\n            }\n          }\n\n          return {\n            value: b,\n            binLen: 8 * f + c\n          };\n        };\n\n        break;\n\n      case \"BYTES\":\n        d = function d(a, b, c) {\n          var d, n, k, e, h;\n          b = b || [0];\n          c = c || 0;\n          k = c >>> 3;\n\n          for (n = 0; n < a.length; n += 1) {\n            d = a.charCodeAt(n), h = n + k, e = h >>> 2, b.length <= e && b.push(0), b[e] |= d << 8 * (3 + h % 4 * -1);\n          }\n\n          return {\n            value: b,\n            binLen: 8 * a.length + c\n          };\n        };\n\n        break;\n\n      case \"ARRAYBUFFER\":\n        try {\n          d = new ArrayBuffer(0);\n        } catch (l) {\n          throw Error(\"ARRAYBUFFER not supported by this environment\");\n        }\n\n        d = function d(a, b, c) {\n          var d, n, k, e, h;\n          b = b || [0];\n          c = c || 0;\n          n = c >>> 3;\n          h = new Uint8Array(a);\n\n          for (d = 0; d < a.byteLength; d += 1) {\n            e = d + n, k = e >>> 2, b.length <= k && b.push(0), b[k] |= h[d] << 8 * (3 + e % 4 * -1);\n          }\n\n          return {\n            value: b,\n            binLen: 8 * a.byteLength + c\n          };\n        };\n\n        break;\n\n      default:\n        throw Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");\n    }\n\n    return d;\n  }\n\n  function r(c, a) {\n    return c >>> a | c << 32 - a;\n  }\n\n  function J(c, a, d) {\n    return c & a ^ ~c & d;\n  }\n\n  function K(c, a, d) {\n    return c & a ^ c & d ^ a & d;\n  }\n\n  function L(c) {\n    return r(c, 2) ^ r(c, 13) ^ r(c, 22);\n  }\n\n  function M(c) {\n    return r(c, 6) ^ r(c, 11) ^ r(c, 25);\n  }\n\n  function N(c) {\n    return r(c, 7) ^ r(c, 18) ^ c >>> 3;\n  }\n\n  function O(c) {\n    return r(c, 17) ^ r(c, 19) ^ c >>> 10;\n  }\n\n  function P(c, a) {\n    var d = (c & 65535) + (a & 65535);\n    return ((c >>> 16) + (a >>> 16) + (d >>> 16) & 65535) << 16 | d & 65535;\n  }\n\n  function Q(c, a, d, l) {\n    var b = (c & 65535) + (a & 65535) + (d & 65535) + (l & 65535);\n    return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (l >>> 16) + (b >>> 16) & 65535) << 16 | b & 65535;\n  }\n\n  function R(c, a, d, l, b) {\n    var g = (c & 65535) + (a & 65535) + (d & 65535) + (l & 65535) + (b & 65535);\n    return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (l >>> 16) + (b >>> 16) + (g >>> 16) & 65535) << 16 | g & 65535;\n  }\n\n  function x(c) {\n    var a = [],\n        d;\n    if (0 === c.lastIndexOf(\"SHA-\", 0)) switch (a = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428], d = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], c) {\n      case \"SHA-224\":\n        break;\n\n      case \"SHA-256\":\n        a = d;\n        break;\n\n      case \"SHA-384\":\n        a = [new m(), new m(), new m(), new m(), new m(), new m(), new m(), new m()];\n        break;\n\n      case \"SHA-512\":\n        a = [new m(), new m(), new m(), new m(), new m(), new m(), new m(), new m()];\n        break;\n\n      default:\n        throw Error(\"Unknown SHA variant\");\n    } else throw Error(\"No SHA variants supported\");\n    return a;\n  }\n\n  function A(c, a, d) {\n    var l,\n        b,\n        g,\n        f,\n        n,\n        k,\n        e,\n        h,\n        m,\n        r,\n        p,\n        w,\n        t,\n        x,\n        u,\n        z,\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        v = [],\n        G;\n    if (\"SHA-224\" === d || \"SHA-256\" === d) r = 64, w = 1, F = Number, t = P, x = Q, u = R, z = N, A = O, B = L, C = M, E = K, D = J, G = H;else throw Error(\"Unexpected error in SHA-2 implementation\");\n    d = a[0];\n    l = a[1];\n    b = a[2];\n    g = a[3];\n    f = a[4];\n    n = a[5];\n    k = a[6];\n    e = a[7];\n\n    for (p = 0; p < r; p += 1) {\n      16 > p ? (m = p * w, h = c.length <= m ? 0 : c[m], m = c.length <= m + 1 ? 0 : c[m + 1], v[p] = new F(h, m)) : v[p] = x(A(v[p - 2]), v[p - 7], z(v[p - 15]), v[p - 16]), h = u(e, C(f), D(f, n, k), G[p], v[p]), m = t(B(d), E(d, l, b)), e = k, k = n, n = f, f = t(g, h), g = b, b = l, l = d, d = t(h, m);\n    }\n\n    a[0] = t(d, a[0]);\n    a[1] = t(l, a[1]);\n    a[2] = t(b, a[2]);\n    a[3] = t(g, a[3]);\n    a[4] = t(f, a[4]);\n    a[5] = t(n, a[5]);\n    a[6] = t(k, a[6]);\n    a[7] = t(e, a[7]);\n    return a;\n  }\n\n  var H;\n  H = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];\n  \"function\" === typeof define && define.amd ? define(function () {\n    return w;\n  }) : \"undefined\" !== typeof exports ? (\"undefined\" !== typeof module && module.exports && (module.exports = w), exports = w) : I.jsSHA = w;\n})(this);","'use strict';\n/**\n * Credits to https://github.com/cryptocoinjs/blake-hash\n */\n\nBlake256.sigma = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3], [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4], [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8], [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13], [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9], [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11], [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10], [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5], [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3], [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4], [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8], [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13], [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]];\nBlake256.u256 = [0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917];\nBlake256.padding = new Buffer([0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\nBlake256.prototype._length_carry = function (arr) {\n  for (var j = 0; j < arr.length; ++j) {\n    if (arr[j] < 0x0100000000) break;\n    arr[j] -= 0x0100000000;\n    arr[j + 1] += 1;\n  }\n};\n\nBlake256.prototype.update = function (data, encoding) {\n  data = new Buffer(data, encoding);\n  var block = this._block;\n  var offset = 0;\n\n  while (this._blockOffset + data.length - offset >= block.length) {\n    for (var i = this._blockOffset; i < block.length;) {\n      block[i++] = data[offset++];\n    }\n\n    this._length[0] += block.length * 8;\n\n    this._length_carry(this._length);\n\n    this._compress();\n\n    this._blockOffset = 0;\n  }\n\n  while (offset < data.length) {\n    block[this._blockOffset++] = data[offset++];\n  }\n\n  return this;\n};\n\nvar zo = new Buffer([0x01]);\nvar oo = new Buffer([0x81]);\n\nfunction rot(x, n) {\n  return (x << 32 - n | x >>> n) >>> 0;\n}\n\nfunction g(v, m, i, a, b, c, d, e) {\n  var sigma = Blake256.sigma;\n  var u256 = Blake256.u256;\n  v[a] = v[a] + ((m[sigma[i][e]] ^ u256[sigma[i][e + 1]]) >>> 0) + v[b] >>> 0;\n  v[d] = rot(v[d] ^ v[a], 16);\n  v[c] = v[c] + v[d] >>> 0;\n  v[b] = rot(v[b] ^ v[c], 12);\n  v[a] = v[a] + ((m[sigma[i][e + 1]] ^ u256[sigma[i][e]]) >>> 0) + v[b] >>> 0;\n  v[d] = rot(v[d] ^ v[a], 8);\n  v[c] = v[c] + v[d] >>> 0;\n  v[b] = rot(v[b] ^ v[c], 7);\n}\n\nfunction Blake256() {\n  this._h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this._s = [0, 0, 0, 0];\n  this._block = new Buffer(64);\n  this._blockOffset = 0;\n  this._length = [0, 0];\n  this._nullt = false;\n  this._zo = zo;\n  this._oo = oo;\n}\n\nBlake256.prototype._compress = function () {\n  var u256 = Blake256.u256;\n  var v = new Array(16);\n  var m = new Array(16);\n  var i;\n\n  for (i = 0; i < 16; ++i) {\n    m[i] = this._block.readUInt32BE(i * 4);\n  }\n\n  for (i = 0; i < 8; ++i) {\n    v[i] = this._h[i] >>> 0;\n  }\n\n  for (i = 8; i < 12; ++i) {\n    v[i] = (this._s[i - 8] ^ u256[i - 8]) >>> 0;\n  }\n\n  for (i = 12; i < 16; ++i) {\n    v[i] = u256[i - 8];\n  }\n\n  if (!this._nullt) {\n    v[12] = (v[12] ^ this._length[0]) >>> 0;\n    v[13] = (v[13] ^ this._length[0]) >>> 0;\n    v[14] = (v[14] ^ this._length[1]) >>> 0;\n    v[15] = (v[15] ^ this._length[1]) >>> 0;\n  }\n\n  for (i = 0; i < 14; ++i) {\n    /* column step */\n    g(v, m, i, 0, 4, 8, 12, 0);\n    g(v, m, i, 1, 5, 9, 13, 2);\n    g(v, m, i, 2, 6, 10, 14, 4);\n    g(v, m, i, 3, 7, 11, 15, 6);\n    /* diagonal step */\n\n    g(v, m, i, 0, 5, 10, 15, 8);\n    g(v, m, i, 1, 6, 11, 12, 10);\n    g(v, m, i, 2, 7, 8, 13, 12);\n    g(v, m, i, 3, 4, 9, 14, 14);\n  }\n\n  for (i = 0; i < 16; ++i) {\n    this._h[i % 8] = (this._h[i % 8] ^ v[i]) >>> 0;\n  }\n\n  for (i = 0; i < 8; ++i) {\n    this._h[i] = (this._h[i] ^ this._s[i % 4]) >>> 0;\n  }\n};\n\nBlake256.prototype._padding = function () {\n  var lo = this._length[0] + this._blockOffset * 8;\n  var hi = this._length[1];\n\n  if (lo >= 0x0100000000) {\n    lo -= 0x0100000000;\n    hi += 1;\n  }\n\n  var msglen = new Buffer(8);\n  msglen.writeUInt32BE(hi, 0);\n  msglen.writeUInt32BE(lo, 4);\n\n  if (this._blockOffset === 55) {\n    this._length[0] -= 8;\n    this.update(this._oo);\n  } else {\n    if (this._blockOffset < 55) {\n      if (this._blockOffset === 0) this._nullt = true;\n      this._length[0] -= (55 - this._blockOffset) * 8;\n      this.update(Blake256.padding.slice(0, 55 - this._blockOffset));\n    } else {\n      this._length[0] -= (64 - this._blockOffset) * 8;\n      this.update(Blake256.padding.slice(0, 64 - this._blockOffset));\n      this._length[0] -= 55 * 8;\n      this.update(Blake256.padding.slice(1, 1 + 55));\n      this._nullt = true;\n    }\n\n    this.update(this._zo);\n    this._length[0] -= 8;\n  }\n\n  this._length[0] -= 64;\n  this.update(msglen);\n};\n\nBlake256.prototype.digest = function (encoding) {\n  this._padding();\n\n  var buffer = new Buffer(32);\n\n  for (var i = 0; i < 8; ++i) {\n    buffer.writeUInt32BE(this._h[i], i * 4);\n  }\n\n  return buffer.toString(encoding);\n};\n\nmodule.exports = Blake256;","/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.7.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2017\n * @license MIT\n */\n\n/*jslint bitwise: true */\n'use strict';\n\nvar ERROR = 'input is invalid type';\nvar WINDOW = typeof window === 'object';\nvar root = WINDOW ? window : {};\n\nif (root.JS_SHA3_NO_WINDOW) {\n  WINDOW = false;\n}\n\nvar WEB_WORKER = !WINDOW && typeof self === 'object';\nvar NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\nif (NODE_JS) {\n  root = global;\n} else if (WEB_WORKER) {\n  root = self;\n}\n\nvar ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\nvar HEX_CHARS = '0123456789abcdef'.split('');\nvar SHAKE_PADDING = [31, 7936, 2031616, 520093696];\nvar CSHAKE_PADDING = [4, 1024, 262144, 67108864];\nvar KECCAK_PADDING = [1, 256, 65536, 16777216];\nvar PADDING = [6, 1536, 393216, 100663296];\nvar SHIFT = [0, 8, 16, 24];\nvar RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\nvar BITS = [224, 256, 384, 512];\nvar SHAKE_BITS = [128, 256];\nvar OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\nvar CSHAKE_BYTEPAD = {\n  '128': 168,\n  '256': 136\n};\n\nif (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n  Array.isArray = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n}\n\nif (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n  ArrayBuffer.isView = function (obj) {\n    return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n  };\n}\n\nvar createOutputMethod = function createOutputMethod(bits, padding, outputType) {\n  return function (message) {\n    return new Keccak(bits, padding, bits).update(message)[outputType]();\n  };\n};\n\nvar createShakeOutputMethod = function createShakeOutputMethod(bits, padding, outputType) {\n  return function (message, outputBits) {\n    return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n  };\n};\n\nvar createCshakeOutputMethod = function createCshakeOutputMethod(bits, padding, outputType) {\n  return function (message, outputBits, n, s) {\n    return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n  };\n};\n\nvar createKmacOutputMethod = function createKmacOutputMethod(bits, padding, outputType) {\n  return function (key, message, outputBits, s) {\n    return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n  };\n};\n\nvar createOutputMethods = function createOutputMethods(method, createMethod, bits, padding) {\n  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n    var type = OUTPUT_TYPES[i];\n    method[type] = createMethod(bits, padding, type);\n  }\n\n  return method;\n};\n\nvar createMethod = function createMethod(bits, padding) {\n  var method = createOutputMethod(bits, padding, 'hex');\n\n  method.create = function () {\n    return new Keccak(bits, padding, bits);\n  };\n\n  method.update = function (message) {\n    return method.create().update(message);\n  };\n\n  return createOutputMethods(method, createOutputMethod, bits, padding);\n};\n\nvar createShakeMethod = function createShakeMethod(bits, padding) {\n  var method = createShakeOutputMethod(bits, padding, 'hex');\n\n  method.create = function (outputBits) {\n    return new Keccak(bits, padding, outputBits);\n  };\n\n  method.update = function (message, outputBits) {\n    return method.create(outputBits).update(message);\n  };\n\n  return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n};\n\nvar createCshakeMethod = function createCshakeMethod(bits, padding) {\n  var w = CSHAKE_BYTEPAD[bits];\n  var method = createCshakeOutputMethod(bits, padding, 'hex');\n\n  method.create = function (outputBits, n, s) {\n    if (!n && !s) {\n      return methods['shake' + bits].create(outputBits);\n    } else {\n      return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n    }\n  };\n\n  method.update = function (message, outputBits, n, s) {\n    return method.create(outputBits, n, s).update(message);\n  };\n\n  return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n};\n\nvar createKmacMethod = function createKmacMethod(bits, padding) {\n  var w = CSHAKE_BYTEPAD[bits];\n  var method = createKmacOutputMethod(bits, padding, 'hex');\n\n  method.create = function (key, outputBits, s) {\n    return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n  };\n\n  method.update = function (key, message, outputBits, s) {\n    return method.create(key, outputBits, s).update(message);\n  };\n\n  return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n};\n\nvar algorithms = [{\n  name: 'keccak',\n  padding: KECCAK_PADDING,\n  bits: BITS,\n  createMethod: createMethod\n}, {\n  name: 'sha3',\n  padding: PADDING,\n  bits: BITS,\n  createMethod: createMethod\n}, {\n  name: 'shake',\n  padding: SHAKE_PADDING,\n  bits: SHAKE_BITS,\n  createMethod: createShakeMethod\n}, {\n  name: 'cshake',\n  padding: CSHAKE_PADDING,\n  bits: SHAKE_BITS,\n  createMethod: createCshakeMethod\n}, {\n  name: 'kmac',\n  padding: CSHAKE_PADDING,\n  bits: SHAKE_BITS,\n  createMethod: createKmacMethod\n}];\nvar methods = {},\n    methodNames = [];\n\nfor (var i = 0; i < algorithms.length; ++i) {\n  var algorithm = algorithms[i];\n  var bits = algorithm.bits;\n\n  for (var j = 0; j < bits.length; ++j) {\n    var methodName = algorithm.name + '_' + bits[j];\n    methodNames.push(methodName);\n    methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n\n    if (algorithm.name !== 'sha3') {\n      var newMethodName = algorithm.name + bits[j];\n      methodNames.push(newMethodName);\n      methods[newMethodName] = methods[methodName];\n    }\n  }\n}\n\nfunction Keccak(bits, padding, outputBits) {\n  this.blocks = [];\n  this.s = [];\n  this.padding = padding;\n  this.outputBits = outputBits;\n  this.reset = true;\n  this.finalized = false;\n  this.block = 0;\n  this.start = 0;\n  this.blockCount = 1600 - (bits << 1) >> 5;\n  this.byteCount = this.blockCount << 2;\n  this.outputBlocks = outputBits >> 5;\n  this.extraBytes = (outputBits & 31) >> 3;\n\n  for (var i = 0; i < 50; ++i) {\n    this.s[i] = 0;\n  }\n}\n\nKeccak.prototype.update = function (message) {\n  if (this.finalized) {\n    return;\n  }\n\n  var notString,\n      type = typeof message;\n\n  if (type !== 'string') {\n    if (type === 'object') {\n      if (message === null) {\n        throw ERROR;\n      } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n        message = new Uint8Array(message);\n      } else if (!Array.isArray(message)) {\n        if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n          throw ERROR;\n        }\n      }\n    } else {\n      throw ERROR;\n    }\n\n    notString = true;\n  }\n\n  var blocks = this.blocks,\n      byteCount = this.byteCount,\n      length = message.length,\n      blockCount = this.blockCount,\n      index = 0,\n      s = this.s,\n      i,\n      code;\n\n  while (index < length) {\n    if (this.reset) {\n      this.reset = false;\n      blocks[0] = this.block;\n\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n\n    if (notString) {\n      for (i = this.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = this.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n\n    this.lastByteIndex = i;\n\n    if (i >= byteCount) {\n      this.start = i - byteCount;\n      this.block = blocks[blockCount];\n\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n\n      f(s);\n      this.reset = true;\n    } else {\n      this.start = i;\n    }\n  }\n\n  return this;\n};\n\nKeccak.prototype.encode = function (x, right) {\n  var o = x & 255,\n      n = 1;\n  var bytes = [o];\n  x = x >> 8;\n  o = x & 255;\n\n  while (o > 0) {\n    bytes.unshift(o);\n    x = x >> 8;\n    o = x & 255;\n    ++n;\n  }\n\n  if (right) {\n    bytes.push(n);\n  } else {\n    bytes.unshift(n);\n  }\n\n  this.update(bytes);\n  return bytes.length;\n};\n\nKeccak.prototype.encodeString = function (str) {\n  var notString,\n      type = typeof str;\n\n  if (type !== 'string') {\n    if (type === 'object') {\n      if (str === null) {\n        throw ERROR;\n      } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n        str = new Uint8Array(str);\n      } else if (!Array.isArray(str)) {\n        if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n          throw ERROR;\n        }\n      }\n    } else {\n      throw ERROR;\n    }\n\n    notString = true;\n  }\n\n  var bytes = 0,\n      length = str.length;\n\n  if (notString) {\n    bytes = length;\n  } else {\n    for (var i = 0; i < str.length; ++i) {\n      var code = str.charCodeAt(i);\n\n      if (code < 0x80) {\n        bytes += 1;\n      } else if (code < 0x800) {\n        bytes += 2;\n      } else if (code < 0xd800 || code >= 0xe000) {\n        bytes += 3;\n      } else {\n        code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);\n        bytes += 4;\n      }\n    }\n  }\n\n  bytes += this.encode(bytes * 8);\n  this.update(str);\n  return bytes;\n};\n\nKeccak.prototype.bytepad = function (strs, w) {\n  var bytes = this.encode(w);\n\n  for (var i = 0; i < strs.length; ++i) {\n    bytes += this.encodeString(strs[i]);\n  }\n\n  var paddingBytes = w - bytes % w;\n  var zeros = [];\n  zeros.length = paddingBytes;\n  this.update(zeros);\n  return this;\n};\n\nKeccak.prototype.finalize = function () {\n  if (this.finalized) {\n    return;\n  }\n\n  this.finalized = true;\n  var blocks = this.blocks,\n      i = this.lastByteIndex,\n      blockCount = this.blockCount,\n      s = this.s;\n  blocks[i >> 2] |= this.padding[i & 3];\n\n  if (this.lastByteIndex === this.byteCount) {\n    blocks[0] = blocks[blockCount];\n\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n\n  blocks[blockCount - 1] |= 0x80000000;\n\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n\n  f(s);\n};\n\nKeccak.prototype.toString = Keccak.prototype.hex = function () {\n  this.finalize();\n  var blockCount = this.blockCount,\n      s = this.s,\n      outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes,\n      i = 0,\n      j = 0;\n  var hex = '',\n      block;\n\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n    }\n\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  }\n\n  if (extraBytes) {\n    block = s[i];\n    hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n\n    if (extraBytes > 1) {\n      hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n    }\n\n    if (extraBytes > 2) {\n      hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n    }\n  }\n\n  return hex;\n};\n\nKeccak.prototype.arrayBuffer = function () {\n  this.finalize();\n  var blockCount = this.blockCount,\n      s = this.s,\n      outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes,\n      i = 0,\n      j = 0;\n  var bytes = this.outputBits >> 3;\n  var buffer;\n\n  if (extraBytes) {\n    buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n  } else {\n    buffer = new ArrayBuffer(bytes);\n  }\n\n  var array = new Uint32Array(buffer);\n\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      array[j] = s[i];\n    }\n\n    if (j % blockCount === 0) {\n      f(s);\n    }\n  }\n\n  if (extraBytes) {\n    array[i] = s[i];\n    buffer = buffer.slice(0, bytes);\n  }\n\n  return buffer;\n};\n\nKeccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\nKeccak.prototype.digest = Keccak.prototype.array = function () {\n  this.finalize();\n  var blockCount = this.blockCount,\n      s = this.s,\n      outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes,\n      i = 0,\n      j = 0;\n  var array = [],\n      offset,\n      block;\n\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      array[offset + 1] = block >> 8 & 0xFF;\n      array[offset + 2] = block >> 16 & 0xFF;\n      array[offset + 3] = block >> 24 & 0xFF;\n    }\n\n    if (j % blockCount === 0) {\n      f(s);\n    }\n  }\n\n  if (extraBytes) {\n    offset = j << 2;\n    block = s[i];\n    array[offset] = block & 0xFF;\n\n    if (extraBytes > 1) {\n      array[offset + 1] = block >> 8 & 0xFF;\n    }\n\n    if (extraBytes > 2) {\n      array[offset + 2] = block >> 16 & 0xFF;\n    }\n  }\n\n  return array;\n};\n\nfunction Kmac(bits, padding, outputBits) {\n  Keccak.call(this, bits, padding, outputBits);\n}\n\nKmac.prototype = new Keccak();\n\nKmac.prototype.finalize = function () {\n  this.encode(this.outputBits, true);\n  return Keccak.prototype.finalize.call(this);\n};\n\nvar f = function f(s) {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nmodule.exports = methods;","'use strict';\n/**\n * Credits to https://github.com/emilbayes/blake2b\n *\n * Copyright (c) 2017, Emil Bay github@tixz.dk\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\n\nfunction ADD64AA(v, a, b) {\n  var o0 = v[a] + v[b];\n  var o1 = v[a + 1] + v[b + 1];\n\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n\n  v[a] = o0;\n  v[a + 1] = o1;\n} // 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\n\n\nfunction ADD64AC(v, a, b0, b1) {\n  var o0 = v[a] + b0;\n\n  if (b0 < 0) {\n    o0 += 0x100000000;\n  }\n\n  var o1 = v[a + 1] + b1;\n\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n\n  v[a] = o0;\n  v[a + 1] = o1;\n} // Little-endian byte access\n\n\nfunction B2B_GET32(arr, i) {\n  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n} // G Mixing function\n// The ROTRs are inlined for speed\n\n\nfunction B2B_G(a, b, c, d, ix, iy) {\n  var x0 = m[ix];\n  var x1 = m[ix + 1];\n  var y0 = m[iy];\n  var y1 = m[iy + 1];\n  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n\n  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n\n  var xor0 = v[d] ^ v[a];\n  var xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor1;\n  v[d + 1] = xor0;\n  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor0 >>> 24 ^ xor1 << 8;\n  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n  ADD64AA(v, a, b);\n  ADD64AC(v, a, y0, y1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n\n  xor0 = v[d] ^ v[a];\n  xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor0 >>> 16 ^ xor1 << 16;\n  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor1 >>> 31 ^ xor0 << 1;\n  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n} // Initialization Vector\n\n\nvar BLAKE2B_IV32 = new Uint32Array([0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85, 0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A, 0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C, 0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19]);\nvar SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]; // These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\n\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {\n  return x * 2;\n})); // Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\n\nvar v = new Uint32Array(32);\nvar m = new Uint32Array(32);\n\nfunction blake2bCompress(ctx, last) {\n  var i = 0; // init work variables\n\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i];\n    v[i + 16] = BLAKE2B_IV32[i];\n  } // low 64 bits of offset\n\n\n  v[24] = v[24] ^ ctx.t;\n  v[25] = v[25] ^ ctx.t / 0x100000000; // high 64 bits not supported, offset may not be higher than 2**53-1\n  // last block flag set ?\n\n  if (last) {\n    v[28] = ~v[28];\n    v[29] = ~v[29];\n  } // get little-endian words\n\n\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i);\n  } // twelve rounds of mixing\n\n\n  for (i = 0; i < 12; i++) {\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n  }\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n  }\n} // reusable parameter_block\n\n\nvar parameter_block = new Uint8Array([0, 0, 0, 0, //  0: outlen, keylen, fanout, depth\n0, 0, 0, 0, //  4: leaf length, sequential mode\n0, 0, 0, 0, //  8: node offset\n0, 0, 0, 0, // 12: node offset\n0, 0, 0, 0, // 16: node depth, inner length, rfu\n0, 0, 0, 0, // 20: rfu\n0, 0, 0, 0, // 24: rfu\n0, 0, 0, 0, // 28: rfu\n0, 0, 0, 0, // 32: salt\n0, 0, 0, 0, // 36: salt\n0, 0, 0, 0, // 40: salt\n0, 0, 0, 0, // 44: salt\n0, 0, 0, 0, // 48: personal\n0, 0, 0, 0, // 52: personal\n0, 0, 0, 0, // 56: personal\n0, 0, 0, 0 // 60: personal\n]); // Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n\nfunction Blake2b(outlen, key, salt, personal) {\n  // zero out parameter_block before usage\n  parameter_block.fill(0); // state, 'param block'\n\n  this.b = new Uint8Array(128);\n  this.h = new Uint32Array(16);\n  this.t = 0; // input count\n\n  this.c = 0; // pointer within buffer\n\n  this.outlen = outlen; // output length in bytes\n\n  parameter_block[0] = outlen;\n  if (key) parameter_block[1] = key.length;\n  parameter_block[2] = 1; // fanout\n\n  parameter_block[3] = 1; // depth\n\n  if (salt) parameter_block.set(salt, 32);\n  if (personal) parameter_block.set(personal, 48); // initialize hash state\n\n  for (var i = 0; i < 16; i++) {\n    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4);\n  } // key the hash, if applicable\n\n\n  if (key) {\n    blake2bUpdate(this, key); // at the end\n\n    this.c = 128;\n  }\n}\n\nBlake2b.prototype.update = function (input) {\n  blake2bUpdate(this, input);\n  return this;\n};\n\nBlake2b.prototype.digest = function (out) {\n  var buf = !out || out === 'binary' || out === 'hex' ? new Uint8Array(this.outlen) : out;\n  blake2bFinal(this, buf);\n  if (out === 'hex') return hexSlice(buf);\n  return buf;\n};\n\nBlake2b.prototype.final = Blake2b.prototype.digest; // Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\n\nfunction blake2bUpdate(ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n\n      blake2bCompress(ctx, false); // compress (not last)\n\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n} // Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\n\n\nfunction blake2bFinal(ctx, out) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n\n  blake2bCompress(ctx, true); // final block flag = 1\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n  }\n\n  return out;\n}\n\nfunction hexSlice(buf) {\n  var str = '';\n\n  for (var i = 0; i < buf.length; i++) {\n    str += toHex(buf[i]);\n  }\n\n  return str;\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nmodule.exports = Blake2b;","var cryptoUtils = require('./crypto/utils');\n\nmodule.exports = {\n  isValidAddress: function isValidAddress(address) {\n    if (!/^0x[0-9a-fA-F]{40}$/.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    }\n\n    if (/^0x[0-9a-f]{40}$/.test(address) || /^0x?[0-9A-F]{40}$/.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } // Otherwise check each case\n\n\n    return this.verifyChecksum(address);\n  },\n  verifyChecksum: function verifyChecksum(address) {\n    // Check each case\n    address = address.replace('0x', '');\n    var addressHash = cryptoUtils.keccak256(address.toLowerCase());\n\n    for (var i = 0; i < 40; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};","var base58 = require('./crypto/base58');\n\nvar segwit = require('./crypto/segwit_addr');\n\nvar cryptoUtils = require('./crypto/utils');\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\n\nfunction getDecoded(address) {\n  try {\n    return base58.decode(address);\n  } catch (e) {\n    // if decoding fails, assume invalid address\n    return null;\n  }\n}\n\nfunction getChecksum(hashFunction, payload) {\n  // Each currency may implement different hashing algorithm\n  switch (hashFunction) {\n    case 'blake256':\n      return cryptoUtils.blake256Checksum(payload);\n      break;\n\n    case 'sha256':\n    default:\n      return cryptoUtils.sha256Checksum(payload);\n  }\n}\n\nfunction getAddressType(address, currency) {\n  currency = currency || {}; // should be 25 bytes per btc address spec and 26 decred\n\n  var expectedLength = currency.expectedLength || 25;\n  var hashFunction = currency.hashFunction || 'sha256';\n  var decoded = getDecoded(address);\n\n  if (decoded) {\n    var length = decoded.length;\n\n    if (length !== expectedLength) {\n      return null;\n    }\n\n    var checksum = cryptoUtils.toHex(decoded.slice(length - 4, length)),\n        body = cryptoUtils.toHex(decoded.slice(0, length - 4)),\n        goodChecksum = getChecksum(hashFunction, body);\n    return checksum === goodChecksum ? cryptoUtils.toHex(decoded.slice(0, expectedLength - 24)) : null;\n  }\n\n  return null;\n}\n\nfunction isValidP2PKHandP2SHAddress(address, currency, networkType) {\n  networkType = networkType || DEFAULT_NETWORK_TYPE;\n  var correctAddressTypes;\n  var addressType = getAddressType(address, currency);\n\n  if (addressType) {\n    if (networkType === 'prod' || networkType === 'testnet') {\n      correctAddressTypes = currency.addressTypes[networkType];\n    } else {\n      correctAddressTypes = currency.addressTypes.prod.concat(currency.addressTypes.testnet);\n    }\n\n    return correctAddressTypes.indexOf(addressType) >= 0;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  isValidAddress: function isValidAddress(address, currency, networkType) {\n    return isValidP2PKHandP2SHAddress(address, currency, networkType) || segwit.isValidAddress(address, currency.segwitHrp);\n  }\n};","// Base58 encoding/decoding\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nvar ALPHABET_MAP = {};\n\nfor (var i = 0; i < ALPHABET.length; ++i) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n}\n\nvar BASE = ALPHABET.length;\nmodule.exports = {\n  decode: function decode(string) {\n    if (string.length === 0) return [];\n    var i,\n        j,\n        bytes = [0];\n\n    for (i = 0; i < string.length; ++i) {\n      var c = string[i];\n      if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');\n\n      for (j = 0; j < bytes.length; ++j) {\n        bytes[j] *= BASE;\n      }\n\n      bytes[0] += ALPHABET_MAP[c];\n      var carry = 0;\n\n      for (j = 0; j < bytes.length; ++j) {\n        bytes[j] += carry;\n        carry = bytes[j] >> 8;\n        bytes[j] &= 0xff;\n      }\n\n      while (carry) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    } // deal with leading zeros\n\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; ++i) {\n      bytes.push(0);\n    }\n\n    return bytes.reverse();\n  }\n};","// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar bech32 = require('./bech32');\n\nfunction convertbits(data, frombits, tobits, pad) {\n  var acc = 0;\n  var bits = 0;\n  var ret = [];\n  var maxv = (1 << tobits) - 1;\n\n  for (var p = 0; p < data.length; ++p) {\n    var value = data[p];\n\n    if (value < 0 || value >> frombits !== 0) {\n      return null;\n    }\n\n    acc = acc << frombits | value;\n    bits += frombits;\n\n    while (bits >= tobits) {\n      bits -= tobits;\n      ret.push(acc >> bits & maxv);\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      ret.push(acc << tobits - bits & maxv);\n    }\n  } else if (bits >= frombits || acc << tobits - bits & maxv) {\n    return null;\n  }\n\n  return ret;\n}\n\nfunction decode(hrp, addr) {\n  var dec = bech32.decode(addr);\n\n  if (dec === null || dec.hrp !== hrp || dec.data.length < 1 || dec.data[0] > 16) {\n    return null;\n  }\n\n  var res = convertbits(dec.data.slice(1), 5, 8, false);\n\n  if (res === null || res.length < 2 || res.length > 40) {\n    return null;\n  }\n\n  if (dec.data[0] === 0 && res.length !== 20 && res.length !== 32) {\n    return null;\n  }\n\n  return {\n    version: dec.data[0],\n    program: res\n  };\n}\n\nfunction encode(hrp, version, program) {\n  var ret = bech32.encode(hrp, [version].concat(convertbits(program, 8, 5, true)));\n\n  if (decode(hrp, ret) === null) {\n    return null;\n  }\n\n  return ret;\n}\n\nfunction isValidAddress(address, hrp) {\n  var hrp = hrp || 'bc';\n  var ret = decode(hrp, address);\n\n  if (ret === null) {\n    hrp = 'tb';\n    ret = decode(hrp, address);\n  }\n\n  if (ret === null) {\n    return false;\n  }\n\n  var recreate = encode(hrp, ret.version, ret.program);\n  return recreate === address.toLowerCase();\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  isValidAddress: isValidAddress\n};","// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nvar GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nmodule.exports = {\n  decode: decode,\n  encode: encode\n};\n\nfunction polymod(values) {\n  var chk = 1;\n\n  for (var p = 0; p < values.length; ++p) {\n    var top = chk >> 25;\n    chk = (chk & 0x1ffffff) << 5 ^ values[p];\n\n    for (var i = 0; i < 5; ++i) {\n      if (top >> i & 1) {\n        chk ^= GENERATOR[i];\n      }\n    }\n  }\n\n  return chk;\n}\n\nfunction hrpExpand(hrp) {\n  var ret = [];\n  var p;\n\n  for (p = 0; p < hrp.length; ++p) {\n    ret.push(hrp.charCodeAt(p) >> 5);\n  }\n\n  ret.push(0);\n\n  for (p = 0; p < hrp.length; ++p) {\n    ret.push(hrp.charCodeAt(p) & 31);\n  }\n\n  return ret;\n}\n\nfunction verifyChecksum(hrp, data) {\n  return polymod(hrpExpand(hrp).concat(data)) === 1;\n}\n\nfunction createChecksum(hrp, data) {\n  var values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n  var mod = polymod(values) ^ 1;\n  var ret = [];\n\n  for (var p = 0; p < 6; ++p) {\n    ret.push(mod >> 5 * (5 - p) & 31);\n  }\n\n  return ret;\n}\n\nfunction encode(hrp, data) {\n  var combined = data.concat(createChecksum(hrp, data));\n  var ret = hrp + '1';\n\n  for (var p = 0; p < combined.length; ++p) {\n    ret += CHARSET.charAt(combined[p]);\n  }\n\n  return ret;\n}\n\nfunction decode(bechString) {\n  var p;\n  var has_lower = false;\n  var has_upper = false;\n\n  for (p = 0; p < bechString.length; ++p) {\n    if (bechString.charCodeAt(p) < 33 || bechString.charCodeAt(p) > 126) {\n      return null;\n    }\n\n    if (bechString.charCodeAt(p) >= 97 && bechString.charCodeAt(p) <= 122) {\n      has_lower = true;\n    }\n\n    if (bechString.charCodeAt(p) >= 65 && bechString.charCodeAt(p) <= 90) {\n      has_upper = true;\n    }\n  }\n\n  if (has_lower && has_upper) {\n    return null;\n  }\n\n  bechString = bechString.toLowerCase();\n  var pos = bechString.lastIndexOf('1');\n\n  if (pos < 1 || pos + 7 > bechString.length || bechString.length > 90) {\n    return null;\n  }\n\n  var hrp = bechString.substring(0, pos);\n  var data = [];\n\n  for (p = pos + 1; p < bechString.length; ++p) {\n    var d = CHARSET.indexOf(bechString.charAt(p));\n\n    if (d === -1) {\n      return null;\n    }\n\n    data.push(d);\n  }\n\n  if (!verifyChecksum(hrp, data)) {\n    return null;\n  }\n\n  return {\n    hrp: hrp,\n    data: data.slice(0, data.length - 6)\n  };\n}","var cryptoUtils = require('./crypto/utils');\n\nvar cnBase58 = require('./crypto/cnBase58');\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\nvar addressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$');\nvar integratedAddressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$');\n\nfunction validateNetwork(decoded, currency, networkType, addressType) {\n  var network = currency.addressTypes;\n\n  if (addressType == 'integrated') {\n    network = currency.iAddressTypes;\n  }\n\n  switch (networkType) {\n    case 'prod':\n      return parseInt(decoded.substr(0, 2), 16) == network.prod[0];\n\n    case 'testnet':\n      return parseInt(decoded.substr(0, 2), 16) == network.testnet[0];\n\n    case 'both':\n      return parseInt(decoded.substr(0, 2), 16) == network.prod[0] || parseInt(decoded.substr(0, 2), 16) == network.testnet[0];\n\n    default:\n      return false;\n  }\n}\n\nfunction hextobin(hex) {\n  if (hex.length % 2 !== 0) return null;\n  var res = new Uint8Array(hex.length / 2);\n\n  for (var i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n  }\n\n  return res;\n}\n\nmodule.exports = {\n  isValidAddress: function isValidAddress(address, currency, networkType) {\n    networkType = networkType || DEFAULT_NETWORK_TYPE;\n    var addressType = 'standard';\n\n    if (!addressRegTest.test(address)) {\n      if (integratedAddressRegTest.test(address)) {\n        addressType = 'integrated';\n      } else {\n        return false;\n      }\n    }\n\n    var decodedAddrStr = cnBase58.decode(address);\n    if (!decodedAddrStr) return false;\n    if (!validateNetwork(decodedAddrStr, currency, networkType, addressType)) return false;\n    var addrChecksum = decodedAddrStr.slice(-8);\n    var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)));\n    return addrChecksum === hashChecksum;\n  }\n};","var JSBigInt = require('./biginteger')['JSBigInt'];\n/**\nCopyright (c) 2017, moneroexamples\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nParts of the project are originally copyright (c) 2014-2017, MyMonero.com\n*/\n\n\nvar cnBase58 = function () {\n  var b58 = {};\n  var alphabet_str = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n  var alphabet = [];\n\n  for (var i = 0; i < alphabet_str.length; i++) {\n    alphabet.push(alphabet_str.charCodeAt(i));\n  }\n\n  var encoded_block_sizes = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n  var alphabet_size = alphabet.length;\n  var full_block_size = 8;\n  var full_encoded_block_size = 11;\n  var UINT64_MAX = new JSBigInt(2).pow(64);\n\n  function hextobin(hex) {\n    if (hex.length % 2 !== 0) throw \"Hex string has invalid length!\";\n    var res = new Uint8Array(hex.length / 2);\n\n    for (var i = 0; i < hex.length / 2; ++i) {\n      res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n    }\n\n    return res;\n  }\n\n  function bintohex(bin) {\n    var out = [];\n\n    for (var i = 0; i < bin.length; ++i) {\n      out.push((\"0\" + bin[i].toString(16)).slice(-2));\n    }\n\n    return out.join(\"\");\n  }\n\n  function strtobin(str) {\n    var res = new Uint8Array(str.length);\n\n    for (var i = 0; i < str.length; i++) {\n      res[i] = str.charCodeAt(i);\n    }\n\n    return res;\n  }\n\n  function bintostr(bin) {\n    var out = [];\n\n    for (var i = 0; i < bin.length; i++) {\n      out.push(String.fromCharCode(bin[i]));\n    }\n\n    return out.join(\"\");\n  }\n\n  function uint8_be_to_64(data) {\n    if (data.length < 1 || data.length > 8) {\n      throw \"Invalid input length\";\n    }\n\n    var res = JSBigInt.ZERO;\n    var twopow8 = new JSBigInt(2).pow(8);\n    var i = 0;\n\n    switch (9 - data.length) {\n      case 1:\n        res = res.add(data[i++]);\n\n      case 2:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 3:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 4:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 5:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 6:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 7:\n        res = res.multiply(twopow8).add(data[i++]);\n\n      case 8:\n        res = res.multiply(twopow8).add(data[i++]);\n        break;\n\n      default:\n        throw \"Impossible condition\";\n    }\n\n    return res;\n  }\n\n  function uint64_to_8be(num, size) {\n    var res = new Uint8Array(size);\n\n    if (size < 1 || size > 8) {\n      throw \"Invalid input length\";\n    }\n\n    var twopow8 = new JSBigInt(2).pow(8);\n\n    for (var i = size - 1; i >= 0; i--) {\n      res[i] = num.remainder(twopow8).toJSValue();\n      num = num.divide(twopow8);\n    }\n\n    return res;\n  }\n\n  b58.encode_block = function (data, buf, index) {\n    if (data.length < 1 || data.length > full_encoded_block_size) {\n      throw \"Invalid block length: \" + data.length;\n    }\n\n    var num = uint8_be_to_64(data);\n    var i = encoded_block_sizes[data.length] - 1; // while num > 0\n\n    while (num.compare(0) === 1) {\n      var div = num.divRem(alphabet_size); // remainder = num % alphabet_size\n\n      var remainder = div[1]; // num = num / alphabet_size\n\n      num = div[0];\n      buf[index + i] = alphabet[remainder.toJSValue()];\n      i--;\n    }\n\n    return buf;\n  };\n\n  b58.encode = function (hex) {\n    var data = hextobin(hex);\n\n    if (data.length === 0) {\n      return \"\";\n    }\n\n    var full_block_count = Math.floor(data.length / full_block_size);\n    var last_block_size = data.length % full_block_size;\n    var res_size = full_block_count * full_encoded_block_size + encoded_block_sizes[last_block_size];\n    var res = new Uint8Array(res_size);\n    var i;\n\n    for (i = 0; i < res_size; ++i) {\n      res[i] = alphabet[0];\n    }\n\n    for (i = 0; i < full_block_count; i++) {\n      res = b58.encode_block(data.subarray(i * full_block_size, i * full_block_size + full_block_size), res, i * full_encoded_block_size);\n    }\n\n    if (last_block_size > 0) {\n      res = b58.encode_block(data.subarray(full_block_count * full_block_size, full_block_count * full_block_size + last_block_size), res, full_block_count * full_encoded_block_size);\n    }\n\n    return bintostr(res);\n  };\n\n  b58.decode_block = function (data, buf, index) {\n    if (data.length < 1 || data.length > full_encoded_block_size) {\n      throw \"Invalid block length: \" + data.length;\n    }\n\n    var res_size = encoded_block_sizes.indexOf(data.length);\n\n    if (res_size <= 0) {\n      throw \"Invalid block size\";\n    }\n\n    var res_num = new JSBigInt(0);\n    var order = new JSBigInt(1);\n\n    for (var i = data.length - 1; i >= 0; i--) {\n      var digit = alphabet.indexOf(data[i]);\n\n      if (digit < 0) {\n        throw \"Invalid symbol\";\n      }\n\n      var product = order.multiply(digit).add(res_num); // if product > UINT64_MAX\n\n      if (product.compare(UINT64_MAX) === 1) {\n        throw \"Overflow\";\n      }\n\n      res_num = product;\n      order = order.multiply(alphabet_size);\n    }\n\n    if (res_size < full_block_size && new JSBigInt(2).pow(8 * res_size).compare(res_num) <= 0) {\n      throw \"Overflow 2\";\n    }\n\n    buf.set(uint64_to_8be(res_num, res_size), index);\n    return buf;\n  };\n\n  b58.decode = function (enc) {\n    enc = strtobin(enc);\n\n    if (enc.length === 0) {\n      return \"\";\n    }\n\n    var full_block_count = Math.floor(enc.length / full_encoded_block_size);\n    var last_block_size = enc.length % full_encoded_block_size;\n    var last_block_decoded_size = encoded_block_sizes.indexOf(last_block_size);\n\n    if (last_block_decoded_size < 0) {\n      throw \"Invalid encoded length\";\n    }\n\n    var data_size = full_block_count * full_block_size + last_block_decoded_size;\n    var data = new Uint8Array(data_size);\n\n    for (var i = 0; i < full_block_count; i++) {\n      data = b58.decode_block(enc.subarray(i * full_encoded_block_size, i * full_encoded_block_size + full_encoded_block_size), data, i * full_block_size);\n    }\n\n    if (last_block_size > 0) {\n      data = b58.decode_block(enc.subarray(full_block_count * full_encoded_block_size, full_block_count * full_encoded_block_size + last_block_size), data, full_block_count * full_block_size);\n    }\n\n    return bintohex(data);\n  };\n\n  return b58;\n}();\n\nmodule.exports = cnBase58;","/*\n\tJavaScript BigInteger library version 0.9.1\n\thttp://silentmatt.com/biginteger/\n\tCopyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>\n\tCopyright (c) 2010,2011 by John Tobey <John.Tobey@gmail.com>\n\tLicensed under the MIT license.\n\tSupport for arbitrary internal representation base was added by\n\tVitaly Magerya.\n*/\n\n/*\n\tFile: biginteger.js\n\tExports:\n\t\t<BigInteger>\n*/\n(function (exports) {\n  \"use strict\";\n  /*\n      Class: BigInteger\n      An arbitrarily-large integer.\n      <BigInteger> objects should be considered immutable. None of the \"built-in\"\n      methods modify *this* or their arguments. All properties should be\n      considered private.\n      All the methods of <BigInteger> instances can be called \"statically\". The\n      static versions are convenient if you don't already have a <BigInteger>\n      object.\n      As an example, these calls are equivalent.\n      > BigInteger(4).multiply(5); // returns BigInteger(20);\n      > BigInteger.multiply(4, 5); // returns BigInteger(20);\n      > var a = 42;\n      > var a = BigInteger.toJSValue(\"0b101010\"); // Not completely useless...\n  */\n\n  var CONSTRUCT = {}; // Unique token to call \"private\" version of constructor\n\n  /*\n      Constructor: BigInteger()\n      Convert a value to a <BigInteger>.\n      Although <BigInteger()> is the constructor for <BigInteger> objects, it is\n      best not to call it as a constructor. If *n* is a <BigInteger> object, it is\n      simply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>\n      without a radix argument.\n      > var n0 = BigInteger();      // Same as <BigInteger.ZERO>\n      > var n1 = BigInteger(\"123\"); // Create a new <BigInteger> with value 123\n      > var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123\n      > var n3 = BigInteger(n2);    // Return n2, unchanged\n      The constructor form only takes an array and a sign. *n* must be an\n      array of numbers in little-endian order, where each digit is between 0\n      and BigInteger.base.  The second parameter sets the sign: -1 for\n      negative, +1 for positive, or 0 for zero. The array is *not copied and\n      may be modified*. If the array contains only zeros, the sign parameter\n      is ignored and is forced to zero.\n      > new BigInteger([5], -1): create a new BigInteger with value -5\n      Parameters:\n          n - Value to convert to a <BigInteger>.\n      Returns:\n          A <BigInteger> value.\n      See Also:\n          <parse>, <BigInteger>\n  */\n\n  function BigInteger(n, s, token) {\n    if (token !== CONSTRUCT) {\n      if (n instanceof BigInteger) {\n        return n;\n      } else if (typeof n === \"undefined\") {\n        return ZERO;\n      }\n\n      return BigInteger.parse(n);\n    }\n\n    n = n || []; // Provide the nullary constructor for subclasses.\n\n    while (n.length && !n[n.length - 1]) {\n      --n.length;\n    }\n\n    this._d = n;\n    this._s = n.length ? s || 1 : 0;\n  }\n\n  BigInteger._construct = function (n, s) {\n    return new BigInteger(n, s, CONSTRUCT);\n  }; // Base-10 speedup hacks in parse, toString, exp10 and log functions\n  // require base to be a power of 10. 10^7 is the largest such power\n  // that won't cause a precision loss when digits are multiplied.\n\n\n  var BigInteger_base = 10000000;\n  var BigInteger_base_log10 = 7;\n  BigInteger.base = BigInteger_base;\n  BigInteger.base_log10 = BigInteger_base_log10;\n  var ZERO = new BigInteger([], 0, CONSTRUCT); // Constant: ZERO\n  // <BigInteger> 0.\n\n  BigInteger.ZERO = ZERO;\n  var ONE = new BigInteger([1], 1, CONSTRUCT); // Constant: ONE\n  // <BigInteger> 1.\n\n  BigInteger.ONE = ONE;\n  var M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT); // Constant: M_ONE\n  // <BigInteger> -1.\n\n  BigInteger.M_ONE = M_ONE; // Constant: _0\n  // Shortcut for <ZERO>.\n\n  BigInteger._0 = ZERO; // Constant: _1\n  // Shortcut for <ONE>.\n\n  BigInteger._1 = ONE;\n  /*\n      Constant: small\n      Array of <BigIntegers> from 0 to 36.\n      These are used internally for parsing, but useful when you need a \"small\"\n      <BigInteger>.\n      See Also:\n          <ZERO>, <ONE>, <_0>, <_1>\n  */\n\n  BigInteger.small = [ZERO, ONE,\n  /* Assuming BigInteger_base > 36 */\n  new BigInteger([2], 1, CONSTRUCT), new BigInteger([3], 1, CONSTRUCT), new BigInteger([4], 1, CONSTRUCT), new BigInteger([5], 1, CONSTRUCT), new BigInteger([6], 1, CONSTRUCT), new BigInteger([7], 1, CONSTRUCT), new BigInteger([8], 1, CONSTRUCT), new BigInteger([9], 1, CONSTRUCT), new BigInteger([10], 1, CONSTRUCT), new BigInteger([11], 1, CONSTRUCT), new BigInteger([12], 1, CONSTRUCT), new BigInteger([13], 1, CONSTRUCT), new BigInteger([14], 1, CONSTRUCT), new BigInteger([15], 1, CONSTRUCT), new BigInteger([16], 1, CONSTRUCT), new BigInteger([17], 1, CONSTRUCT), new BigInteger([18], 1, CONSTRUCT), new BigInteger([19], 1, CONSTRUCT), new BigInteger([20], 1, CONSTRUCT), new BigInteger([21], 1, CONSTRUCT), new BigInteger([22], 1, CONSTRUCT), new BigInteger([23], 1, CONSTRUCT), new BigInteger([24], 1, CONSTRUCT), new BigInteger([25], 1, CONSTRUCT), new BigInteger([26], 1, CONSTRUCT), new BigInteger([27], 1, CONSTRUCT), new BigInteger([28], 1, CONSTRUCT), new BigInteger([29], 1, CONSTRUCT), new BigInteger([30], 1, CONSTRUCT), new BigInteger([31], 1, CONSTRUCT), new BigInteger([32], 1, CONSTRUCT), new BigInteger([33], 1, CONSTRUCT), new BigInteger([34], 1, CONSTRUCT), new BigInteger([35], 1, CONSTRUCT), new BigInteger([36], 1, CONSTRUCT)]; // Used for parsing/radix conversion\n\n  BigInteger.digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n  /*\n      Method: toString\n      Convert a <BigInteger> to a string.\n      When *base* is greater than 10, letters are upper case.\n      Parameters:\n          base - Optional base to represent the number in (default is base 10).\n                 Must be between 2 and 36 inclusive, or an Error will be thrown.\n      Returns:\n          The string representation of the <BigInteger>.\n  */\n\n  BigInteger.prototype.toString = function (base) {\n    base = +base || 10;\n\n    if (base < 2 || base > 36) {\n      throw new Error(\"illegal radix \" + base + \".\");\n    }\n\n    if (this._s === 0) {\n      return \"0\";\n    }\n\n    if (base === 10) {\n      var str = this._s < 0 ? \"-\" : \"\";\n      str += this._d[this._d.length - 1].toString();\n\n      for (var i = this._d.length - 2; i >= 0; i--) {\n        var group = this._d[i].toString();\n\n        while (group.length < BigInteger_base_log10) {\n          group = '0' + group;\n        }\n\n        str += group;\n      }\n\n      return str;\n    } else {\n      var numerals = BigInteger.digits;\n      base = BigInteger.small[base];\n      var sign = this._s;\n      var n = this.abs();\n      var digits = [];\n      var digit;\n\n      while (n._s !== 0) {\n        var divmod = n.divRem(base);\n        n = divmod[0];\n        digit = divmod[1]; // TODO: This could be changed to unshift instead of reversing at the end.\n        // Benchmark both to compare speeds.\n\n        digits.push(numerals[digit.valueOf()]);\n      }\n\n      return (sign < 0 ? \"-\" : \"\") + digits.reverse().join(\"\");\n    }\n  }; // Verify strings for parsing\n\n\n  BigInteger.radixRegex = [/^$/, /^$/, /^[01]*$/, /^[012]*$/, /^[0-3]*$/, /^[0-4]*$/, /^[0-5]*$/, /^[0-6]*$/, /^[0-7]*$/, /^[0-8]*$/, /^[0-9]*$/, /^[0-9aA]*$/, /^[0-9abAB]*$/, /^[0-9abcABC]*$/, /^[0-9a-dA-D]*$/, /^[0-9a-eA-E]*$/, /^[0-9a-fA-F]*$/, /^[0-9a-gA-G]*$/, /^[0-9a-hA-H]*$/, /^[0-9a-iA-I]*$/, /^[0-9a-jA-J]*$/, /^[0-9a-kA-K]*$/, /^[0-9a-lA-L]*$/, /^[0-9a-mA-M]*$/, /^[0-9a-nA-N]*$/, /^[0-9a-oA-O]*$/, /^[0-9a-pA-P]*$/, /^[0-9a-qA-Q]*$/, /^[0-9a-rA-R]*$/, /^[0-9a-sA-S]*$/, /^[0-9a-tA-T]*$/, /^[0-9a-uA-U]*$/, /^[0-9a-vA-V]*$/, /^[0-9a-wA-W]*$/, /^[0-9a-xA-X]*$/, /^[0-9a-yA-Y]*$/, /^[0-9a-zA-Z]*$/];\n  /*\n      Function: parse\n      Parse a string into a <BigInteger>.\n      *base* is optional but, if provided, must be from 2 to 36 inclusive. If\n      *base* is not provided, it will be guessed based on the leading characters\n      of *s* as follows:\n      - \"0x\" or \"0X\": *base* = 16\n      - \"0c\" or \"0C\": *base* = 8\n      - \"0b\" or \"0B\": *base* = 2\n      - else: *base* = 10\n      If no base is provided, or *base* is 10, the number can be in exponential\n      form. For example, these are all valid:\n      > BigInteger.parse(\"1e9\");              // Same as \"1000000000\"\n      > BigInteger.parse(\"1.234*10^3\");       // Same as 1234\n      > BigInteger.parse(\"56789 * 10 ** -2\"); // Same as 567\n      If any characters fall outside the range defined by the radix, an exception\n      will be thrown.\n      Parameters:\n          s - The string to parse.\n          base - Optional radix (default is to guess based on *s*).\n      Returns:\n          a <BigInteger> instance.\n  */\n\n  BigInteger.parse = function (s, base) {\n    // Expands a number in exponential form to decimal form.\n    // expandExponential(\"-13.441*10^5\") === \"1344100\";\n    // expandExponential(\"1.12300e-1\") === \"0.112300\";\n    // expandExponential(1000000000000000000000000000000) === \"1000000000000000000000000000000\";\n    function expandExponential(str) {\n      str = str.replace(/\\s*[*xX]\\s*10\\s*(\\^|\\*\\*)\\s*/, \"e\");\n      return str.replace(/^([+\\-])?(\\d+)\\.?(\\d*)[eE]([+\\-]?\\d+)$/, function (x, s, n, f, c) {\n        c = +c;\n        var l = c < 0;\n        var i = n.length + c;\n        x = (l ? n : f).length;\n        c = (c = Math.abs(c)) >= x ? c - x + l : 0;\n        var z = new Array(c + 1).join(\"0\");\n        var r = n + f;\n        return (s || \"\") + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? \".\" + r.substr(i) : \"\");\n      });\n    }\n\n    s = s.toString();\n\n    if (typeof base === \"undefined\" || +base === 10) {\n      s = expandExponential(s);\n    }\n\n    var prefixRE;\n\n    if (typeof base === \"undefined\") {\n      prefixRE = '0[xcb]';\n    } else if (base == 16) {\n      prefixRE = '0x';\n    } else if (base == 8) {\n      prefixRE = '0c';\n    } else if (base == 2) {\n      prefixRE = '0b';\n    } else {\n      prefixRE = '';\n    }\n\n    var parts = new RegExp('^([+\\\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\\\.\\\\d*)?$', 'i').exec(s);\n\n    if (parts) {\n      var sign = parts[1] || \"+\";\n      var baseSection = parts[2] || \"\";\n      var digits = parts[3] || \"\";\n\n      if (typeof base === \"undefined\") {\n        // Guess base\n        if (baseSection === \"0x\" || baseSection === \"0X\") {\n          // Hex\n          base = 16;\n        } else if (baseSection === \"0c\" || baseSection === \"0C\") {\n          // Octal\n          base = 8;\n        } else if (baseSection === \"0b\" || baseSection === \"0B\") {\n          // Binary\n          base = 2;\n        } else {\n          base = 10;\n        }\n      } else if (base < 2 || base > 36) {\n        throw new Error(\"Illegal radix \" + base + \".\");\n      }\n\n      base = +base; // Check for digits outside the range\n\n      if (!BigInteger.radixRegex[base].test(digits)) {\n        throw new Error(\"Bad digit for radix \" + base);\n      } // Strip leading zeros, and convert to array\n\n\n      digits = digits.replace(/^0+/, \"\").split(\"\");\n\n      if (digits.length === 0) {\n        return ZERO;\n      } // Get the sign (we know it's not zero)\n\n\n      sign = sign === \"-\" ? -1 : 1; // Optimize 10\n\n      if (base == 10) {\n        var d = [];\n\n        while (digits.length >= BigInteger_base_log10) {\n          d.push(parseInt(digits.splice(digits.length - BigInteger.base_log10, BigInteger.base_log10).join(''), 10));\n        }\n\n        d.push(parseInt(digits.join(''), 10));\n        return new BigInteger(d, sign, CONSTRUCT);\n      } // Do the conversion\n\n\n      var d = ZERO;\n      base = BigInteger.small[base];\n      var small = BigInteger.small;\n\n      for (var i = 0; i < digits.length; i++) {\n        d = d.multiply(base).add(small[parseInt(digits[i], 36)]);\n      }\n\n      return new BigInteger(d._d, sign, CONSTRUCT);\n    } else {\n      throw new Error(\"Invalid BigInteger format: \" + s);\n    }\n  };\n  /*\n      Function: add\n      Add two <BigIntegers>.\n      Parameters:\n          n - The number to add to *this*. Will be converted to a <BigInteger>.\n      Returns:\n          The numbers added together.\n      See Also:\n          <subtract>, <multiply>, <quotient>, <next>\n  */\n\n\n  BigInteger.prototype.add = function (n) {\n    if (this._s === 0) {\n      return BigInteger(n);\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return this;\n    }\n\n    if (this._s !== n._s) {\n      n = n.negate();\n      return this.subtract(n);\n    }\n\n    var a = this._d;\n    var b = n._d;\n    var al = a.length;\n    var bl = b.length;\n    var sum = new Array(Math.max(al, bl) + 1);\n    var size = Math.min(al, bl);\n    var carry = 0;\n    var digit;\n\n    for (var i = 0; i < size; i++) {\n      digit = a[i] + b[i] + carry;\n      sum[i] = digit % BigInteger_base;\n      carry = digit / BigInteger_base | 0;\n    }\n\n    if (bl > al) {\n      a = b;\n      al = bl;\n    }\n\n    for (i = size; carry && i < al; i++) {\n      digit = a[i] + carry;\n      sum[i] = digit % BigInteger_base;\n      carry = digit / BigInteger_base | 0;\n    }\n\n    if (carry) {\n      sum[i] = carry;\n    }\n\n    for (; i < al; i++) {\n      sum[i] = a[i];\n    }\n\n    return new BigInteger(sum, this._s, CONSTRUCT);\n  };\n  /*\n      Function: negate\n      Get the additive inverse of a <BigInteger>.\n      Returns:\n          A <BigInteger> with the same magnatude, but with the opposite sign.\n      See Also:\n          <abs>\n  */\n\n\n  BigInteger.prototype.negate = function () {\n    return new BigInteger(this._d, -this._s | 0, CONSTRUCT);\n  };\n  /*\n      Function: abs\n      Get the absolute value of a <BigInteger>.\n      Returns:\n          A <BigInteger> with the same magnatude, but always positive (or zero).\n      See Also:\n          <negate>\n  */\n\n\n  BigInteger.prototype.abs = function () {\n    return this._s < 0 ? this.negate() : this;\n  };\n  /*\n      Function: subtract\n      Subtract two <BigIntegers>.\n      Parameters:\n          n - The number to subtract from *this*. Will be converted to a <BigInteger>.\n      Returns:\n          The *n* subtracted from *this*.\n      See Also:\n          <add>, <multiply>, <quotient>, <prev>\n  */\n\n\n  BigInteger.prototype.subtract = function (n) {\n    if (this._s === 0) {\n      return BigInteger(n).negate();\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return this;\n    }\n\n    if (this._s !== n._s) {\n      n = n.negate();\n      return this.add(n);\n    }\n\n    var m = this; // negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|\n\n    if (this._s < 0) {\n      m = new BigInteger(n._d, 1, CONSTRUCT);\n      n = new BigInteger(this._d, 1, CONSTRUCT);\n    } // Both are positive => a - b\n\n\n    var sign = m.compareAbs(n);\n\n    if (sign === 0) {\n      return ZERO;\n    } else if (sign < 0) {\n      // swap m and n\n      var t = n;\n      n = m;\n      m = t;\n    } // a > b\n\n\n    var a = m._d;\n    var b = n._d;\n    var al = a.length;\n    var bl = b.length;\n    var diff = new Array(al); // al >= bl since a > b\n\n    var borrow = 0;\n    var i;\n    var digit;\n\n    for (i = 0; i < bl; i++) {\n      digit = a[i] - borrow - b[i];\n\n      if (digit < 0) {\n        digit += BigInteger_base;\n        borrow = 1;\n      } else {\n        borrow = 0;\n      }\n\n      diff[i] = digit;\n    }\n\n    for (i = bl; i < al; i++) {\n      digit = a[i] - borrow;\n\n      if (digit < 0) {\n        digit += BigInteger_base;\n      } else {\n        diff[i++] = digit;\n        break;\n      }\n\n      diff[i] = digit;\n    }\n\n    for (; i < al; i++) {\n      diff[i] = a[i];\n    }\n\n    return new BigInteger(diff, sign, CONSTRUCT);\n  };\n\n  (function () {\n    function addOne(n, sign) {\n      var a = n._d;\n      var sum = a.slice();\n      var carry = true;\n      var i = 0;\n\n      while (true) {\n        var digit = (a[i] || 0) + 1;\n        sum[i] = digit % BigInteger_base;\n\n        if (digit <= BigInteger_base - 1) {\n          break;\n        }\n\n        ++i;\n      }\n\n      return new BigInteger(sum, sign, CONSTRUCT);\n    }\n\n    function subtractOne(n, sign) {\n      var a = n._d;\n      var sum = a.slice();\n      var borrow = true;\n      var i = 0;\n\n      while (true) {\n        var digit = (a[i] || 0) - 1;\n\n        if (digit < 0) {\n          sum[i] = digit + BigInteger_base;\n        } else {\n          sum[i] = digit;\n          break;\n        }\n\n        ++i;\n      }\n\n      return new BigInteger(sum, sign, CONSTRUCT);\n    }\n    /*\n        Function: next\n        Get the next <BigInteger> (add one).\n        Returns:\n            *this* + 1.\n        See Also:\n            <add>, <prev>\n    */\n\n\n    BigInteger.prototype.next = function () {\n      switch (this._s) {\n        case 0:\n          return ONE;\n\n        case -1:\n          return subtractOne(this, -1);\n        // case 1:\n\n        default:\n          return addOne(this, 1);\n      }\n    };\n    /*\n        Function: prev\n        Get the previous <BigInteger> (subtract one).\n        Returns:\n            *this* - 1.\n        See Also:\n            <next>, <subtract>\n    */\n\n\n    BigInteger.prototype.prev = function () {\n      switch (this._s) {\n        case 0:\n          return M_ONE;\n\n        case -1:\n          return addOne(this, -1);\n        // case 1:\n\n        default:\n          return subtractOne(this, 1);\n      }\n    };\n  })();\n  /*\n      Function: compareAbs\n      Compare the absolute value of two <BigIntegers>.\n      Calling <compareAbs> is faster than calling <abs> twice, then <compare>.\n      Parameters:\n          n - The number to compare to *this*. Will be converted to a <BigInteger>.\n      Returns:\n          -1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.\n      See Also:\n          <compare>, <abs>\n  */\n\n\n  BigInteger.prototype.compareAbs = function (n) {\n    if (this === n) {\n      return 0;\n    }\n\n    if (!(n instanceof BigInteger)) {\n      if (!isFinite(n)) {\n        return isNaN(n) ? n : -1;\n      }\n\n      n = BigInteger(n);\n    }\n\n    if (this._s === 0) {\n      return n._s !== 0 ? -1 : 0;\n    }\n\n    if (n._s === 0) {\n      return 1;\n    }\n\n    var l = this._d.length;\n    var nl = n._d.length;\n\n    if (l < nl) {\n      return -1;\n    } else if (l > nl) {\n      return 1;\n    }\n\n    var a = this._d;\n    var b = n._d;\n\n    for (var i = l - 1; i >= 0; i--) {\n      if (a[i] !== b[i]) {\n        return a[i] < b[i] ? -1 : 1;\n      }\n    }\n\n    return 0;\n  };\n  /*\n      Function: compare\n      Compare two <BigIntegers>.\n      Parameters:\n          n - The number to compare to *this*. Will be converted to a <BigInteger>.\n      Returns:\n          -1, 0, or +1 if *this* is less than, equal to, or greater than *n*.\n      See Also:\n          <compareAbs>, <isPositive>, <isNegative>, <isUnit>\n  */\n\n\n  BigInteger.prototype.compare = function (n) {\n    if (this === n) {\n      return 0;\n    }\n\n    n = BigInteger(n);\n\n    if (this._s === 0) {\n      return -n._s;\n    }\n\n    if (this._s === n._s) {\n      // both positive or both negative\n      var cmp = this.compareAbs(n);\n      return cmp * this._s;\n    } else {\n      return this._s;\n    }\n  };\n  /*\n      Function: isUnit\n      Return true iff *this* is either 1 or -1.\n      Returns:\n          true if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.\n      See Also:\n          <isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,\n          <BigInteger.ONE>, <BigInteger.M_ONE>\n  */\n\n\n  BigInteger.prototype.isUnit = function () {\n    return this === ONE || this === M_ONE || this._d.length === 1 && this._d[0] === 1;\n  };\n  /*\n      Function: multiply\n      Multiply two <BigIntegers>.\n      Parameters:\n          n - The number to multiply *this* by. Will be converted to a\n          <BigInteger>.\n      Returns:\n          The numbers multiplied together.\n      See Also:\n          <add>, <subtract>, <quotient>, <square>\n  */\n\n\n  BigInteger.prototype.multiply = function (n) {\n    // TODO: Consider adding Karatsuba multiplication for large numbers\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return ZERO;\n    }\n\n    if (this.isUnit()) {\n      if (this._s < 0) {\n        return n.negate();\n      }\n\n      return n;\n    }\n\n    if (n.isUnit()) {\n      if (n._s < 0) {\n        return this.negate();\n      }\n\n      return this;\n    }\n\n    if (this === n) {\n      return this.square();\n    }\n\n    var r = this._d.length >= n._d.length;\n    var a = (r ? this : n)._d; // a will be longer than b\n\n    var b = (r ? n : this)._d;\n    var al = a.length;\n    var bl = b.length;\n    var pl = al + bl;\n    var partial = new Array(pl);\n    var i;\n\n    for (i = 0; i < pl; i++) {\n      partial[i] = 0;\n    }\n\n    for (i = 0; i < bl; i++) {\n      var carry = 0;\n      var bi = b[i];\n      var jlimit = al + i;\n      var digit;\n\n      for (var j = i; j < jlimit; j++) {\n        digit = partial[j] + bi * a[j - i] + carry;\n        carry = digit / BigInteger_base | 0;\n        partial[j] = digit % BigInteger_base | 0;\n      }\n\n      if (carry) {\n        digit = partial[j] + carry;\n        carry = digit / BigInteger_base | 0;\n        partial[j] = digit % BigInteger_base;\n      }\n    }\n\n    return new BigInteger(partial, this._s * n._s, CONSTRUCT);\n  }; // Multiply a BigInteger by a single-digit native number\n  // Assumes that this and n are >= 0\n  // This is not really intended to be used outside the library itself\n\n\n  BigInteger.prototype.multiplySingleDigit = function (n) {\n    if (n === 0 || this._s === 0) {\n      return ZERO;\n    }\n\n    if (n === 1) {\n      return this;\n    }\n\n    var digit;\n\n    if (this._d.length === 1) {\n      digit = this._d[0] * n;\n\n      if (digit >= BigInteger_base) {\n        return new BigInteger([digit % BigInteger_base | 0, digit / BigInteger_base | 0], 1, CONSTRUCT);\n      }\n\n      return new BigInteger([digit], 1, CONSTRUCT);\n    }\n\n    if (n === 2) {\n      return this.add(this);\n    }\n\n    if (this.isUnit()) {\n      return new BigInteger([n], 1, CONSTRUCT);\n    }\n\n    var a = this._d;\n    var al = a.length;\n    var pl = al + 1;\n    var partial = new Array(pl);\n\n    for (var i = 0; i < pl; i++) {\n      partial[i] = 0;\n    }\n\n    var carry = 0;\n\n    for (var j = 0; j < al; j++) {\n      digit = n * a[j] + carry;\n      carry = digit / BigInteger_base | 0;\n      partial[j] = digit % BigInteger_base | 0;\n    }\n\n    if (carry) {\n      partial[j] = carry;\n    }\n\n    return new BigInteger(partial, 1, CONSTRUCT);\n  };\n  /*\n      Function: square\n      Multiply a <BigInteger> by itself.\n      This is slightly faster than regular multiplication, since it removes the\n      duplicated multiplcations.\n      Returns:\n          > this.multiply(this)\n      See Also:\n          <multiply>\n  */\n\n\n  BigInteger.prototype.square = function () {\n    // Normally, squaring a 10-digit number would take 100 multiplications.\n    // Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.\n    // This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).\n    // Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    if (this.isUnit()) {\n      return ONE;\n    }\n\n    var digits = this._d;\n    var length = digits.length;\n    var imult1 = new Array(length + length + 1);\n    var product, carry, k;\n    var i; // Calculate diagonal\n\n    for (i = 0; i < length; i++) {\n      k = i * 2;\n      product = digits[i] * digits[i];\n      carry = product / BigInteger_base | 0;\n      imult1[k] = product % BigInteger_base;\n      imult1[k + 1] = carry;\n    } // Calculate repeating part\n\n\n    for (i = 0; i < length; i++) {\n      carry = 0;\n      k = i * 2 + 1;\n\n      for (var j = i + 1; j < length; j++, k++) {\n        product = digits[j] * digits[i] * 2 + imult1[k] + carry;\n        carry = product / BigInteger_base | 0;\n        imult1[k] = product % BigInteger_base;\n      }\n\n      k = length + i;\n      var digit = carry + imult1[k];\n      carry = digit / BigInteger_base | 0;\n      imult1[k] = digit % BigInteger_base;\n      imult1[k + 1] += carry;\n    }\n\n    return new BigInteger(imult1, 1, CONSTRUCT);\n  };\n  /*\n      Function: quotient\n      Divide two <BigIntegers> and truncate towards zero.\n      <quotient> throws an exception if *n* is zero.\n      Parameters:\n          n - The number to divide *this* by. Will be converted to a <BigInteger>.\n      Returns:\n          The *this* / *n*, truncated to an integer.\n      See Also:\n          <add>, <subtract>, <multiply>, <divRem>, <remainder>\n  */\n\n\n  BigInteger.prototype.quotient = function (n) {\n    return this.divRem(n)[0];\n  };\n  /*\n      Function: divide\n      Deprecated synonym for <quotient>.\n  */\n\n\n  BigInteger.prototype.divide = BigInteger.prototype.quotient;\n  /*\n      Function: remainder\n      Calculate the remainder of two <BigIntegers>.\n      <remainder> throws an exception if *n* is zero.\n      Parameters:\n          n - The remainder after *this* is divided *this* by *n*. Will be\n              converted to a <BigInteger>.\n      Returns:\n          *this* % *n*.\n      See Also:\n          <divRem>, <quotient>\n  */\n\n  BigInteger.prototype.remainder = function (n) {\n    return this.divRem(n)[1];\n  };\n  /*\n      Function: divRem\n      Calculate the integer quotient and remainder of two <BigIntegers>.\n      <divRem> throws an exception if *n* is zero.\n      Parameters:\n          n - The number to divide *this* by. Will be converted to a <BigInteger>.\n      Returns:\n          A two-element array containing the quotient and the remainder.\n          > a.divRem(b)\n          is exactly equivalent to\n          > [a.quotient(b), a.remainder(b)]\n          except it is faster, because they are calculated at the same time.\n      See Also:\n          <quotient>, <remainder>\n  */\n\n\n  BigInteger.prototype.divRem = function (n) {\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      throw new Error(\"Divide by zero\");\n    }\n\n    if (this._s === 0) {\n      return [ZERO, ZERO];\n    }\n\n    if (n._d.length === 1) {\n      return this.divRemSmall(n._s * n._d[0]);\n    } // Test for easy cases -- |n1| <= |n2|\n\n\n    switch (this.compareAbs(n)) {\n      case 0:\n        // n1 == n2\n        return [this._s === n._s ? ONE : M_ONE, ZERO];\n\n      case -1:\n        // |n1| < |n2|\n        return [ZERO, this];\n    }\n\n    var sign = this._s * n._s;\n    var a = n.abs();\n    var b_digits = this._d;\n    var b_index = b_digits.length;\n    var digits = n._d.length;\n    var quot = [];\n    var guess;\n    var part = new BigInteger([], 0, CONSTRUCT);\n\n    while (b_index) {\n      part._d.unshift(b_digits[--b_index]);\n\n      part = new BigInteger(part._d, 1, CONSTRUCT);\n\n      if (part.compareAbs(n) < 0) {\n        quot.push(0);\n        continue;\n      }\n\n      if (part._s === 0) {\n        guess = 0;\n      } else {\n        var xlen = part._d.length,\n            ylen = a._d.length;\n        var highx = part._d[xlen - 1] * BigInteger_base + part._d[xlen - 2];\n        var highy = a._d[ylen - 1] * BigInteger_base + a._d[ylen - 2];\n\n        if (part._d.length > a._d.length) {\n          // The length of part._d can either match a._d length,\n          // or exceed it by one.\n          highx = (highx + 1) * BigInteger_base;\n        }\n\n        guess = Math.ceil(highx / highy);\n      }\n\n      do {\n        var check = a.multiplySingleDigit(guess);\n\n        if (check.compareAbs(part) <= 0) {\n          break;\n        }\n\n        guess--;\n      } while (guess);\n\n      quot.push(guess);\n\n      if (!guess) {\n        continue;\n      }\n\n      var diff = part.subtract(check);\n      part._d = diff._d.slice();\n    }\n\n    return [new BigInteger(quot.reverse(), sign, CONSTRUCT), new BigInteger(part._d, this._s, CONSTRUCT)];\n  }; // Throws an exception if n is outside of (-BigInteger.base, -1] or\n  // [1, BigInteger.base).  It's not necessary to call this, since the\n  // other division functions will call it if they are able to.\n\n\n  BigInteger.prototype.divRemSmall = function (n) {\n    var r;\n    n = +n;\n\n    if (n === 0) {\n      throw new Error(\"Divide by zero\");\n    }\n\n    var n_s = n < 0 ? -1 : 1;\n    var sign = this._s * n_s;\n    n = Math.abs(n);\n\n    if (n < 1 || n >= BigInteger_base) {\n      throw new Error(\"Argument out of range\");\n    }\n\n    if (this._s === 0) {\n      return [ZERO, ZERO];\n    }\n\n    if (n === 1 || n === -1) {\n      return [sign === 1 ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO];\n    } // 2 <= n < BigInteger_base\n    // divide a single digit by a single digit\n\n\n    if (this._d.length === 1) {\n      var q = new BigInteger([this._d[0] / n | 0], 1, CONSTRUCT);\n      r = new BigInteger([this._d[0] % n | 0], 1, CONSTRUCT);\n\n      if (sign < 0) {\n        q = q.negate();\n      }\n\n      if (this._s < 0) {\n        r = r.negate();\n      }\n\n      return [q, r];\n    }\n\n    var digits = this._d.slice();\n\n    var quot = new Array(digits.length);\n    var part = 0;\n    var diff = 0;\n    var i = 0;\n    var guess;\n\n    while (digits.length) {\n      part = part * BigInteger_base + digits[digits.length - 1];\n\n      if (part < n) {\n        quot[i++] = 0;\n        digits.pop();\n        diff = BigInteger_base * diff + part;\n        continue;\n      }\n\n      if (part === 0) {\n        guess = 0;\n      } else {\n        guess = part / n | 0;\n      }\n\n      var check = n * guess;\n      diff = part - check;\n      quot[i++] = guess;\n\n      if (!guess) {\n        digits.pop();\n        continue;\n      }\n\n      digits.pop();\n      part = diff;\n    }\n\n    r = new BigInteger([diff], 1, CONSTRUCT);\n\n    if (this._s < 0) {\n      r = r.negate();\n    }\n\n    return [new BigInteger(quot.reverse(), sign, CONSTRUCT), r];\n  };\n  /*\n      Function: isEven\n      Return true iff *this* is divisible by two.\n      Note that <BigInteger.ZERO> is even.\n      Returns:\n          true if *this* is even, false otherwise.\n      See Also:\n          <isOdd>\n  */\n\n\n  BigInteger.prototype.isEven = function () {\n    var digits = this._d;\n    return this._s === 0 || digits.length === 0 || digits[0] % 2 === 0;\n  };\n  /*\n      Function: isOdd\n      Return true iff *this* is not divisible by two.\n      Returns:\n          true if *this* is odd, false otherwise.\n      See Also:\n          <isEven>\n  */\n\n\n  BigInteger.prototype.isOdd = function () {\n    return !this.isEven();\n  };\n  /*\n      Function: sign\n      Get the sign of a <BigInteger>.\n      Returns:\n          * -1 if *this* < 0\n          * 0 if *this* == 0\n          * +1 if *this* > 0\n      See Also:\n          <isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.sign = function () {\n    return this._s;\n  };\n  /*\n      Function: isPositive\n      Return true iff *this* > 0.\n      Returns:\n          true if *this*.compare(<BigInteger.ZERO>) == 1.\n      See Also:\n          <sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.isPositive = function () {\n    return this._s > 0;\n  };\n  /*\n      Function: isNegative\n      Return true iff *this* < 0.\n      Returns:\n          true if *this*.compare(<BigInteger.ZERO>) == -1.\n      See Also:\n          <sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.isNegative = function () {\n    return this._s < 0;\n  };\n  /*\n      Function: isZero\n      Return true iff *this* == 0.\n      Returns:\n          true if *this*.compare(<BigInteger.ZERO>) == 0.\n      See Also:\n          <sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>\n  */\n\n\n  BigInteger.prototype.isZero = function () {\n    return this._s === 0;\n  };\n  /*\n      Function: exp10\n      Multiply a <BigInteger> by a power of 10.\n      This is equivalent to, but faster than\n      > if (n >= 0) {\n      >     return this.multiply(BigInteger(\"1e\" + n));\n      > }\n      > else { // n <= 0\n      >     return this.quotient(BigInteger(\"1e\" + -n));\n      > }\n      Parameters:\n          n - The power of 10 to multiply *this* by. *n* is converted to a\n          javascipt number and must be no greater than <BigInteger.MAX_EXP>\n          (0x7FFFFFFF), or an exception will be thrown.\n      Returns:\n          *this* * (10 ** *n*), truncated to an integer if necessary.\n      See Also:\n          <pow>, <multiply>\n  */\n\n\n  BigInteger.prototype.exp10 = function (n) {\n    n = +n;\n\n    if (n === 0) {\n      return this;\n    }\n\n    if (Math.abs(n) > Number(MAX_EXP)) {\n      throw new Error(\"exponent too large in BigInteger.exp10\");\n    } // Optimization for this == 0. This also keeps us from having to trim zeros in the positive n case\n\n\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    if (n > 0) {\n      var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n\n      for (; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n        k._d.unshift(0);\n      }\n\n      if (n == 0) return k;\n      k._s = 1;\n      k = k.multiplySingleDigit(Math.pow(10, n));\n      return this._s < 0 ? k.negate() : k;\n    } else if (-n >= this._d.length * BigInteger_base_log10) {\n      return ZERO;\n    } else {\n      var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n\n      for (n = -n; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n        k._d.shift();\n      }\n\n      return n == 0 ? k : k.divRemSmall(Math.pow(10, n))[0];\n    }\n  };\n  /*\n      Function: pow\n      Raise a <BigInteger> to a power.\n      In this implementation, 0**0 is 1.\n      Parameters:\n          n - The exponent to raise *this* by. *n* must be no greater than\n          <BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.\n      Returns:\n          *this* raised to the *nth* power.\n      See Also:\n          <modPow>\n  */\n\n\n  BigInteger.prototype.pow = function (n) {\n    if (this.isUnit()) {\n      if (this._s > 0) {\n        return this;\n      } else {\n        return BigInteger(n).isOdd() ? this : this.negate();\n      }\n    }\n\n    n = BigInteger(n);\n\n    if (n._s === 0) {\n      return ONE;\n    } else if (n._s < 0) {\n      if (this._s === 0) {\n        throw new Error(\"Divide by zero\");\n      } else {\n        return ZERO;\n      }\n    }\n\n    if (this._s === 0) {\n      return ZERO;\n    }\n\n    if (n.isUnit()) {\n      return this;\n    }\n\n    if (n.compareAbs(MAX_EXP) > 0) {\n      throw new Error(\"exponent too large in BigInteger.pow\");\n    }\n\n    var x = this;\n    var aux = ONE;\n    var two = BigInteger.small[2];\n\n    while (n.isPositive()) {\n      if (n.isOdd()) {\n        aux = aux.multiply(x);\n\n        if (n.isUnit()) {\n          return aux;\n        }\n      }\n\n      x = x.square();\n      n = n.quotient(two);\n    }\n\n    return aux;\n  };\n  /*\n      Function: modPow\n      Raise a <BigInteger> to a power (mod m).\n      Because it is reduced by a modulus, <modPow> is not limited by\n      <BigInteger.MAX_EXP> like <pow>.\n      Parameters:\n          exponent - The exponent to raise *this* by. Must be positive.\n          modulus - The modulus.\n      Returns:\n          *this* ^ *exponent* (mod *modulus*).\n      See Also:\n          <pow>, <mod>\n  */\n\n\n  BigInteger.prototype.modPow = function (exponent, modulus) {\n    var result = ONE;\n    var base = this;\n\n    while (exponent.isPositive()) {\n      if (exponent.isOdd()) {\n        result = result.multiply(base).remainder(modulus);\n      }\n\n      exponent = exponent.quotient(BigInteger.small[2]);\n\n      if (exponent.isPositive()) {\n        base = base.square().remainder(modulus);\n      }\n    }\n\n    return result;\n  };\n  /*\n      Function: log\n      Get the natural logarithm of a <BigInteger> as a native JavaScript number.\n      This is equivalent to\n      > Math.log(this.toJSValue())\n      but handles values outside of the native number range.\n      Returns:\n          log( *this* )\n      See Also:\n          <toJSValue>\n  */\n\n\n  BigInteger.prototype.log = function () {\n    switch (this._s) {\n      case 0:\n        return -Infinity;\n\n      case -1:\n        return NaN;\n\n      default: // Fall through.\n\n    }\n\n    var l = this._d.length;\n\n    if (l * BigInteger_base_log10 < 30) {\n      return Math.log(this.valueOf());\n    }\n\n    var N = Math.ceil(30 / BigInteger_base_log10);\n\n    var firstNdigits = this._d.slice(l - N);\n\n    return Math.log(new BigInteger(firstNdigits, 1, CONSTRUCT).valueOf()) + (l - N) * Math.log(BigInteger_base);\n  };\n  /*\n      Function: valueOf\n      Convert a <BigInteger> to a native JavaScript integer.\n      This is called automatically by JavaScipt to convert a <BigInteger> to a\n      native value.\n      Returns:\n          > parseInt(this.toString(), 10)\n      See Also:\n          <toString>, <toJSValue>\n  */\n\n\n  BigInteger.prototype.valueOf = function () {\n    return parseInt(this.toString(), 10);\n  };\n  /*\n      Function: toJSValue\n      Convert a <BigInteger> to a native JavaScript integer.\n      This is the same as valueOf, but more explicitly named.\n      Returns:\n          > parseInt(this.toString(), 10)\n      See Also:\n          <toString>, <valueOf>\n  */\n\n\n  BigInteger.prototype.toJSValue = function () {\n    return parseInt(this.toString(), 10);\n  };\n  /*\n   Function: lowVal\n   Author: Lucas Jones\n   */\n\n\n  BigInteger.prototype.lowVal = function () {\n    return this._d[0] || 0;\n  };\n\n  var MAX_EXP = BigInteger(0x7FFFFFFF); // Constant: MAX_EXP\n  // The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).\n\n  BigInteger.MAX_EXP = MAX_EXP;\n\n  (function () {\n    function makeUnary(fn) {\n      return function (a) {\n        return fn.call(BigInteger(a));\n      };\n    }\n\n    function makeBinary(fn) {\n      return function (a, b) {\n        return fn.call(BigInteger(a), BigInteger(b));\n      };\n    }\n\n    function makeTrinary(fn) {\n      return function (a, b, c) {\n        return fn.call(BigInteger(a), BigInteger(b), BigInteger(c));\n      };\n    }\n\n    (function () {\n      var i, fn;\n      var unary = \"toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log\".split(\",\");\n      var binary = \"compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs\".split(\",\");\n      var trinary = [\"modPow\"];\n\n      for (i = 0; i < unary.length; i++) {\n        fn = unary[i];\n        BigInteger[fn] = makeUnary(BigInteger.prototype[fn]);\n      }\n\n      for (i = 0; i < binary.length; i++) {\n        fn = binary[i];\n        BigInteger[fn] = makeBinary(BigInteger.prototype[fn]);\n      }\n\n      for (i = 0; i < trinary.length; i++) {\n        fn = trinary[i];\n        BigInteger[fn] = makeTrinary(BigInteger.prototype[fn]);\n      }\n\n      BigInteger.exp10 = function (x, n) {\n        return BigInteger(x).exp10(n);\n      };\n    })();\n  })();\n\n  exports.JSBigInt = BigInteger; // exports.BigInteger changed to exports.JSBigInt\n})(typeof exports !== 'undefined' ? exports : this);","var cryptoUtils = require('./crypto/utils');\n\nvar baseX = require('base-x');\n\nvar ALLOWED_CHARS = '13456789abcdefghijkmnopqrstuwxyz';\nvar codec = baseX(ALLOWED_CHARS); // https://github.com/nanocurrency/raiblocks/wiki/Accounts,-Keys,-Seeds,-and-Wallet-Identifiers\n\nvar regexp = new RegExp('^(xrb|nano)_([' + ALLOWED_CHARS + ']{60})$');\nmodule.exports = {\n  isValidAddress: function isValidAddress(address) {\n    if (regexp.test(address)) {\n      return this.verifyChecksum(address);\n    }\n\n    return false;\n  },\n  verifyChecksum: function verifyChecksum(address) {\n    var bytes = codec.decode(regexp.exec(address)[2]).slice(-37); // https://github.com/nanocurrency/raiblocks/blob/master/rai/lib/numbers.cpp#L73\n\n    var computedChecksum = cryptoUtils.blake2b(cryptoUtils.toHex(bytes.slice(0, -5)), 5);\n    var checksum = cryptoUtils.toHex(bytes.slice(-5).reverse());\n    return computedChecksum === checksum;\n  }\n};","var currencies = require('./currencies');\n\nvar DEFAULT_CURRENCY_NAME = 'bitcoin';\nmodule.exports = {\n  validate: function validate(address, currencyNameOrSymbol, networkType) {\n    var currency = currencies.getByNameOrSymbol(currencyNameOrSymbol || DEFAULT_CURRENCY_NAME);\n\n    if (currency.validator) {\n      return currency.validator.isValidAddress(address, currency, networkType);\n    }\n\n    throw new Error('Missing validator for currency: ' + currencyNameOrSymbol);\n  }\n};"],"sourceRoot":""}