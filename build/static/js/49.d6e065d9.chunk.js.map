{"version":3,"sources":["components/sockets/sockets.js"],"names":["SocketUrl","Environtment","SocketsComponent","state","currentSwap","currentDeposit","currentWithdraw","isUpdated","withdraw_account_mangagement","_callee","withdrawAccount","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","_this","props","withdraw_accounts","id","abrupt","action","update_item_state","Object","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","toastMessage","success_sound","stop","withdraw_mangagement","_callee2","withdraw","cWithdraw","new_withdraw_model","new_withdraw","withdraw_account","_context2","proof","withdraws","coinsendaServices","getOrderById","sent","get_withdraws","account_id","setState","updateActivityState","addNotification","order_id","isModalActive","isRenderModalActive","socket_notify","toggleOtherModal","currency_type","addUpdateWithdraw","isAppLoading","addItemToState","manageBalance","amount","add_new_transaction_animation","history","push","concat","withdraw_account_id","used_counter","inscribed","deposit_mangagement","_callee4","deposit","cDeposit","_cDeposit","_cDeposit2","_context4","type_order","deposits","getDepositById","activity_for_account","get_deposits","wallets","count","setTimeout","add_coin_sound","confirmations","getWalletsByUser","renderModal","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","mark","_callee3","_context3","exit_sound","swap_management","_callee9","swap","new_swap","_context9","activeTrade","account_from","_callee5","_context5","swaps","bought","ticket_rejected","_callee6","_context6","_callee8","_context8","_callee7","_context7","spent","account_to","status","ticket_canceled","status_management","_callee10","_context10","updateUserStatus","prevProps","_this2","this","loggedIn","socket","io","user","tryReconnect","connected","connect","intervalID","setInterval","on","_callee11","_context11","clearInterval","body","access_token","userToken","emit","_ref12","_callee12","_context12","_x6","apply","arguments","_ref13","_callee13","_context13","_x7","_ref14","_callee14","_context14","_x8","_ref15","_callee15","_context15","currentWithdrawAccount","_x9","_ref16","_callee16","_context16","countries","_x10","Component","withRouter","auth","_state$modelData","modelData","ui","storage","otherModal","modal","render","dispatch","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/49.d6e065d9.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../actions\";\nimport io from \"socket.io-client\";\nimport Environtment from \"../../environment\";\n// import { objectToArray } from '../../services'\nimport { withRouter } from \"react-router\";\nimport withCoinsendaServices from \"../withCoinsendaServices\";\nconst { SocketUrl } = Environtment;\n\nclass SocketsComponent extends Component {\n  state = {\n    currentSwap: null,\n    currentDeposit: null,\n    currentWithdraw: null,\n    isUpdated: false,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (!this.state.isUpdated || this.props.loggedIn !== prevProps.loggedIn) {\n      this.setState({\n        isUpdated: true,\n      });\n      if (this.props.loggedIn) {\n        const socket = io(SocketUrl);\n        const { user } = this.props;\n\n        let tryReconnect = () => {\n          if (socket.connected === false) {\n            socket.connect();\n          }\n        };\n\n        let intervalID = setInterval(tryReconnect, 2000);\n        socket.on(\"disconnect\", async function () {\n          intervalID = setInterval(tryReconnect, 2000);\n        });\n\n        socket.on(\"connect\", () => {\n          clearInterval(intervalID);\n          const body = { body: { access_token: user.userToken } };\n          socket.emit(\"authentication\", body);\n\n          socket.on(\"authenticated\", () => {\n            socket.on(`/swap/${user.id}`, async (swap) => {\n              if (swap.state === \"pending\") {\n                await this.setState({ currentSwap: swap });\n              }\n              this.swap_management(swap);\n            });\n\n\n            socket.on(`/deposit/${user.id}`, async (deposit) => {\n              if (\n                deposit.state === \"pending\" &&\n                deposit.currency_type === \"crypto\"\n              ) {\n                await this.setState({ currentDeposit: deposit });\n              } else {\n                this.deposit_mangagement(deposit);\n              }\n\n              // if(deposit.state === 'rejected' || deposit.state === 'canceled'){\n              //   this.deposit_mangagement(deposit)\n              // }\n            });\n\n            socket.on(`/withdraw/${user.id}`, async (withdraw) => {\n              if (withdraw.state === \"pending\") {\n                await this.setState({ currentWithdraw: withdraw });\n              }\n              this.withdraw_mangagement(withdraw);\n            });\n\n            socket.on(`/withdrawAccount/${user.id}`, async (withdrawAccount) => {\n              if (withdrawAccount.state === \"pending\") {\n                await this.setState({currentWithdrawAccount: withdrawAccount });\n              }\n              this.withdraw_account_mangagement(withdrawAccount);\n            });\n\n\n            socket.on(`/status/${user.id}`, async (status) => {\n              if(status.countries){\n                this.status_management(status)\n              }\n            });\n\n          });\n        });\n      }\n    }\n  }\n\n\n\n\n\n  withdraw_account_mangagement = async(withdrawAccount) => {\n\n\n      if(!this.props.withdraw_accounts[withdrawAccount.id]){return}\n\n      if(withdrawAccount.state === 'in_progress' || withdrawAccount.state === 'complete' || withdrawAccount.state === 'rejected'){\n        this.props.action.update_item_state({\n          [withdrawAccount.id]: {\n            ...this.props.withdraw_accounts[withdrawAccount.id],\n            ...withdrawAccount\n          }\n        }, \"withdraw_accounts\");\n\n        if(withdrawAccount.state === 'complete'){\n          this.props.toastMessage(\"Nueva cuenta de retiro inscrita\", \"success\");\n          this.props.action.success_sound();\n        }\n\n      }\n\n  }\n\n  withdraw_mangagement = async (withdraw) => {\n    // console.log('||||||||||||||||||||||| withdraw socket console ::', withdraw)\n\n    if (withdraw.proof) {\n      if (\n        !this.props.withdraws ||\n        (this.props.withdraws && !this.props.withdraws[withdraw.id])\n      ) {\n        // Si no hay ordenes de retiro, ó si las hay, pero no está este retiro dentro de las ordenes disponibles en el estado\n        let cWithdraw = await this.props.coinsendaServices.getOrderById(\n          withdraw.id,\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.get_withdraws(cWithdraw.account_id);\n        // entonces consulte las ultimas ordenes de retiro de esta cuenta y actualiza el estado\n        await this.setState({ currentWithdraw: cWithdraw });\n      }\n      // Teniendo la orden de retiro en el estado, agrégue la prueba de pago y actualice el estado a: \"aceptado\" en el modelo de la orden de retiro\n      if (this.props.withdraws && this.props.withdraws[withdraw.id]) {\n        await this.props.action.update_item_state(\n          {\n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              proof: withdraw.proof,\n              sent: true,\n              state: \"accepted\",\n            },\n          },\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.withdraws[withdraw.id].account_id,\n            order_id: withdraw.id,\n          },\n          1\n        );\n        // this.props.coinsendaServices.showNotification('Retiro exitoso', 'Retiro enviado con éxito')\n        this.props.action.success_sound();\n        if (!this.props.isModalActive && !this.props.isRenderModalActive) {\n          await this.props.action.socket_notify(\n            this.props.withdraws[withdraw.id],\n            \"withdraws\"\n          );\n          this.props.action.toggleOtherModal();\n        }\n      }\n    }\n\n    if (withdraw.state === \"pending\" && withdraw.currency_type === \"crypto\") {\n      // Las ordenes de retiro cripto en estado pendiente se deben de confirmar vía api\n      let res = await this.props.coinsendaServices.addUpdateWithdraw(\n        withdraw.id,\n        \"confirmed\"\n      );\n      if (!res) {\n        this.props.action.isAppLoading(false);\n        return this.props.toastMessage(\n          \"No se ha podido crear la orden de retiro\",\n          \"error\"\n        );\n      }\n    }\n\n    const { currentWithdraw } = this.state;\n    // console.log('|||||||||||||||||||||||||||||||||||  Withdraw SOCKET ==>', withdraw.state, ' == ', withdraw.id, ' ==> ', currentWithdraw)\n\n    if (\n      withdraw.state === \"confirmed\" &&\n      currentWithdraw.currency_type === \"crypto\"\n    ) {\n      // Añade esta orden de retiro crypto confirmado al estado\n      // actualiza la actividad de la cuenta a la que corresponde este retiro y actualiza el balance\n      let new_withdraw_model = {\n        id: currentWithdraw.id,\n        account_id: currentWithdraw.account_id,\n        ...currentWithdraw,\n        state: \"confirmed\",\n      };\n      await this.props.coinsendaServices.addItemToState(\n        \"withdraws\",\n        new_withdraw_model\n      );\n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw_model.account_id,\n        \"withdraws\"\n      );\n      await this.props.coinsendaServices.manageBalance(\n        new_withdraw_model.account_id,\n        \"reduce\",\n        new_withdraw_model.amount\n      );\n      await this.props.action.isAppLoading(false);\n      this.props.action.add_new_transaction_animation();\n      // this.props.coinsendaServices.getWalletsByUser(true)\n      this.props.history.push(\n        `/wallets/activity/${new_withdraw_model.account_id}/withdraws`\n      );\n    }\n\n    if (\n      withdraw.state === \"accepted\" &&\n      currentWithdraw.currency_type === \"fiat\"\n    ) {\n      let new_withdraw = this.state.currentWithdraw;\n      await this.props.coinsendaServices.addItemToState(\"withdraws\", {\n        ...new_withdraw,\n        state: \"confirmed\",\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw.account_id,\n        \"withdraws\"\n      );\n      this.props.action.add_new_transaction_animation();\n      // alert('withdraw accepted')\n      //update used_counter of withdraw account relation\n\n      if (this.props.withdraw_accounts[currentWithdraw.withdraw_account_id]) {\n        let withdraw_account = this.props.withdraw_accounts[\n          currentWithdraw.withdraw_account_id\n        ];\n        //actualiza el movimiento operacional de la cuenta de retiro\n        this.props.action.update_item_state(\n          {\n            [currentWithdraw.withdraw_account_id]: {\n              ...withdraw_account,\n              used_counter: ++withdraw_account.used_counter,\n              inscribed: true,\n            },\n          },\n          \"withdraw_accounts\"\n        );\n      }\n    }\n\n    // if(withdraw.metadata && !withdraw.state){\n    //   // alert('withdraw socket')\n    //\n    //     const { userId } = withdraw\n    //     let fiat_accounts = await this.props.coinsendaServices.getFiatAccountByUserId()\n    //     if(!fiat_accounts){return false}\n    //\n    //     for (let i = 0; i < fiat_accounts.length; i++) {\n    //       if(fiat_accounts[i].currency.currency !== 'usd'){\n    //         const { activity_for_account } = this.props\n    //         if(activity_for_account[fiat_accounts[i].id] && activity_for_account[fiat_accounts[i].id].withdraws){return false}\n    //         await this.props.coisendaServices.get_withdraws(fiat_accounts[i].id)\n    //       }\n    //     }\n    //     this.props.toastMessage('Retiro(s) ha(n) sido enviado(s) a tu cuenta bancaria.', 'success')\n    //     this.props.action.success_sound()\n    //\n    // }\n  };\n\n  deposit_mangagement = async (deposit) => {\n    // console.log('|||||||| _______________________________________DEPOSIT SOCKET', deposit)\n    // debugger\n\n    if (deposit.state === \"pending\" && deposit.currency_type === \"fiat\") {\n      await this.props.coinsendaServices.addItemToState(\"deposits\", {\n        ...deposit,\n        type_order: \"deposit\",\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        deposit.account_id,\n        \"deposits\"\n      );\n    }\n\n    // if(deposit.state === 'confirmed' && (this.state.currentDeposit && this.state.currentDeposit.currency_type === 'crypto')){\n    if (deposit.state === \"confirmed\") {\n      if (\n        !this.props.deposits ||\n        (this.props.deposits && !this.props.deposits[deposit.id])\n      ) {\n        // si el deposito no está en el estado, es porque es de tipo cripto...\n        let cDeposit = await this.props.coinsendaServices.getDepositById(\n          deposit.id\n        );\n        if (\n          this.props.activity_for_account[cDeposit.account_id] &&\n          this.props.activity_for_account[cDeposit.account_id].deposits\n        ) {\n          await this.props.coinsendaServices.addItemToState(\"deposits\", {\n            ...cDeposit,\n            type_order: \"deposit\",\n          });\n          await this.props.coinsendaServices.updateActivityState(\n            cDeposit.account_id,\n            \"deposits\"\n          );\n        } else {\n          await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        }\n        this.props.action.update_item_state(\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); //actualiza el movimiento operacional de la wallet\n        this.props.action.addNotification(\n          \"wallets\",\n          { account_id: cDeposit.account_id, order_id: cDeposit.id },\n          1\n        );\n        // this.props.coinsendaServices.showNotification('Deposito Cripto', 'Nuevo deposito detectado')\n        await this.props.action.socket_notify(\n          { ...cDeposit, state: \"confirmed\" },\n          \"deposits\",\n          \"Nuevo deposito detectado\"\n        );\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n    if (deposit.confirmations) {\n      if (\n        !this.props.deposits ||\n        (this.props.deposits && !this.props.deposits[deposit.id])\n      ) {\n        let cDeposit = await this.props.coinsendaServices.getOrderById(\n          deposit.id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        // console.log('=============> DEPOSIT SOCKET ', cDeposit)\n      }\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              confirmations: deposit.confirmations,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n      }\n      return;\n    }\n\n\n\n\n\n    if (deposit.state === \"accepted\") {\n      let cDeposit = await this.props.coinsendaServices.getOrderById(\n        deposit.id,\n        \"deposits\"\n      );\n\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n        await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n      }\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n        this.props.action.update_item_state(\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); //actualiza el movimiento operacional de la wallet\n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.deposits[deposit.id].account_id,\n            order_id: deposit.id,\n          },\n          1\n        );\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        await this.props.action.socket_notify(\n          this.props.deposits[deposit.id],\n          \"deposits\"\n        );\n        await this.props.action.renderModal(null);\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        // this.props.coinsendaServices.showNotification('Deposito aceptado', 'Tu deposito ha sido aceptado exitosamente')\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n\n\n\n\n\n\n\n    if (deposit.state === \"rejected\" || deposit.state === \"canceled\") {\n      if (this.props.deposits[deposit.id].state === \"canceled\") {\n        return false;\n      }\n      // setTimeout(async()=>{\n      // Tiempo para que transcurra la animación del item\n\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        // await this.props.action.update_pending_activity(this.props.deposits[deposit.id].account_id, 'deposits')\n      }, 500);\n      this.props.action.exit_sound();\n      let state = deposit.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Deposito ${state}`, \"error\");\n      // }, 2000)\n    }\n\n    if (deposit.state === \"confirmed\") {\n      // console.log('deposito confirmado fiat')\n      // this.props.coinsendaServices.showNotification('Deposito fiat', 'Su deposito ha sido confirmado con éxito')\n      if (\n        this.props.deposits &&\n        this.props.deposits[deposit.id] &&\n        this.props.deposits[deposit.id].currency_type === \"fiat\"\n      ) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        // this.props.history.push('?form=deposit_confirmed_success')\n        this.props.action.isAppLoading(false);\n        this.props.action.success_sound();\n        this.props.toastMessage(\"Deposito confirmado con exito\", \"success\");\n      }\n    }\n  };\n\n\n\n\n\n\n\n  swap_management = async (swap) => {\n    // console.log('||||||||||||||||||||||||||||| ===========> SOCKET SWAP => ', swap.state, '  ==>  ', swap)\n    // debugger\n\n\n    if (swap.state === \"pending\") {\n      // await this.props.action.current_section_params({ active_trade_operation: true })\n      // el bought lo retorna el socket en el estado aceptado\n      let new_swap = swap;\n      await this.props.coinsendaServices.addItemToState(\"swaps\", {\n        ...new_swap,\n        state: \"pending\",\n        activeTrade: true,\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        new_swap.account_from,\n        \"swaps\"\n      );\n      this.props.action.isAppLoading(false);\n      await this.props.history.push(\n        `/wallets/activity/${new_swap.account_from}/swaps`\n      );\n      this.props.action.add_new_transaction_animation();\n    }\n\n\n\n    if(swap.state === 'rejected' || swap.state === 'canceled'){\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [this.state.currentSwap.id]: {\n              ...this.props.swaps[this.state.currentSwap.id],\n              state: swap.state,\n              bought: swap.bought,\n              activeTrade: false\n            },\n          },\n          \"swaps\"\n        );\n        this.props.coinsendaServices.updateActivityState(this.state.currentSwap.account_from, \"swaps\");\n        this.props.action.ticket_rejected();\n        return this.props.toastMessage(\"El intercambio no se pudo realizar, contacta con soporte\", \"error\");\n      }, 2500);\n\n    }\n\n\n\n\n    if (swap.state === \"accepted\" && this.state.currentSwap.state !== \"done\") {\n      const { currentSwap } = this.state;\n\n      await this.setState({ currentSwap: { ...currentSwap, state: \"done\" } });\n      setTimeout(async () => {\n        await this.props.action.success_sound();\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"confirmed\",\n              bought: swap.bought,\n            },\n          },\n          \"swaps\"\n        );\n      }, 2500);\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"accepted\",\n            },\n          },\n          \"swaps\"\n        );\n        await this.props.action.success_sound();\n        setTimeout(async () => {\n          await this.props.action.update_item_state(\n            {\n              [currentSwap.id]: {\n                ...this.props.swaps[currentSwap.id],\n                activeTrade: false,\n              },\n            },\n            \"swaps\"\n          );\n          await this.props.coinsendaServices.manageBalance(\n            currentSwap.account_from,\n            \"reduce\",\n            currentSwap.spent\n          );\n          await this.props.action.add_coin_sound();\n          await this.props.toastMessage(\n            \"Nuevo intercambio realizado\",\n            \"success\"\n          );\n          this.props.coinsendaServices.updateActivityState(currentSwap.account_from, \"swaps\");\n        }, 2000);\n      }, 5500);\n\n      // add the acredited order into account to\n      if (this.props.wallets[currentSwap.account_to]) {\n        const { wallets } = this.props;\n        this.props.coinsendaServices.updateActivityState(\n          currentSwap.account_to,\n          \"swaps\"\n        );\n        this.props.action.update_item_state(\n          {\n            [currentSwap.account_to]: {\n              ...wallets[currentSwap.account_to],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        );\n      }\n    }\n\n\n\n    if (swap.status === \"error\") {\n      this.props.toastMessage(\n        \"El intercambio no se pudo realizar, contacta con soporte\",\n        \"error\"\n      );\n      this.props.action.ticket_canceled();\n      // this.props.action.current_section_params({swap_socket_channel:this.state.currentSwap})\n    }\n  };\n\n\n  status_management = async(status) => {\n    this.props.coinsendaServices.updateUserStatus(status)\n  }\n\n  render() {\n    return null;\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  // console.log('||||||||||||||||||||||||||||||||||||||||||||| ======>>> props Sockets ==> ', props)\n\n  const { loggedIn } = state.auth;\n  const {\n    user,\n    deposits,\n    withdraws,\n    wallets,\n    withdraw_accounts,\n    swaps,\n  } = state.modelData;\n  const { ui } = state;\n\n  return {\n    loggedIn,\n    user: user,\n    deposits,\n    withdraws,\n    activity_for_account: state.storage.activity_for_account,\n    wallets,\n    swaps,\n    withdraw_accounts,\n    isModalActive: ui.otherModal,\n    isRenderModalActive: ui.modal.render,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withCoinsendaServices(SocketsComponent))\n);\n"],"sourceRoot":""}