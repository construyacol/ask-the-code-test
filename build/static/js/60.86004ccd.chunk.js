(this["webpackJsonpcoinsenda-app"]=this["webpackJsonpcoinsenda-app"]||[]).push([[60],{492:function(t,s){},663:function(t,s,i){"use strict";i.r(s);var e=i(2),a=i(98),o=i(27),c=i(99),p=i(483),n=i.n(p),r=i(15),d=i(354),h=i(348),w=i(28);const{SocketUrl:u}=r.a;class _ extends e.Component{constructor(){super(...arguments),this.state={currentSwap:null,currentDeposit:null,currentWithdraw:null,isUpdated:!1},this.withdraw_account_mangagement=async t=>{this.props.withdraw_accounts[t.id]&&("in_progress"!==t.state&&"complete"!==t.state&&"rejected"!==t.state||(this.props.action.update_item_state({[t.id]:{...this.props.withdraw_accounts[t.id],...t}},"withdraw_accounts"),"complete"===t.state&&(this.props.toastMessage("Nueva cuenta de retiro inscrita","success"),this.props.action.success_sound())))},this.withdraw_mangagement=async t=>{if(t.proof){if(!this.props.withdraws||this.props.withdraws&&!this.props.withdraws[t.id]){let s=await this.props.coinsendaServices.getOrderById(t.id,"withdraws");await this.props.coinsendaServices.get_withdraws(s.account_id),await this.setState({currentWithdraw:s})}this.props.withdraws&&this.props.withdraws[t.id]&&(await this.props.action.update_item_state({[t.id]:{...this.props.withdraws[t.id],proof:t.proof,sent:!0,state:"accepted"}},"withdraws"),await this.props.coinsendaServices.updateActivityState(this.props.withdraws[t.id].account_id,"withdraws"),this.props.action.addNotification("wallets",{account_id:this.props.withdraws[t.id].account_id,order_id:t.id},1),this.props.action.success_sound(),this.props.isModalActive||this.props.isRenderModalActive||(await this.props.action.socket_notify(this.props.withdraws[t.id],"withdraws"),this.props.action.toggleOtherModal()))}if("pending"===t.state&&"crypto"===t.currency_type){if(!await this.props.coinsendaServices.addUpdateWithdraw(t.id,"confirmed"))return this.props.action.isAppLoading(!1),this.props.toastMessage("No se ha podido crear la orden de retiro","error")}const{currentWithdraw:s}=this.state;if(console.log("||||||||||||||||||||||| withdraw socket console ::",t,s),"confirmed"===t.state&&"crypto"===s.currency_type){let t={id:s.id,account_id:s.account_id,...s,state:"confirmed"};await this.props.coinsendaServices.addItemToState("withdraws",t),await this.props.coinsendaServices.updateActivityState(t.account_id,"withdraws"),await this.props.coinsendaServices.manageBalance(t.account_id,"reduce",t.amount),await this.props.action.isAppLoading(!1),this.props.action.add_new_transaction_animation(),this.props.history.push("/wallets/activity/".concat(t.account_id,"/withdraws"))}if("accepted"===t.state&&"fiat"===s.currency_type){let t={...this.state.currentWithdraw};if(await this.props.coinsendaServices.addItemToState("withdraws",{...t,state:"confirmed"}),await this.props.coinsendaServices.updateActivityState(t.account_id,"withdraws"),this.props.action.add_new_transaction_animation(),this.props.withdraw_accounts[s.withdraw_account_id]){let t=this.props.withdraw_accounts[s.withdraw_account_id];this.props.action.update_item_state({[s.withdraw_account_id]:{...t,used_counter:++t.used_counter,inscribed:!0}},"withdraw_accounts")}this.props.history.push("/wallets/activity/".concat(t.account_id,"/withdraws"))}if("rejected"===t.state||"canceled"===t.state){setTimeout((async()=>{await this.props.action.update_item_state({[t.id]:{...this.props.withdraws[t.id],state:t.state}},"withdraws"),await this.props.coinsendaServices.updateActivityState(this.props.withdraws[t.id].account_id,"withdraws"),await this.props.coinsendaServices.getWalletsByUser(!0)}),500);let s="canceled"===t.state?"cancelado":"rechazado";this.props.toastMessage("Retiro ".concat(s),"error")}},this.deposit_mangagement=async t=>{if("pending"===t.state&&"fiat"===t.currency_type&&(await this.props.coinsendaServices.addItemToState("deposits",{...t,type_order:"deposit"}),await this.props.coinsendaServices.updateActivityState(t.account_id,"deposits")),"confirmed"===t.state&&(!this.props.deposits||this.props.deposits&&!this.props.deposits[t.id])){let s=await this.props.coinsendaServices.getDepositById(t.id);this.props.activity_for_account[s.account_id]&&this.props.activity_for_account[s.account_id].deposits?(await this.props.coinsendaServices.addItemToState("deposits",{...s,type_order:"deposit"}),await this.props.coinsendaServices.updateActivityState(s.account_id,"deposits")):await this.props.coinsendaServices.get_deposits(s.account_id),this.props.action.update_item_state({[s.account_id]:{...this.props.wallets[s.account_id],count:1}},"wallets"),this.props.action.addNotification("wallets",{account_id:s.account_id,order_id:s.id},1),await this.props.action.socket_notify({...s,state:"confirmed"},"deposits","Nuevo dep\xf3sito detectado"),this.props.action.toggleOtherModal(),this.props.action.success_sound(),setTimeout((()=>{this.props.action.add_coin_sound()}),1500)}if(t.confirmations){if(!this.props.deposits||this.props.deposits&&!this.props.deposits[t.id]){let s=await this.props.coinsendaServices.getOrderById(t.id,"deposits");await this.props.coinsendaServices.get_deposits(s.account_id)}this.props.deposits&&this.props.deposits[t.id]&&(await this.props.action.update_item_state({[t.id]:{...this.props.deposits[t.id],confirmations:t.confirmations,state:t.confirmations>5?"accepted":"confirmed"}},"deposits"),await this.props.coinsendaServices.updateActivityState(this.props.deposits[t.id].account_id,"deposits"))}else{if("accepted"===t.state){let s=await this.props.coinsendaServices.getOrderById(t.id,"deposits");(!this.props.deposits||this.props.deposits&&!this.props.deposits[t.id])&&await this.props.coinsendaServices.get_deposits(s.account_id),this.props.deposits&&this.props.deposits[t.id]&&(this.props.action.update_item_state({[s.account_id]:{...this.props.wallets[s.account_id],count:1}},"wallets"),this.props.action.addNotification("wallets",{account_id:this.props.deposits[t.id].account_id,order_id:t.id},1),await this.props.action.update_item_state({[t.id]:{...this.props.deposits[t.id],state:t.state}},"deposits"),await this.props.coinsendaServices.updateActivityState(this.props.deposits[t.id].account_id,"deposits"),await this.props.coinsendaServices.getWalletsByUser(!0),await this.props.action.socket_notify(this.props.deposits[t.id],"deposits"),await this.props.action.renderModal(null),this.props.action.toggleOtherModal(),this.props.action.success_sound(),setTimeout((()=>{this.props.action.add_coin_sound()}),1500))}if("rejected"===t.state||"canceled"===t.state){if("canceled"===this.props.deposits[t.id].state)return!1;setTimeout((async()=>{await this.props.action.update_item_state({[t.id]:{...this.props.deposits[t.id],state:t.state}},"deposits"),await this.props.coinsendaServices.updateActivityState(this.props.deposits[t.id].account_id,"deposits"),await this.props.coinsendaServices.getWalletsByUser(!0)}),500),this.props.action.exit_sound();let s="canceled"===t.state?"cancelado":"rechazado";this.props.toastMessage("Dep\xf3sito ".concat(s),"error")}"confirmed"===t.state&&this.props.deposits&&this.props.deposits[t.id]&&"fiat"===this.props.deposits[t.id].currency_type&&(await this.props.action.update_item_state({[t.id]:{...this.props.deposits[t.id],state:t.state}},"deposits"),await this.props.coinsendaServices.updateActivityState(this.props.deposits[t.id].account_id,"deposits"),await this.props.coinsendaServices.getWalletsByUser(!0),this.props.action.isAppLoading(!1),this.props.action.success_sound(),this.props.toastMessage("Dep\xf3sito confirmado con exito","success"))}},this.swap_management=async t=>{if("pending"===t.state){let s=t;await this.props.coinsendaServices.addItemToState("swaps",{...s,state:"pending",activeTrade:!0}),await this.props.coinsendaServices.updateActivityState(s.account_from,"swaps"),this.props.action.isAppLoading(!1),await this.props.history.push("/wallets/activity/".concat(s.account_from,"/swaps")),this.props.action.add_new_transaction_animation()}if("rejected"!==t.state&&"canceled"!==t.state||setTimeout((async()=>(this.props.action.update_item_state({[this.state.currentSwap.id]:{...this.props.swaps[this.state.currentSwap.id],state:t.state,bought:t.bought,activeTrade:!1}},"swaps"),this.props.coinsendaServices.updateActivityState(this.state.currentSwap.account_from,"swaps"),this.props.action.ticket_rejected(),this.props.toastMessage("El intercambio no se pudo realizar, contacta con soporte","error"))),2500),"accepted"===t.state&&"done"!==this.state.currentSwap.state){const{currentSwap:s}=this.state;if(await this.setState({currentSwap:{...s,state:"done"}}),setTimeout((async()=>{await this.props.action.success_sound(),this.props.action.update_item_state({[s.id]:{...this.props.swaps[s.id],state:"confirmed",bought:t.bought}},"swaps")}),2500),setTimeout((async()=>{this.props.action.update_item_state({[s.id]:{...this.props.swaps[s.id],state:"accepted"}},"swaps"),await this.props.action.success_sound(),setTimeout((async()=>{await this.props.action.update_item_state({[s.id]:{...this.props.swaps[s.id],activeTrade:!1}},"swaps"),await this.props.coinsendaServices.manageBalance(s.account_from,"reduce",s.spent),await this.props.action.add_coin_sound(),await this.props.toastMessage("Nuevo intercambio realizado","success"),this.props.coinsendaServices.updateActivityState(s.account_from,"swaps")}),2e3)}),5500),this.props.wallets[s.account_to]){const{wallets:t}=this.props;this.props.coinsendaServices.updateActivityState(s.account_to,"swaps"),this.props.action.update_item_state({[s.account_to]:{...t[s.account_to],count:1}},"wallets")}}"error"===t.status&&(this.props.toastMessage("El intercambio no se pudo realizar, contacta con soporte","error"),this.props.action.ticket_canceled())},this.status_management=async t=>{await this.props.coinsendaServices.updateUserStatus(t),"level_1"===t.countries.international&&(this.props.coinsendaServices.init(),this.props.history.push("/wallets"))}}async componentDidUpdate(t){if((!this.state.isUpdated||this.props.loggedIn!==t.loggedIn)&&(this.setState({isUpdated:!0}),this.props.loggedIn)){const t=n()(u),{user:s}=this.props,{userToken:i}=await Object(w.c)();let e=()=>{!1===t.connected&&t.connect()},a=setInterval(e,3e4);t.on("disconnect",(async function(t){a=setInterval(e,2e3)})),t.on("connect_error",(s=>{console.log("|||||||||||||||||||||||||  connect_error ===>",s),setTimeout((()=>{t.connect()}),1e3)})),t.on("connect",(()=>{clearInterval(a);const e={body:{access_token:i}};t.emit("authentication",e),t.on("authenticated",(()=>{t.on("/swap/".concat(s.id),(async t=>{"pending"===t.state&&await this.setState({currentSwap:t}),this.swap_management(t)})),t.on("/deposit/".concat(s.id),(async t=>{"pending"===t.state&&"crypto"===t.currency_type?await this.setState({currentDeposit:t}):this.deposit_mangagement(t)})),t.on("/withdraw/".concat(s.id),(async t=>{console.log(t),"pending"===t.state&&await this.setState({currentWithdraw:t}),this.withdraw_mangagement(t)})),t.on("/withdrawAccount/".concat(s.id),(async t=>{"pending"===t.state&&await this.setState({currentWithdrawAccount:t}),this.withdraw_account_mangagement(t)})),t.on("/profile/".concat(s.id),(async t=>{t.countries&&this.status_management(t)}))}))}))}}render(){return null}}s.default=Object(d.h)(Object(a.b)(((t,s)=>{const{loggedIn:i}=t.auth,{user:e,deposits:a,withdraws:o,wallets:c,withdraw_accounts:p,swaps:n}=t.modelData,{ui:r}=t;return{loggedIn:i,user:e,deposits:a,withdraws:o,activity_for_account:t.storage.activity_for_account,wallets:c,swaps:n,withdraw_accounts:p,isModalActive:r.otherModal,isRenderModalActive:r.modal.render}}),(t=>({action:Object(o.bindActionCreators)(c.a,t)})))(Object(h.a)(_)))}}]);
//# sourceMappingURL=60.86004ccd.chunk.js.map