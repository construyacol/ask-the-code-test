{"version":3,"sources":["components/sockets/socket_notify/socketNotify.js"],"names":["IconSwitch","loadable","OrderNotifyView","props","socket_notify","formatCurrency","currencies","title","button_tittle","item_type","currency","LayoutSocketNotify","theme","size","className","style","backgroundImage","getCdnPath","icon","color","id","symbol","buttonAction","async","action","toggleOtherModal","history","push","wallet_id","item_id","account_id","children","selectCurrencies","createSelector","state","modelData","currency_list","map","connect","ui","notifications","dispatch","bindActionCreators","actions","setFormatCurrency","useState","txType","fallBackTitle","useEffect","amount","formatToCurrencies","resul","formatToCurrency","toFormat","on_click","e","target","dataset","close_modal","includes"],"mappings":"uHAAA,uHAeA,MAAMA,EAAaC,aAAS,IAAM,2CAsE5BC,EAAmBC,IACvB,MAAM,cACJC,EADI,eAEJC,EAFI,WAGJC,EAHI,MAIJC,EAJI,cAKJC,GACEL,GAEE,UACJM,EADI,SAEJC,GAEEP,EAAMC,cAaV,OACE,eAACO,EAAD,WACE,cAAC,IAAD,CAAWC,MAAM,OAAOC,KAAM,KAC9B,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,qBAAKA,UAAU,yBAEbC,MAAO,CACLC,gBAAgB,OAAD,OAAQC,YAAW,UAAnB,gCAIrB,sBAAKH,UAAU,yBAAf,UACE,qBAAKA,UAAU,oBACf,cAACd,EAAD,CAAYkB,KAAMT,EAAWI,KAAM,GAAIM,MAAM,kBAIjD,sBAAKL,UAAU,gBAAf,UACE,oBAAIA,UAAU,SAAd,SAAwBP,IACxB,sBAAKO,UAAU,gBAAf,UACE,cAACd,EAAD,CAAYkB,KAAMR,EAASA,SAAUG,KAAM,KAC3C,oBAAGO,GAAG,eAAeN,UAAU,UAA/B,UACGT,EAAgB,IACjB,+BAAOC,EAAWF,EAAcM,SAASA,UAAUW,eAGvD,cAAC,IAAD,CACEC,aAtCaC,UAEnBpB,EAAMqB,OAAOpB,cAAc,YACrBD,EAAMqB,OAAOC,mBAEnBtB,EAAMuB,QAAQC,KAAd,4BAAwCC,EAAxC,YAAqDnB,KAkC/CoB,QAASzB,EAAc0B,WAFzB,SAIE,mBAAGV,GAAG,mBAAmBN,UAAU,SAAnC,SACGN,aAQPG,EAAsBR,GAExB,qBAAKW,UAAU,yCAAf,SACE,qBAAKA,UAAU,gBAAf,SAAgCX,EAAM4B,aAKtCC,EAAmBC,aACtBC,GAAUA,EAAMC,UAAU7B,aAC1BA,IACC,IAAI8B,EAWJ,OAVI9B,GACFA,EAAW+B,KAAK3B,GACN0B,EAAgB,IACnBA,EACH,CAAC1B,EAASA,UAAW,IAChBA,MAKJ0B,KAmBIE,uBAfUJ,IACvB,MAAM,cAAE9B,GAAkB8B,EAAMK,GAAGC,cAEnC,MAAO,CACLpC,cAAeA,GAAiBA,EAAc,GAC9CE,WAAY0B,EAAiBE,OAILO,IACnB,CACLjB,OAAQkB,6BAAmBC,IAASF,MAIzBH,EA/KOnC,IACpB,MAAOE,EAAgBuC,GAAqBC,mBAAS,OAC/C,UAAEpC,EAAF,MAAaF,GAAUJ,EAAMC,cACnC,IAAI0C,EAAM,UAAoB,aAAdrC,EAA2B,cAAa,UACpDsC,EAAa,UACD,aAAdtC,EACI,6BACc,cAAdA,EACA,uBACA,IAGNuC,qBAAU,KACR,GAAI7C,EAAMC,eAAiBD,EAAMC,cAAc6C,OAAQ,CACrD,MAAM,OAAEA,EAAF,SAAUvC,GAAaP,EAAMC,cACnC8C,EAAmBD,EAAQvC,MAE5B,CAACP,EAAMC,gBAEV,MAAM8C,EAAqB3B,MAAO0B,EAAQvC,KACxC,IAAIyC,QAAcC,YAAiBH,EAAQvC,GAC3CkC,EAAkBO,EAAME,aAW1B,OACE,cAAC,IAAD,CAAkBC,SATAC,IAClB,MAAM,OAAEC,GAAWD,EACfC,GAAUA,EAAOC,QAAQC,cAC3BvD,EAAMqB,OAAOpB,cAAc,MAC3BD,EAAMqB,OAAOC,qBAKf,SAsBG,CAAC,WAAY,aAAakC,SAASlD,IAClC,cAACP,EAAD,CACEK,MAAOA,GAASwC,EAChBvC,cAAa,cAASsC,EAAT,KACbrC,UAAWA,EACXJ,eAAgBA,KACZF","file":"static/js/62.017c55c4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport loadable from \"@loadable/component\";\nimport { bindActionCreators } from \"redux\";\nimport { createSelector } from \"reselect\";\nimport actions from \"../../../actions\";\nimport { ButtonNofity } from \"../../widgets/buttons/buttons\";\nimport { formatToCurrency } from \"../../../utils/convert_currency\";\n\nimport { IconClose } from \"../../widgets/shared-styles\";\nimport OtherModalLayout from \"../../widgets/modal/otherModalLayout\";\nimport { getCdnPath } from '../../../environment'\n\nimport \"./socketNotify.css\";\n\nconst IconSwitch = loadable(() => import(\"../../widgets/icons/iconSwitch\"));\n\nconst SocketNotify = (props) => {\n  const [formatCurrency, setFormatCurrency] = useState(null);\n  const { item_type, title } = props.socket_notify;\n  let txType = `${item_type === \"deposits\" ? \"depósito\" : \"retiro\"}`;\n  let fallBackTitle = `${\n    item_type === \"deposits\"\n      ? \"Nuevo depósito aprobado\"\n      : item_type === \"withdraws\"\n      ? \"Nuevo retiro enviado\"\n      : \"\"\n  }`;\n\n  useEffect(() => {\n    if (props.socket_notify && props.socket_notify.amount) {\n      const { amount, currency } = props.socket_notify;\n      formatToCurrencies(amount, currency);\n    }\n  }, [props.socket_notify]);\n\n  const formatToCurrencies = async (amount, currency) => {\n    let resul = await formatToCurrency(amount, currency);\n    setFormatCurrency(resul.toFormat());\n  };\n\n  const closeModal = (e) => {\n    const { target } = e;\n    if (target && target.dataset.close_modal) {\n      props.action.socket_notify(null);\n      props.action.toggleOtherModal();\n    }\n  };\n\n  return (\n    <OtherModalLayout on_click={closeModal}>\n      {/* {\n        item_type === 'deposits' ?\n          <OrderNotifyView\n            title={`${title ? title : `Nuevo ${ui_text} aprobado.`}`}\n            button_tittle={`Ver ${ui_text}`}\n            item_type={item_type}\n            formatCurrency={formatCurrency}\n            {...props} />\n\n          :\n\n          item_type === 'withdraws' &&\n          <OrderNotifyView\n            title={`${title ? title : `Nuevo ${ui_text} enviado`}`}\n            button_tittle={`Ver ${ui_text}.`}\n            item_type={item_type}\n            formatCurrency={formatCurrency}\n            {...props} />\n\n      } */}\n\n      {[\"deposits\", \"withdraws\"].includes(item_type) && (\n        <OrderNotifyView\n          title={title || fallBackTitle}\n          button_tittle={`Ver ${txType}.`}\n          item_type={item_type}\n          formatCurrency={formatCurrency}\n          {...props}\n        />\n      )}\n    </OtherModalLayout>\n  );\n};\n\nconst OrderNotifyView = (props) => {\n  const {\n    socket_notify,\n    formatCurrency,\n    currencies,\n    title,\n    button_tittle,\n  } = props;\n\n  const {\n    item_type,\n    currency,\n    // state\n  } = props.socket_notify;\n\n  // console.log('||||||||||||||_____________________________________________socket_notify', props)\n  const buttonAction = async (wallet_id) => {\n    // console.log('||||||||||||||_____________________________________________buttonAction', wallet_id)\n    props.action.socket_notify(null);\n    await props.action.toggleOtherModal();\n    // await props.action.current_section_params({currentFilter:item_type})\n    props.history.push(`/wallets/activity/${wallet_id}/${item_type}`);\n  };\n\n  // console.log('item_type', item_type)\n\n  return (\n    <LayoutSocketNotify>\n      <IconClose theme=\"dark\" size={20} />\n      <div className=\"topSection\">\n        <div className=\"contBackTopSection\">\n          <div className=\"backTopSection animate\"\n          // {`${getCdnPath('assets')}coins/${secondary_coin}.png`}\n            style={{\n              backgroundImage:`url(${getCdnPath('assets')}wallet_coins/back.webp)`\n            }}\n            />\n        </div>\n        <div className=\"socketIconContainer in\">\n          <div className=\"wavExpansive in\"></div>\n          <IconSwitch icon={item_type} size={45} color=\"#11998e\" />\n        </div>\n      </div>\n\n      <div className=\"bottomSection\">\n        <h3 className=\"fuente\">{title}</h3>\n        <div className=\"depositAmount\">\n          <IconSwitch icon={currency.currency} size={35} />\n          <p id=\"order_amount\" className=\"fuente2\">\n            {formatCurrency}{\" \"}\n            <span>{currencies[socket_notify.currency.currency].symbol}</span>\n          </p>\n        </div>\n        <ButtonNofity\n          buttonAction={buttonAction}\n          item_id={socket_notify.account_id}\n        >\n          <p id=\"ButtonNofityText\" className=\"fuente\">\n            {button_tittle}\n          </p>\n        </ButtonNofity>\n      </div>\n    </LayoutSocketNotify>\n  );\n};\n\nconst LayoutSocketNotify = (props) => {\n  return (\n    <div className=\"LayoutSocketNotify swing-in-bottom-bck\">\n      <div className=\"socketContent\">{props.children}</div>\n    </div>\n  );\n};\n\nconst selectCurrencies = createSelector(\n  (state) => state.modelData.currencies,\n  (currencies) => {\n    let currency_list;\n    if (currencies) {\n      currencies.map((currency) => {\n        return (currency_list = {\n          ...currency_list,\n          [currency.currency]: {\n            ...currency,\n          },\n        });\n      });\n    }\n    return currency_list;\n  }\n);\n\nconst mapStateToProps = (state) => {\n  const { socket_notify } = state.ui.notifications;\n\n  return {\n    socket_notify: socket_notify && socket_notify[0],\n    currencies: selectCurrencies(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketNotify);\n"],"sourceRoot":""}