{"version":3,"sources":["components/withListCreator.js","components/widgets/accountList/account-list.js"],"names":["specialListCreatorSelector","createSelector","state","withdraw_accounts","wallets","_","isWithdrawView","withdrawAccounts","data","Object","keys","filter","key","currency_type","map","IconSwitch","loadable","Promise","resolve","then","__webpack_require__","bind","AsComponent","AccountsNotFound","_ref","account_type","isMovilViewport","useViewport","react_default","a","createElement","className","id","size","icon","withListCreator","props","isWalletsView","actions","mainListLoader","items","label","concat","_useCoinsendaServices","useCoinsendaServices","coinsendaService","slicedToArray","_useState","useState","_useState2","isVerified","setIsVerified","_useNavigationKeyActi","useNavigationKeyActions","loader","uniqueIdForElement","default","setCurrentSelection","isDesktop","window","innerWidth","idForClickableElement","useKeyActionAsClick","useEffect","verified","getUserVerificationStatus","showValidationPrompt","confirmationModalToggle","confirmationModalPayload","title","description","txtPrimary","action","svg","callToValidate","isHugeContainer","isWithdrawListStyle","mainButtonText","Fragment","length","styles","style","objectSpread","account","visible","item_account","number","focusedId","loaders","color","account_list_AccountsNotFound","buttons","type","handleClick","verificationState","toggleModal","React","memo","useSelector","isLoading","ui","mainList","modelData","useActions","toProps","assign"],"mappings":"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","file":"static/js/52.cd100f31.chunk.js","sourcesContent":["import React from \"react\";\nimport { useActions } from \"../hooks/useActions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nconst specialListCreatorSelector = createSelector(\n  (state) => state.withdraw_accounts,\n  (state) => state.wallets,\n  (_, isWithdrawView) => isWithdrawView,\n  (withdrawAccounts, wallets, isWithdrawView) => {\n    const data = isWithdrawView ? withdrawAccounts : wallets;\n    return (\n      data &&\n      Object.keys(data)\n        .filter((key) => {\n          return !(isWithdrawView && data[key].currency_type === \"crypto\");\n        })\n        .map((key) => {\n          return data[key];\n        })\n    );\n  }\n);\n\nexport default function withListCreator(AsComponent) {\n  return React.memo(function (props) {\n    const loader = useSelector((state) => state.isLoading.loader);\n    const mainListLoader = useSelector((state) => state.ui.loaders.mainList);\n    const items = useSelector((state) =>\n      specialListCreatorSelector(state.modelData, props.isWithdrawView)\n    );\n    const actions = useActions();\n    const toProps = {\n      verificationState: true,\n      mainListLoader,\n      loader,\n    };\n\n    return (\n      <AsComponent {...toProps} actions={actions} items={items} {...props} />\n    );\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport loadable from \"@loadable/component\";\nimport SimpleLoader from \"../loaders\";\nimport ItemAccount from \"./item_account\";\nimport { AddNewItem } from \"../buttons/buttons\";\nimport PropTypes from \"prop-types\";\nimport { AccountListContainer } from \"./styles\";\nimport withListCreator from \"../../withListCreator\";\nimport { useCoinsendaServices } from \"../../../services/useCoinsendaServices\";\nimport useNavigationKeyActions from \"../../../hooks/useNavigationKeyActions\";\nimport useKeyActionAsClick from \"../../../hooks/useKeyActionAsClick\";\nimport useViewport from \"../../../hooks/useWindowSize\";\n\nimport \"../../wallets/views/wallet_views.css\";\n\nconst IconSwitch = loadable(() => import(\"../icons/iconSwitch\"));\n\nfunction AccountList(props) {\n  const {\n    isWalletsView,\n    isWithdrawView,\n    actions,\n    mainListLoader,\n  } = props;\n  const items = props.items || [];\n  const label = `Obteniendo tus ${\n    isWalletsView ? \"Billeteras\" : \"Cuentas de retiro\"\n  }`;\n  const [coinsendaService] = useCoinsendaServices();\n  const [isVerified, setIsVerified] = useState(false);\n  const [setCurrentSelection] = useNavigationKeyActions({\n    items,\n    loader: mainListLoader,\n    uniqueIdForElement: \"accountItem\",\n    default: -1,\n  });\n  const isDesktop = window.innerWidth > 900;\n  // 97 keyCode for A\n  const idForClickableElement = useKeyActionAsClick(\n    true,\n    \"main-accounts-add-button\",\n    97\n  );\n\n  useEffect(() => {\n    // actions.cleanCurrentSection()\n    const verified = coinsendaService.getUserVerificationStatus(\"level_1\");\n    setIsVerified(verified);\n  }, []);\n\n  const createNewWallet = () => {\n    if (props.verificationState === \"confirmed\") {\n      return showValidationPrompt();\n    }\n\n    if (!isVerified) {\n      return callToValidate();\n    }\n    actions.toggleModal();\n  };\n\n  const showValidationPrompt = () => {\n    actions.confirmationModalToggle();\n    actions.confirmationModalPayload({\n      title: \"Estamos trabajando en esto...\",\n      description:\n        \"Hemos recibido satisfactoriamente tus datos de verificación, en breve podrás operar en coinsenda.\",\n      txtPrimary: \"Entendido\",\n      action: false,\n      svg: \"verified\",\n    });\n  };\n\n  // const goToVerification = async () => {\n  //   actions.confirmationModalToggle();\n  //   actions.confirmationModalPayload(null);\n  //   // const verificationState = props.verificationState;\n  //   //\n  //   // if (verificationState === \"confirmed\" || verificationState === \"pending\") {\n  //   //   await actions.ToStep(\"globalStep\", 2);\n  //   // }\n  //   //\n  //   // if (verificationState === \"rejected\") {\n  //   //   await actions.ToStep(\"globalStep\", 0);\n  //   // }\n  //   //\n  //   // await history.push(`/security`);\n  //   // setTimeout(() => {\n  //   //   actions.toggleModal();\n  //   // }, 0);\n  // };\n\n  const callToValidate = () => {\n    // const message = isWalletsView\n    //   ? \"billeteras crypto/fiat.\"\n    //   : \"cuentas de retiro fiat.\";\n\n    actions.confirmationModalToggle();\n    actions.confirmationModalPayload({\n      title: \"Estamos trabajando en esto...\",\n      description:\n        \"Hemos recibido satisfactoriamente tus datos de verificación, en breve podrás operar en coinsenda.\",\n      txtPrimary: \"Entendido\",\n      action: false,\n      svg: \"verified\",\n    });\n  };\n  const isHugeContainer = items > 10;\n  const styleForHugeContainer = {\n    // height: 'auto',\n  };\n  const isWithdrawListStyle = {\n    // marginBottom: '40px'\n  };\n\n  let mainButtonText = isWithdrawView\n    ? \"Añadir nueva cuenta de retiro\"\n    : \"Añadir nueva billetera\";\n  mainButtonText = isDesktop ? `${mainButtonText} [A]` : mainButtonText;\n\n  return (\n    <>\n      {items && items.length > 0 ? (\n        <AccountListContainer\n          style={\n            isHugeContainer\n              ? { ...styleForHugeContainer, ...isWithdrawListStyle }\n              : isWithdrawListStyle\n          }\n          className=\"AccountListContainer\"\n        >\n          {items.map((account, id) => {\n            if (!account || !account.visible) {\n              return null;\n            }\n            return (\n              <ItemAccount\n                key={id}\n                setCurrentSelection={setCurrentSelection}\n                number={id}\n                focusedId={`accountItem${id}`}\n                account={account}\n                account_type={isWalletsView ? \"wallets\" : \"withdraw_accounts\"}\n                loader={props.loader}\n              />\n            );\n          })}\n        </AccountListContainer>\n      ) : props.loader ? (\n        <SimpleLoader color=\"blue\" label={label} />\n      ) : (\n        items.length < 1 &&\n        !props.loader && (\n          <AccountsNotFound\n            account_type={isWalletsView ? \"wallets\" : \"withdraw_accounts\"}\n          />\n        )\n      )}\n\n      {!props.loader && (\n        <AddNewItem\n          id={idForClickableElement}\n          label={mainButtonText}\n          type=\"primary\"\n          handleClick={createNewWallet}\n        />\n      )}\n    </>\n  );\n}\n\nAccountList.propTypes = {\n  all_pairs: PropTypes.object,\n  isAppLoaded: PropTypes.bool,\n  currencies: PropTypes.array,\n  current_wallet: PropTypes.object,\n  items: PropTypes.array,\n  loader: PropTypes.bool,\n};\n\nconst AccountsNotFound = ({ account_type }) => {\n  const { isMovilViewport } = useViewport();\n\n  return (\n    <div className=\"withdraw_accounts_screen\">\n      <div className=\"withdraw_accounts_screen_cont\">\n        <p id=\"WalletList2\" className=\"fuente\">\n          {account_type === \"withdraw_accounts\"\n            ? \"Aún no tienes cuentas de retiro agregadas, añade y gestiona retiros en tu moneda local.\"\n            : \"Aún no tienes billeteras agregadas, añade y gestiona Billeteras de Bitcoin, Ethereum, etc... para que puedas hacer retiros y depositos\"}\n        </p>\n        <IconSwitch size={isMovilViewport ? 230 : 330} icon=\"newAccount\" />\n      </div>\n    </div>\n  );\n};\n\nexport default withListCreator(AccountList);\n"],"sourceRoot":""}