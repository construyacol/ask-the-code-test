{"version":3,"sources":["components/sockets/sockets.js"],"names":["statusCounter","SocketUrl","Environtment","SocketsComponent","Component","state","currentSwap","currentDeposit","currentWithdraw","isUpdated","withdraw_account_mangagement","async","this","props","withdraw_accounts","withdrawAccount","id","action","update_item_state","toastMessage","success_sound","withdraw_mangagement","withdraw","proof","withdraws","cWithdraw","coinsendaServices","getOrderById","get_withdraws","account_id","setState","sent","updateActivityState","addNotification","order_id","isModalActive","isRenderModalActive","socket_notify","toggleOtherModal","currency_type","addUpdateWithdraw","isAppLoading","console","log","new_withdraw_model","addItemToState","manageBalance","amount","add_new_transaction_animation","history","push","new_withdraw","withdraw_account_id","withdraw_account","used_counter","inscribed","setTimeout","getWalletsByUser","deposit_mangagement","deposit","type_order","deposits","cDeposit","getDepositById","info","is_referral","activity_for_account","get_deposits","wallets","count","add_coin_sound","confirmations","renderModal","exit_sound","swap_management","swap","new_swap","activeTrade","account_from","swaps","bought","ticket_rejected","spent","account_to","status","ticket_canceled","status_management","formModal","toggleModal","updateUserStatus","countries","international","init","prevProps","loggedIn","socket","io","user","userToken","getToken","tryReconnect","connected","connect","intervalID","setInterval","on","reason","clearInterval","body","access_token","emit","document","querySelector","classList","add","currentWithdrawAccount","render","withRouter","auth","modelData","ui","form","storage","otherModal","modal","isModalVisible","dispatch","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/93.734bf270.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../actions\";\nimport io from \"socket.io-client\";\nimport Environtment from \"../../environment\";\n// import { objectToArray } from '../../services'\nimport { withRouter } from \"react-router\";\nimport withCoinsendaServices from \"../withCoinsendaServices\";\nimport { getToken } from '../utils'\nlet statusCounter = 0\nconst { SocketUrl } = Environtment;\n\n\nclass SocketsComponent extends Component {\n  state = {\n    currentSwap: null,\n    currentDeposit: null,\n    currentWithdraw: null,\n    isUpdated: false,\n  };\n\n//   async testSocketExecuted(orderMock) {\n//     console.log('======================================== ______ testSocketExecuted: ', orderMock)\n//     if (orderMock.state === \"pending\" && orderMock.currency_type === \"crypto\") {\n//       await this.setState({ currentDeposit: orderMock });\n//     } else {\n//       this.deposit_mangagement(orderMock);\n//     }\n//    }\n\n//   async testSocket() {\n\n//     let orderMock = {\n//       id:\"6184c8f067e372004414b156\",\n//       state:\"rejected\"\n//     }\n\n//     this.withdraw_mangagement(orderMock);\n\n//     // this.testSocketExecuted()\n//     // let confirmations = 1\n//     // setInterval(()=>{\n//     //   if(confirmations < 7){\n//     //     orderMock = {\n//     //       confirmations: confirmations,\n//     //       id: \"617621370b0a1b0048ae9cae\"\n//     //     }\n//     //     this.testSocketExecuted(orderMock)\n//     //     confirmations++\n//     //   }\n//     // }, 5000)\n//   }\n\n//  componentDidMount(){\n//    setTimeout(()=> {\n//     //  this.testSocket()\n//     // this.props.coinsendaServices.get_deposits('61845def4c9f0d003e7d6db8', 20, this.props.user.deposits.length)\n//     // console.log('deposits', this.props.user.deposits, this.props.user.deposits.length)\n//    }, 7000)\n//  }\n\n async componentDidUpdate(prevProps) {\n\n\n    if (!this.state.isUpdated || this.props.loggedIn !== prevProps.loggedIn) {\n      this.setState({\n        isUpdated: true,\n      });\n      if (this.props.loggedIn) {\n        const socket = io(SocketUrl);\n        const { user } = this.props;\n        const { userToken } = await getToken()\n\n        let tryReconnect = () => {\n          if (socket.connected === false) {\n            socket.connect();\n          } \n        };\n\n        // setInterval(tryReconnect, 30000);\n        let intervalID = setInterval(tryReconnect, 30000);\n        socket.on(\"disconnect\", async function (reason) {\n          console.log(' ============ SOCKET discconect', reason)\n          debugger\n          intervalID = setInterval(tryReconnect, 2000);\n        });\n\n        socket.on(\"connect_error\", (reason) => {\n          console.log('|||||||||||||||||||||||||  connect_error ===>', reason)\n          setTimeout(() => {\n            socket.connect();\n          }, 1000);\n        });\n\n        socket.on(\"connect\", () => {\n          clearInterval(intervalID);\n          const body = { body: { access_token: userToken } };\n          // console.log('authentication userToken', userToken)\n          // debugger\n          socket.emit(\"authentication\", body);\n\n          socket.on(\"authenticated\", () => {\n            document.querySelector('#home-container')?.classList?.add('socket-authenticated')\n            socket.on(`/swap/${user.id}`, async (swap) => {\n              if (swap.state === \"pending\") {\n                await this.setState({ currentSwap: swap });\n              }\n              this.swap_management(swap);\n            });\n\n            // socket.on(`/biometric_data/${user.id}`, async (biometric) => {\n            //   console.log('biometric_data', biometric)\n            //   debugger\n            // });\n\n\n            socket.on(`/deposit/${user.id}`, async (deposit) => {\n              if (deposit.state === \"pending\" && deposit.currency_type === \"crypto\") {\n                await this.setState({ currentDeposit: deposit });\n              } else {\n                this.deposit_mangagement(deposit);\n              }\n            });\n\n\n            socket.on(`/withdraw/${user.id}`, async (withdraw) => {\n              console.log(withdraw)\n              if (withdraw.state === \"pending\") {\n                await this.setState({ currentWithdraw: withdraw });\n              }\n              this.withdraw_mangagement(withdraw);\n            });\n\n            socket.on(`/withdrawAccount/${user.id}`, async (withdrawAccount) => {\n              if (withdrawAccount.state === \"pending\") {\n                await this.setState({currentWithdrawAccount: withdrawAccount });\n              }\n              this.withdraw_account_mangagement(withdrawAccount);\n            });\n\n            socket.on(`/profile/${user.id}`, async (status) => {\n              if(status.countries){\n                this.status_management(status)\n              }\n            });\n\n          });\n        });\n      }\n    }\n  }\n\n\n\n\n\n  withdraw_account_mangagement = async(withdrawAccount) => {\n\n\n      if(!this.props.withdraw_accounts[withdrawAccount.id]){return}\n\n      if(withdrawAccount.state === 'in_progress' || withdrawAccount.state === 'complete' || withdrawAccount.state === 'rejected'){\n        this.props.action.update_item_state({\n          [withdrawAccount.id]: {\n            ...this.props.withdraw_accounts[withdrawAccount.id],\n            ...withdrawAccount\n          }\n        }, \"withdraw_accounts\");\n\n        if(withdrawAccount.state === 'complete'){\n          this.props.toastMessage(\"Nueva cuenta de retiro inscrita\", \"success\");\n          this.props.action.success_sound();\n        }\n\n      }\n\n  } \n\n  withdraw_mangagement = async (withdraw) => {\n\n\n    if (withdraw.proof) {\n      if (\n        !this.props.withdraws ||\n        (this.props.withdraws && !this.props.withdraws[withdraw.id])\n      ) {\n        // Si no hay ordenes de retiro, ó si las hay, pero no está este retiro dentro de las ordenes disponibles en el estado\n        let cWithdraw = await this.props.coinsendaServices.getOrderById(\n          withdraw.id,\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.get_withdraws(cWithdraw.account_id);\n        // entonces consulte las ultimas ordenes de retiro de esta cuenta y actualiza el estado\n        await this.setState({ currentWithdraw: cWithdraw });\n      }\n      // Teniendo la orden de retiro en el estado, agrégue la prueba de pago y actualice el estado a: \"aceptado\" en el modelo de la orden de retiro\n      if (this.props.withdraws && this.props.withdraws[withdraw.id]) {\n        await this.props.action.update_item_state(\n          {\n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              proof: withdraw.proof,\n              sent: true,\n              state: \"accepted\",\n            },\n          },\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.withdraws[withdraw.id].account_id,\n            order_id: withdraw.id,\n          },\n          1\n        );\n        // this.props.coinsendaServices.showNotification('Retiro exitoso', 'Retiro enviado con éxito')\n        this.props.action.success_sound();\n        if (!this.props.isModalActive && !this.props.isRenderModalActive) {\n          await this.props.action.socket_notify(\n            this.props.withdraws[withdraw.id],\n            \"withdraws\"\n          );\n          this.props.action.toggleOtherModal();\n        }\n      }\n    }\n\n    if (withdraw.state === \"pending\" && withdraw.currency_type === \"crypto\") {\n      // Las ordenes de retiro cripto en estado pendiente se deben de confirmar vía api\n      let res = await this.props.coinsendaServices.addUpdateWithdraw(\n        withdraw.id,\n        \"confirmed\"\n      );\n      if (!res) {\n        this.props.action.isAppLoading(false);\n        return this.props.toastMessage(\n          \"No se ha podido crear la orden de retiro\",\n          \"error\"\n        );\n      }\n    }\n\n    const { currentWithdraw } = this.state;\n    console.log('||||||||||||||||||||||| withdraw socket console ::', withdraw, currentWithdraw)\n    // debugger\n    // console.log('|||||||||||||||||||||||||||||||||||  Withdraw SOCKET ==>', withdraw.state, ' == ', withdraw.id, ' ==> ', currentWithdraw)\n\n    if (\n      withdraw.state === \"confirmed\" &&\n      currentWithdraw.currency_type === \"crypto\"\n    ) {\n      // Añade esta orden de retiro crypto confirmado al estado\n      // actualiza la actividad de la cuenta a la que corresponde este retiro y actualiza el balance\n      let new_withdraw_model = {\n        id: currentWithdraw.id,\n        account_id: currentWithdraw.account_id,\n        ...currentWithdraw,\n        state: \"confirmed\",\n      };\n      await this.props.coinsendaServices.addItemToState(\n        \"withdraws\",\n        new_withdraw_model\n      );\n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw_model.account_id,\n        \"withdraws\"\n      );\n      await this.props.coinsendaServices.manageBalance(\n        new_withdraw_model.account_id,\n        \"reduce\",\n        new_withdraw_model.amount\n      );\n      await this.props.action.isAppLoading(false);\n      this.props.action.add_new_transaction_animation();\n      // this.props.coinsendaServices.getWalletsByUser(true)\n      this.props.history.push(\n        `/wallets/activity/${new_withdraw_model.account_id}/withdraws`\n      );\n    }\n\n    if (\n      withdraw.state === \"accepted\" &&\n      currentWithdraw.currency_type === \"fiat\"\n    ) {\n  \n      let new_withdraw = {...this.state.currentWithdraw};\n      await this.props.coinsendaServices.addItemToState(\"withdraws\", {\n        ...new_withdraw,\n        state: \"confirmed\",\n      }); \n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw.account_id,\n        \"withdraws\"\n      );\n      this.props.action.add_new_transaction_animation();\n      // alert('withdraw accepted')\n      //update used_counter of withdraw account relation\n\n      if (this.props.withdraw_accounts[currentWithdraw.withdraw_account_id]) {\n        let withdraw_account = this.props.withdraw_accounts[\n          currentWithdraw.withdraw_account_id\n        ];\n        //actualiza el movimiento operacional de la cuenta de retiro\n        this.props.action.update_item_state(\n          {\n            [currentWithdraw.withdraw_account_id]: {\n              ...withdraw_account,\n              used_counter: ++withdraw_account.used_counter,\n              inscribed: true,\n            },\n          },\n          \"withdraw_accounts\"\n        );\n      }\n\n      this.props.history.push(`/wallets/activity/${new_withdraw.account_id}/withdraws`);\n\n    }\n\n\n    if (withdraw.state === \"rejected\" || withdraw.state === \"canceled\") {\n      \n      // await this.props.coinsendaServices.get_withdraws(this.props.withdraws[withdraw.id].account_id)\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          { \n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              state: withdraw.state,\n            },\n          },\n          \"withdraws\"\n        );\n\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n\n        await this.props.coinsendaServices.getWalletsByUser(true)\n\n      }, 500);\n\n      // this.props.action.exit_sound();\n      let state = withdraw.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Retiro ${state}`, \"error\");\n    }\n\n    // if(withdraw.metadata && !withdraw.state){\n    //   // alert('withdraw socket')\n    //\n    //     const { userId } = withdraw\n    //     let fiat_accounts = await this.props.coinsendaServices.getFiatAccountByUserId()\n    //     if(!fiat_accounts){return false}\n    //\n    //     for (let i = 0; i < fiat_accounts.length; i++) {\n    //       if(fiat_accounts[i].currency.currency !== 'usd'){\n    //         const { activity_for_account } = this.props\n    //         if(activity_for_account[fiat_accounts[i].id] && activity_for_account[fiat_accounts[i].id].withdraws){return false}\n    //         await this.props.coisendaServices.get_withdraws(fiat_accounts[i].id)\n    //       }\n    //     }\n    //     this.props.toastMessage('Retiro(s) ha(n) sido enviado(s) a tu cuenta bancaria.', 'success')\n    //     this.props.action.success_sound()\n    //\n    // }\n  };\n\n  deposit_mangagement = async (deposit) => {\n\n    console.log('|||||||||||||||||||||||||||| |  DEPOSIT_MANAGEMENT   ==> ', deposit)\n    // debugger\n\n    if (deposit.state === \"pending\" && deposit.currency_type === \"fiat\") {\n      await this.props.coinsendaServices.addItemToState(\"deposits\", {\n        ...deposit,\n        type_order: \"deposit\",\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        deposit.account_id,\n        \"deposits\"\n      );\n    }\n\n    // if(deposit.state === 'confirmed' && && this.state.currentDeposit.currency_type === 'crypto')){\n    if (deposit.state === \"confirmed\") {\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n\n        // si el deposito no está en el estado, es porque es de tipo cripto...\n        let cDeposit = await this.props.coinsendaServices.getDepositById(deposit.id);\n\n        \n        console.log('|||||||| _______________________________________DEPOSIT cDeposit', cDeposit)\n        if(cDeposit?.info?.is_referral) return;\n\n        if (this.props.activity_for_account[cDeposit.account_id] && this.props.activity_for_account[cDeposit.account_id].deposits) {\n          await this.props.coinsendaServices.addItemToState(\"deposits\", {\n            ...cDeposit,\n            type_order: \"deposit\",\n          });\n          await this.props.coinsendaServices.updateActivityState(cDeposit.account_id, \"deposits\");\n        } else {\n          await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        }\n        this.props.action.update_item_state(\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); //actualiza el movimiento operacional de la wallet\n        this.props.action.addNotification(\"wallets\", { account_id: cDeposit.account_id, order_id: cDeposit.id }, 1);\n        // this.props.coinsendaServices.showNotification('Deposito Cripto', 'Nuevo deposito detectado')\n        await this.props.action.socket_notify(\n          { ...cDeposit, state: \"confirmed\" },\n          \"deposits\",\n          \"Nuevo depósito detectado\"\n        );\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n\n    if (deposit.confirmations) {\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n        let cDeposit = await this.props.coinsendaServices.getOrderById(deposit.id, \"deposits\");\n        await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        // console.log('=============> DEPOSIT SOCKET ', cDeposit)\n      }\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              confirmations: deposit.confirmations,\n              state:deposit.confirmations > 5 ? 'accepted' : 'confirmed'\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(this.props.deposits[deposit.id].account_id, \"deposits\");\n      }\n      return;\n    }\n\n\n\n\n\n    if (deposit.state === \"accepted\") {\n      let cDeposit = await this.props.coinsendaServices.getOrderById(\n        deposit.id,\n        \"deposits\"\n      );\n\n        if (cDeposit?.info?.is_referral && this.props.activity_for_account[cDeposit.account_id] && this.props.activity_for_account[cDeposit.account_id].deposits) {\n          await this.props.coinsendaServices.addItemToState(\"deposits\", {\n            ...cDeposit,\n            type_order: \"deposit\",\n          });\n        } else if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n          await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        }\n\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n\n        this.props.action.update_item_state(\n          //actualiza el movimiento operacional de la wallet\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); \n        \n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.deposits[deposit.id].account_id,\n            order_id: deposit.id,\n          },\n          1\n        );\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        await this.props.action.socket_notify(\n          this.props.deposits[deposit.id],\n          \"deposits\"\n        );\n        await this.props.action.renderModal(null);\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        // this.props.coinsendaServices.showNotification('Deposito aceptado', 'Tu deposito ha sido aceptado exitosamente')\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n\n\n\n\n\n\n\n    if (deposit.state === \"rejected\" || deposit.state === \"canceled\") {\n      if (this.props.deposits[deposit.id].state === \"canceled\") {\n        return false;\n      }\n      // setTimeout(async()=>{\n      // Tiempo para que transcurra la animación del item\n\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true)\n        // await this.props.action.update_pending_activity(this.props.deposits[deposit.id].account_id, 'deposits')\n      }, 500);\n      this.props.action.exit_sound();\n      let state = deposit.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Depósito ${state}`, \"error\");\n      // }, 2000)\n    }\n\n    if (deposit.state === \"confirmed\") {\n      // console.log('deposito confirmado fiat')\n      // this.props.coinsendaServices.showNotification('Deposito fiat', 'Su deposito ha sido confirmado con éxito')\n      if (\n        this.props.deposits &&\n        this.props.deposits[deposit.id] &&\n        this.props.deposits[deposit.id].currency_type === \"fiat\"\n      ) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        // this.props.history.push('?form=deposit_confirmed_success')\n        this.props.action.isAppLoading(false);\n        this.props.action.success_sound();\n        this.props.toastMessage(\"Depósito confirmado con exito\", \"success\");\n      }\n    }\n  };\n\n\n\n\n\n\n\n  swap_management = async (swap) => {\n    // console.log('||||||||||||||||||||||||||||| ===========> SOCKET SWAP => ', swap.state, '  ==>  ', swap)\n    // debugger\n\n\n    if (swap.state === \"pending\") {\n      // await this.props.action.current_section_params({ active_trade_operation: true })\n      // el bought lo retorna el socket en el estado aceptado\n      let new_swap = swap;\n      await this.props.coinsendaServices.addItemToState(\"swaps\", {\n        ...new_swap,\n        state: \"pending\",\n        activeTrade: true,\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        new_swap.account_from,\n        \"swaps\"\n      );\n      this.props.action.isAppLoading(false);\n      await this.props.history.push(`/wallets/activity/${new_swap.account_from}/swaps`);\n      this.props.action.add_new_transaction_animation();\n    }\n\n\n    if(swap.state === 'rejected' || swap.state === 'canceled'){\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [this.state.currentSwap.id]: {\n              ...this.props.swaps[this.state.currentSwap.id],\n              state: swap.state,\n              bought: swap.bought,\n              activeTrade: false\n            },\n          },\n          \"swaps\"\n        );\n        this.props.coinsendaServices.updateActivityState(this.state.currentSwap.account_from, \"swaps\");\n        this.props.action.ticket_rejected();\n        return this.props.toastMessage(\"El intercambio no se pudo realizar, contacta con soporte\", \"error\");\n      }, 2500);\n\n    }\n\n\n\n\n    if (swap.state === \"accepted\" && this.state.currentSwap.state !== \"done\") {\n      const { currentSwap } = this.state;\n\n      await this.setState({ currentSwap: { ...currentSwap, state: \"done\" } });\n      setTimeout(async () => {\n        await this.props.action.success_sound();\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"confirmed\",\n              bought: swap.bought,\n            },\n          },\n          \"swaps\"\n        );\n      }, 2500);\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"accepted\",\n            },\n          },\n          \"swaps\"\n        );\n        await this.props.action.success_sound();\n        setTimeout(async () => {\n          await this.props.action.update_item_state(\n            {\n              [currentSwap.id]: {\n                ...this.props.swaps[currentSwap.id],\n                activeTrade: false,\n              },\n            },\n            \"swaps\"\n          );\n          await this.props.coinsendaServices.manageBalance(\n            currentSwap.account_from,\n            \"reduce\",\n            currentSwap.spent\n          );\n          await this.props.action.add_coin_sound();\n          await this.props.toastMessage(\n            \"Nuevo intercambio realizado\",\n            \"success\"\n          );\n          this.props.coinsendaServices.updateActivityState(currentSwap.account_from, \"swaps\");\n        }, 2000);\n      }, 5500);\n\n      // add the acredited order into account to\n      if (this.props.wallets[currentSwap.account_to]) {\n        const { wallets } = this.props;\n        this.props.coinsendaServices.updateActivityState(\n          currentSwap.account_to,\n          \"swaps\"\n        );\n        this.props.action.update_item_state(\n          {\n            [currentSwap.account_to]: {\n              ...wallets[currentSwap.account_to],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        );\n      }\n    }\n\n\n\n    if (swap.status === \"error\") {\n      this.props.toastMessage(\n        \"El intercambio no se pudo realizar, contacta con soporte\",\n        \"error\"\n      );\n      this.props.action.ticket_canceled();\n      // this.props.action.current_section_params({swap_socket_channel:this.state.currentSwap})\n    }\n  };\n\n  status_management = async(status) => {\n    if(this.props.formModal){\n     await this.props.action.toggleModal(false);\n    }\n    await this.props.coinsendaServices.updateUserStatus(status)\n    if(status.countries.international === 'level_1' && statusCounter < 1){\n      statusCounter++\n      console.log('|||||||||||  status_management')\n      this.props.coinsendaServices.init()\n      this.props.history.push(`/wallets`);\n    }\n  }\n\n  \n\n  render() {\n    return null;\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  // console.log('||||||||||||||||||||||||||||||||||||||||||||| ======>>> props Sockets ==> ', props)\n\n  const { loggedIn } = state.auth;\n  const {\n    user,\n    deposits,\n    withdraws,\n    wallets,\n    withdraw_accounts,\n    swaps,\n  } = state.modelData;\n  const { ui, form } = state;\n\n  return {\n    loggedIn,\n    user: user,\n    deposits,\n    withdraws,\n    activity_for_account: state.storage.activity_for_account,\n    wallets,\n    swaps,\n    withdraw_accounts,\n    isModalActive: ui.otherModal,\n    isRenderModalActive: ui.modal.render,\n    formModal:form.isModalVisible\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withCoinsendaServices(SocketsComponent))\n);\n"],"sourceRoot":""}