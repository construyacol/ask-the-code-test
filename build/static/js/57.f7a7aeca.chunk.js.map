{"version":3,"sources":["components/forms/widgets/personalKycComponent/selectList/styles.js","components/forms/widgets/personalKycComponent/selectList/itemList.js","components/forms/hooks/intersectionObserver.js"],"names":["SelectListMain","styled","div","props","height","ItemListGrid","backTopSection","keyframes","ListContainer","ItemList","item","onClick","show","element","useObserver","imgSrc","img","flag","className","value","ref","alt","src","width","uiName","React","memo","useRef","setShow","useState","useEffect","then","observer","window","IntersectionObserver","entries","isIntersecting","disconnect","current","observe"],"mappings":"oVAEO,MAAMA,EAAiBC,IAAOC,IAAV,0eAEfC,GAASA,EAAMC,SAuBdC,EAAeJ,IAAOC,IAAV,mjBAiCZI,EAAiBC,YAAH,wFASdC,EAAgBP,IAAOC,IAAV,uOAKXI,I,iCC1Ef,oDAKA,MAAMG,EAAW,IAAwB,IAAvB,KAAEC,EAAF,QAAQC,GAAc,EAEtC,MAAQC,EAAMC,GAAYC,cAEpBC,GAAa,OAAJL,QAAI,IAAJA,OAAA,EAAAA,EAAMM,OAAN,OAAaN,QAAb,IAAaA,OAAb,EAAaA,EAAMO,MAElC,OACE,eAAC,eAAD,CAAcC,UAAS,wBAAsB,OAAJR,QAAI,IAAJA,OAAA,EAAAA,EAAMS,QAAS,IAAMR,QAASA,EAASS,IAAKP,EAArF,UACE,qBAAKK,UAAU,iBAAf,SAEIH,GACC,qBAAKM,IAAI,GAAGC,IAAKV,EAAOG,EAAS,GAAIQ,MAAO,GAAInB,OAAQ,OAG7D,mBAAGc,UAAU,qBAAb,gBAAoCR,QAApC,IAAoCA,OAApC,EAAoCA,EAAMc,aAKjCC,cAAMC,KAAKjB,I,iCCxB1B,6CAEO,MAAMK,EAAc,KACzB,MAAMD,EAAUc,iBAAO,OAChBf,EAAMgB,GAAWC,oBAAS,GAiBjC,OAfAC,qBAAU,KACR,oCAAgCC,MAAK,KACnC,MAAMC,EAAW,IAAIC,OAAOC,sBAAsBC,IAChD,MAAM,eAAEC,GAAmBD,EAAQ,GAC/BC,IACFR,GAAQ,GACRI,EAASK,iBAGTL,GAAYnB,GAAWA,EAAQyB,SACjCN,EAASO,QAAQ1B,EAAQyB,cAG5B,CAACzB,IAEG,CAACD,EAAMC","file":"static/js/57.f7a7aeca.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components'\n\nexport const SelectListMain = styled.div`\n  width: calc(100% - 20px);\n  height: ${props => props.height};\n  transition: .3s;\n  animation-delay: 1s;\n  margin: 20px 10px 10px;\n  overflow: scroll;\n  &::-webkit-scrollbar {\n    width: 8px;\n    cursor: pointer;\n  }\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: #f5f5f5;\n  }\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: #e2e2e2;\n  }\n`\n\nexport const ItemListGrid = styled.div`\n  display: grid;\n  column-gap: 15px;\n  grid-template-rows: 1fr;\n  grid-template-columns: auto 1fr;\n  border: 1px solid #ffffff;\n  border-radius: 6px;\n  padding: 0 15px;\n  cursor: pointer;\n  transition: .15s;\n  height: 60px;\n  .itemList__icon{\n    display: flex;\n    align-items: center;\n  }\n  img{\n    border-radius:50%;\n  }\n  p{\n    color: #676767;\n    display: flex;\n    align-items: center;\n  }\n  &:hover{\n    border: 1px solid #f5f5f5;\n    background: #f5f5f5;\n    p{\n      color: #353535;\n    }\n  }\n\n`\n\nexport const backTopSection = keyframes`\n  0%{\n    opacity: 0;\n  }\n  100%{\n    opacity: 1;\n  }\n`\n\nexport const ListContainer = styled.div`\n  display: grid;\n  grid-template-rows: repeat(auto-fill, auto);\n  row-gap: 7px;\n  opacity: 0;\n  animation: ${backTopSection};\n  animation-duration: .3s;\n  animation-delay: .3s;\n  animation-fill-mode: forwards;\n`\n","import React from 'react'\nimport { ItemListGrid } from './styles'\nimport { useObserver } from '../../../hooks/intersectionObserver'\n\n\nconst ItemList = ({ item, onClick }) => {\n\n  const [ show, element ] = useObserver()\n\n  const imgSrc = item?.img || item?.flag\n\n  return(\n    <ItemListGrid className={`itemListGrid ${item?.value || ''}`} onClick={onClick} ref={element}>\n      <div className=\"itemList__icon\" >\n      {\n          imgSrc &&\n           <img alt=\"\" src={show ? imgSrc : ''} width={35} height={35}></img>\n      }\n      </div>\n      <p className=\"fuente countryName\" >{item?.uiName}</p>\n    </ItemListGrid>\n  )\n}\n\nexport default React.memo(ItemList)\n\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\n\nexport const useObserver = () => {\n  const element = useRef(null);\n  const [show, setShow] = useState(false); \n\n  useEffect(() => {\n    import(\"intersection-observer\").then(() => {\n      const observer = new window.IntersectionObserver((entries) => {\n        const { isIntersecting } = entries[0];\n        if (isIntersecting) {\n          setShow(true);\n          observer.disconnect();\n        }\n      });\n      if (observer && element && element.current) {\n        observer.observe(element.current);\n      }\n    });\n  }, [element]);\n\n  return [show, element];\n};\n"],"sourceRoot":""}