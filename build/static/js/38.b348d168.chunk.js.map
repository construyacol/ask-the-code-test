{"version":3,"sources":["components/widgets/maps/AmericaMap.jsx","components/widgets/maps/select_country/select_country.js"],"names":["AmericaMap","_ref","availableCountries","actionLoader","loader","setSelectedCountry","_useState","useState","wrapperid","Object","slicedToArray","getCountryName","data","properties","admin","toLowerCase","useEffect","d3Cdn","getCdnPath","loadDynamicScript","d3","window","mapContainer","document","getElementById","isFirefox","navigator","userAgent","indexOf","currentData","country","w","h","active","select","minZoom","Math","max","clientWidth","clientHeight","maxZoom","projection","geoEquirectangular","center","scale","translate","path","geoPath","svg","concat","append","attr","countriesGroup","zoom","on","_ref2","transform","x","y","k","initiateZoom","scaleExtent","translateExtent","midX","midY","transition","duration","call","zoomIdentity","json","then","selectAll","features","enter","props","node","children","selectedCountryElement","querySelector","isActived","classList","value","includes","console","log","remove","target","box","centroid","paddingPerc","paths","ppp","classed","minXY","maxXY","zoomWidth","abs","zoomHeight","zoomMidX","zoomMidY","maxXscale","maxYscale","zoomScale","min","offsetX","offsetY","dleft","dtop","boxZoom","bounds","mapPaths","react_default","a","createElement","id","className","loaders","label","SelectCountry","state","available_countries","disabled","country_match","action_loader","payload","_this","setState","load_countries","_callee","res","regenerator_default","wrap","_context","prev","next","coinsendaServices","countryValidators","sent","abrupt","countries","available_country_list","country_list","stop","update_country","_callee2","e","without_click","match","_context2","matchItem","primary","length","simulate_click","reset_data","new_country_selected","select_country","this","_this$props","appLoadLabel","_this$state","react","inputs","handleSubmit","style","display","maps_AmericaMap","width","height","selectedCountry","Component","connect","_state$modelData","modelData","user","wallets","all_pairs","isLoading","dispatch","action","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/38.b348d168.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport SimpleLoader from '../loaders'\nimport { getCdnPath } from '../../../environment'\nimport loadDynamicScript from '../../../utils/loadDynamicScript'\n\nimport './sAmerica.css'\n\n\nconst AmericaMap = ({\n    availableCountries,\n    actionLoader,\n    loader,\n    setSelectedCountry, \n    // selectedCountry\n}) => {\n\n    const [wrapperid] = useState('map-holder')\n    const getCountryName = (data) => data.properties.admin.toLowerCase()\n\n    useEffect(() => {\n        let d3Cdn = getCdnPath('d3')\n        loadDynamicScript(\n            () => {\n                const d3 = window.d3\n                const mapContainer = document.getElementById(wrapperid)\n                if (!mapContainer) return\n\n                const isFirefox = navigator && navigator.userAgent.toLowerCase().indexOf('firefox') > -1\n\n                const currentData = {\n                    country: null,\n                }\n                const w = 3000\n                const h = 1250\n                let active = d3.select(null)\n                let minZoom = Math.max(\n                    mapContainer.clientWidth / w,\n                    mapContainer.clientHeight / h\n                )\n                let maxZoom = 20 * minZoom\n\n                const projection = d3\n                    .geoEquirectangular()\n                    .center([-60, -25])\n                    .scale(700)\n                    .translate([w / 2, h / 2])\n                // Define map path\n                const path = d3.geoPath().projection(projection)\n                // create an SVG\n                const svg = d3\n                    .select(`#${wrapperid}`)\n                    .append('svg')\n                    // set to the same size as the \"map-holder\" div\n                    .attr('id', 'svg_map')\n                    .attr('width', mapContainer.clientWidth)\n                    .attr('height', mapContainer.clientHeight)\n                // add zoom functionality\n                // .call(zoom)\n\n                const countriesGroup = svg.append('g').attr('id', 'map')\n                \n                // Create function to apply zoom to countriesGroup\n\n                // Define map zoom behaviour\n                const zoomed = ({ transform }) => {\n                    let { x, y, k } = transform\n                    countriesGroup.attr(\n                        'transform',\n                        'translate(' + [x, y] + ')scale(' + k + ')'\n                    )\n                }\n                const zoom = d3.zoom().on('zoom', zoomed)\n                // Function that calculates zoom/pan limits and sets zoom to default value\n                const initiateZoom = () => {\n                    // set extent of zoom to chosen values\n                    // set translate extent so that panning can't cause map to move out of viewport\n                    zoom.scaleExtent([minZoom, maxZoom]).translateExtent([\n                        [0, 0],\n                        [w, h],\n                    ])\n                    // define X and Y offset for centre of map to be shown in centre of holder\n                    let midX = (mapContainer.clientWidth - minZoom * w) / 2\n                    let midY = (mapContainer.clientHeight - minZoom * h) / 2\n                    // change zoom transform to min zoom and centre offsets\n                    svg.transition()\n                        .duration(750)\n                        .call(\n                            zoom.transform,\n                            d3.zoomIdentity.translate(midX, midY).scale(minZoom)\n                        )\n                }\n\n                const boxZoom = (\n                    box,\n                    centroid,\n                    paddingPerc,\n                    data,\n                    paths,\n                    ppp\n                ) => {\n                    let country = getCountryName(data)\n                    let available_country = availableCountries[country]\n                    \n                    if (!available_country) {\n                        return false\n                    }\n\n                    active.classed('active', false)\n                    active.classed('disabled', false)\n                    // if (country === currentData.country) return reset()\n\n                    d3.select('#map').selectAll('path').classed('active', false)\n                    d3.select(ppp.target).classed('active', true)\n                    currentData.country = country\n\n                    if (isFirefox) {\n                        return false\n                    }\n\n                    // setSelectedCountry(country)\n\n\n                    const minXY = box[0]\n                    const maxXY = box[1]\n                    // find size of map area defined\n                    let zoomWidth = Math.abs(minXY[0] - maxXY[0])\n                    let zoomHeight = Math.abs(minXY[1] - maxXY[1])\n                    // find midpoint of map area defined\n                    const zoomMidX = centroid[0]\n                    const zoomMidY = centroid[1]\n                    // increase map area to include padding\n                    zoomWidth = zoomWidth * (1 + paddingPerc / 100)\n                    zoomHeight = zoomHeight * (1 + paddingPerc / 100)\n                    // find scale required for area to fill svg\n                    const maxXscale =\n                        document.getElementById('svg_map').clientWidth /\n                        zoomWidth\n                    const maxYscale =\n                        document.getElementById('svg_map').clientHeight /\n                        zoomHeight\n                    let zoomScale = Math.min(maxXscale, maxYscale)\n                    // handle some edge cases\n                    // limit to max zoom (handles tiny countries)\n                    zoomScale = Math.min(zoomScale, maxZoom)\n                    // limit to min zoom (handles large countries and countries that span the date line)\n                    zoomScale = Math.max(zoomScale, minZoom)\n                    // Find screen pixel equivalent once scaled\n                    const offsetX = zoomScale * zoomMidX\n                    const offsetY = zoomScale * zoomMidY\n                    // Find offset to centre, making sure no gap at left or top of holder\n                    let dleft = Math.min(\n                        0,\n                        document.getElementById('svg_map').clientWidth / 2 -\n                            offsetX\n                    )\n                    let dtop = Math.min(\n                        0,\n                        document.getElementById('svg_map').clientHeight / 2 -\n                            offsetY\n                    )\n                    // Make sure no gap at bottom or right of holder\n                    dleft = Math.max(\n                        document.getElementById('svg_map').clientWidth -\n                            w * zoomScale,\n                        dleft\n                    )\n                    dtop = Math.max(\n                        document.getElementById('svg_map').clientHeight -\n                            h * zoomScale,\n                        dtop\n                    )\n                    // set zoom\n                    svg.transition()\n                        .duration(500)\n                        .call(\n                            zoom.transform,\n                            d3.zoomIdentity\n                                .translate(dleft, dtop)\n                                .scale(zoomScale)\n                        )\n                }\n\n\n                d3.json('https://api.jsonbin.io/b/5e961dcd5fa47104cea07454').then((json) => {\n                    if (!json) return\n                    actionLoader(false)\n                    // draw a path for each feature/country\n                    countriesGroup\n                        .selectAll('path')\n                        .data(json.features)\n                        .enter()\n                        .append('path')\n                        .attr('d', path)\n                        .attr('stroke', 'white')\n                        .attr('id', (data) => getCountryName(data))\n                        .attr('fill', (data) => {\n                            const isValidCountry =\n                                availableCountries &&\n                                availableCountries[getCountryName(data)]\n\n                            const filled = isValidCountry\n                                ? '#cecdcd'\n                                : '#e5e5e5'\n\n                            return filled\n                        })\n                        .attr('class', (data) => {\n                            const isValidCountry =\n                                availableCountries &&\n                                availableCountries[getCountryName(data)]\n\n                            const filled = isValidCountry\n                                ? 'available_country'\n                                : ''\n\n                            return filled\n                        })\n                        .on('click', (props, data) => {\n\n                            const mapPaths = d3.select('#map').node().children\n                            const country = getCountryName(data)\n                            let selectedCountryElement = document.querySelector(`#${country}`)\n                            const isActived = selectedCountryElement.classList.value.includes('active')\n                            \n                            console.log('isActive => ', isActived)\n\n                            if(isActived){\n                                // disabled country selection\n                                selectedCountryElement.classList.remove('active')\n                                setSelectedCountry({target:{value:null}}, true)\n                                initiateZoom()\n\n                            }else {\n                                setSelectedCountry({target:{value:country}}, true)\n                                boxZoom(\n                                    path.bounds(data),\n                                    path.centroid(data),\n                                    20,\n                                    data,\n                                    mapPaths,\n                                    props\n                                )\n                            }\n                        })\n                    initiateZoom()\n                })\n            },\n            d3Cdn,\n            'd3'\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wrapperid])\n\n    return (\n        <div id={wrapperid}>\n            {loader && (\n                <div className=\"mapLoader\">\n                    <SimpleLoader label=\"Cargando mapa\" />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default AmericaMap\n","import React, { Component, Fragment } from \"react\";\nimport SimpleLoader from \"../../loaders\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../../../actions\";\n// import SAmerica from \"../sAmerica\";\nimport AmericaMap from '../AmericaMap'\nimport { InputCountry } from \"../../inputs\";\nimport { matchItem } from \"../../../../utils\";\nimport { simulate_click } from \"../../../../utils\";\n\nimport \"./loader_app.css\";\nimport withCoinsendaServices from \"../../../withCoinsendaServices\";\n\nclass SelectCountry extends Component {\n  state = {\n    available_countries: null,\n    disabled: true,\n    country_match: null,\n  };\n\n  componentDidMount() {\n    this.load_countries();\n  }\n\n  action_loader = (payload) => {\n    // this.props.action.isAppLoading(payload)\n    this.setState({ disabled: false });\n  };\n\n  load_countries = async () => {\n    // this.props.action.isAppLoading(true)\n    let res = await this.props.coinsendaServices.countryValidators();\n    if (!res) {\n      return false;\n    }\n    // console.log('||||| =====================================> SelectCountry', res)\n    return this.setState({\n      available_countries: res.countries,\n      available_country_list: res.country_list,\n    });\n  };\n\n  update_country = async (e, without_click) => {\n    // alert('update country')\n    let value = e.target && e.target.value \n    const { available_country_list } = this.state;\n    console.log('update_country', value)\n    if(!value){return}\n    let match = await matchItem(\n      available_country_list,\n      { primary: value },\n      \"value\"\n    );\n\n    if (match && match.length === 1) {\n      //Si hay una coincidencia con la busqueda simulamos el click en el país de coincidencia\n      this.setState({ country_match: match[0] });\n\n      if (!without_click) {\n        simulate_click(document.getElementById(`${match[0].value}`), \"click\");\n      }\n    }\n  };\n\n\n  reset_data = () => {\n    simulate_click(document.getElementById(`${this.state.country_match.value}`), \"click\");\n    this.setState({ country_match: null });\n  };\n\n  new_country_selected = () => {\n    const { value } = this.state.country_match;\n    this.props.select_country(value);\n  };\n\n  render() {\n    const { appLoadLabel, loader } = this.props;\n\n    const { available_countries, country_match, disabled } = this.state;\n\n    // console.log('available_countries',available_countries)\n\n    return (\n      <Fragment>\n        {available_countries ? (\n          <div className=\"selectCountry\">\n            <div className=\"LoaderAppTittle\">\n              <InputCountry\n                country_match={country_match}\n                update_country={this.update_country}\n                reset_data={this.reset_data}\n                loader={loader}\n                // disabled={disabled}\n                handleSubmit={this.new_country_selected}\n                active={country_match ? true : null}\n              />\n            </div>\n            <div className={`SamericaContainer ${!disabled ? \"enableMap\" : \"\"}`} >\n              <div className=\"blocker\" style={{ display: country_match ? \"initial\" : \"none\" }} ></div>\n              <AmericaMap\n                width={900}\n                height={768}\n                actionLoader={this.action_loader}\n                availableCountries={available_countries}\n                setSelectedCountry={this.update_country}\n                selectedCountry={this.state.country_match}\n              />\n\n              {/* <SAmerica\n                width={900}\n                height={768}\n                action_loader={this.action_loader}\n                available_countries={available_countries}\n                select_country_component={this.update_country}\n              /> */}\n\n            </div>\n            <p></p>\n          </div>\n        ) : (\n          <SimpleLoader label={`${appLoadLabel}`} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  // console.log('||||||||| LOADEER STATE', state)\n  const { user, wallets, all_pairs } = state.modelData;\n  const { loader } = state.isLoading;\n\n  return {\n    appLoadLabel: state.isLoading.appLoadLabel,\n    user: user,\n    wallets,\n    all_pairs,\n    country: null,\n    loader,\n    // country:'colombia'\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withCoinsendaServices(SelectCountry));\n"],"sourceRoot":""}