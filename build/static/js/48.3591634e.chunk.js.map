{"version":3,"sources":["components/sockets/sockets.js"],"names":["SocketUrl","Environtment","SocketsComponent","state","currentSwap","currentDeposit","currentWithdraw","isUpdated","withdraw_account_mangagement","_callee","withdrawAccount","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","_this","props","withdraw_accounts","id","abrupt","action","update_item_state","Object","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","toastMessage","success_sound","stop","withdraw_mangagement","_callee3","withdraw","cWithdraw","new_withdraw_model","new_withdraw","withdraw_account","_context3","proof","withdraws","coinsendaServices","getOrderById","sent","get_withdraws","account_id","setState","updateActivityState","addNotification","order_id","isModalActive","isRenderModalActive","socket_notify","toggleOtherModal","currency_type","addUpdateWithdraw","isAppLoading","console","log","addItemToState","manageBalance","amount","add_new_transaction_animation","history","push","concat","withdraw_account_id","used_counter","inscribed","setTimeout","_home_andres_repos_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","mark","_callee2","_context2","getWalletsByUser","exit_sound","deposit_mangagement","_callee5","deposit","cDeposit","_cDeposit","_cDeposit2","_context5","type_order","deposits","getDepositById","activity_for_account","get_deposits","wallets","count","add_coin_sound","confirmations","renderModal","_callee4","_context4","swap_management","_callee10","swap","new_swap","_context10","activeTrade","account_from","_callee6","_context6","swaps","bought","ticket_rejected","_callee7","_context7","_callee9","_context9","_callee8","_context8","spent","account_to","status","ticket_canceled","status_management","_callee11","_context11","updateUserStatus","countries","international","init","orderMock","this","_this2","testSocket","prevProps","loggedIn","socket","io","user","getToken","userToken","tryReconnect","connected","connect","intervalID","setInterval","on","_ref13","_callee14","reason","_context14","_x8","apply","arguments","clearInterval","body","access_token","emit","_ref14","_callee15","_context15","_this3","_x9","_ref15","_callee16","_context16","_x10","_ref16","_callee17","_context17","_x11","_ref17","_callee18","_context18","currentWithdrawAccount","_x12","_ref18","_callee19","_context19","_x13","Component","withRouter","auth","_state$modelData","modelData","ui","storage","otherModal","modal","render","dispatch","bindActionCreators","actions","withCoinsendaServices"],"mappings":"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","file":"static/js/48.3591634e.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport actions from \"../../actions\";\nimport io from \"socket.io-client\";\nimport Environtment from \"../../environment\";\n// import { objectToArray } from '../../services'\nimport { withRouter } from \"react-router\";\nimport withCoinsendaServices from \"../withCoinsendaServices\";\nimport { getToken } from '../utils'\nconst { SocketUrl } = Environtment;\n\n\nclass SocketsComponent extends Component {\n  state = {\n    currentSwap: null,\n    currentDeposit: null,\n    currentWithdraw: null,\n    isUpdated: false,\n  };\n\n  async testSocketExecuted(orderMock) {\n    console.log('======================================== ______ testSocketExecuted: ', orderMock)\n    if (orderMock.state === \"pending\" && orderMock.currency_type === \"crypto\") {\n      await this.setState({ currentDeposit: orderMock });\n    } else {\n      this.deposit_mangagement(orderMock);\n    }\n   }\n\n  async testSocket() {\n\n    let orderMock = {\n      id:\"6184c0ad67e372004414b152\",\n      state:\"rejected\"\n    }\n\n    this.withdraw_mangagement(orderMock);\n\n    // this.testSocketExecuted()\n    // let confirmations = 1\n    // setInterval(()=>{\n    //   if(confirmations < 7){\n    //     orderMock = {\n    //       confirmations: confirmations,\n    //       id: \"617621370b0a1b0048ae9cae\"\n    //     }\n    //     this.testSocketExecuted(orderMock)\n    //     confirmations++\n    //   }\n    // }, 5000)\n  }\n\n componentDidMount(){\n   setTimeout(()=> {\n     this.testSocket()\n    // this.props.coinsendaServices.get_deposits('61845def4c9f0d003e7d6db8', 20, this.props.user.deposits.length)\n    // console.log('deposits', this.props.user.deposits, this.props.user.deposits.length)\n   }, 7000)\n }\n\n async componentDidUpdate(prevProps) {\n\n\n    if (!this.state.isUpdated || this.props.loggedIn !== prevProps.loggedIn) {\n      this.setState({\n        isUpdated: true,\n      });\n      if (this.props.loggedIn) {\n        const socket = io(SocketUrl);\n        const { user } = this.props;\n        const { userToken } = await getToken()\n\n        let tryReconnect = () => {\n          if (socket.connected === false) {\n            socket.connect();\n          } \n        };\n\n        // setInterval(tryReconnect, 30000);\n        let intervalID = setInterval(tryReconnect, 30000);\n        socket.on(\"disconnect\", async function (reason) {\n          intervalID = setInterval(tryReconnect, 2000);\n        });\n\n        socket.on(\"connect_error\", (reason) => {\n          console.log('|||||||||||||||||||||||||  connect_error ===>', reason)\n          debugger\n          setTimeout(() => {\n            socket.connect();\n          }, 1000);\n        });\n\n        socket.on(\"connect\", () => {\n          clearInterval(intervalID);\n          const body = { body: { access_token: userToken } };\n          // console.log('authentication userToken', userToken)\n          // debugger\n          socket.emit(\"authentication\", body);\n\n          socket.on(\"authenticated\", () => {\n\n            socket.on(`/swap/${user.id}`, async (swap) => {\n              if (swap.state === \"pending\") {\n                await this.setState({ currentSwap: swap });\n              }\n              this.swap_management(swap);\n            });\n\n\n            socket.on(`/deposit/${user.id}`, async (deposit) => {\n              if (deposit.state === \"pending\" && deposit.currency_type === \"crypto\") {\n                await this.setState({ currentDeposit: deposit });\n              } else {\n                this.deposit_mangagement(deposit);\n              }\n            });\n\n\n\n            socket.on(`/withdraw/${user.id}`, async (withdraw) => {\n              console.log(withdraw)\n              if (withdraw.state === \"pending\") {\n                await this.setState({ currentWithdraw: withdraw });\n              }\n              this.withdraw_mangagement(withdraw);\n            });\n\n            socket.on(`/withdrawAccount/${user.id}`, async (withdrawAccount) => {\n              if (withdrawAccount.state === \"pending\") {\n                await this.setState({currentWithdrawAccount: withdrawAccount });\n              }\n              this.withdraw_account_mangagement(withdrawAccount);\n            });\n\n            socket.on(`/profile/${user.id}`, async (status) => {\n              if(status.countries){\n                this.status_management(status)\n              }\n            });\n\n          });\n        });\n      }\n    }\n  }\n\n\n\n\n\n  withdraw_account_mangagement = async(withdrawAccount) => {\n\n\n      if(!this.props.withdraw_accounts[withdrawAccount.id]){return}\n\n      if(withdrawAccount.state === 'in_progress' || withdrawAccount.state === 'complete' || withdrawAccount.state === 'rejected'){\n        this.props.action.update_item_state({\n          [withdrawAccount.id]: {\n            ...this.props.withdraw_accounts[withdrawAccount.id],\n            ...withdrawAccount\n          }\n        }, \"withdraw_accounts\");\n\n        if(withdrawAccount.state === 'complete'){\n          this.props.toastMessage(\"Nueva cuenta de retiro inscrita\", \"success\");\n          this.props.action.success_sound();\n        }\n\n      }\n\n  }\n\n  withdraw_mangagement = async (withdraw) => {\n\n\n    if (withdraw.proof) {\n      if (\n        !this.props.withdraws ||\n        (this.props.withdraws && !this.props.withdraws[withdraw.id])\n      ) {\n        // Si no hay ordenes de retiro, ó si las hay, pero no está este retiro dentro de las ordenes disponibles en el estado\n        let cWithdraw = await this.props.coinsendaServices.getOrderById(\n          withdraw.id,\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.get_withdraws(cWithdraw.account_id);\n        // entonces consulte las ultimas ordenes de retiro de esta cuenta y actualiza el estado\n        await this.setState({ currentWithdraw: cWithdraw });\n      }\n      // Teniendo la orden de retiro en el estado, agrégue la prueba de pago y actualice el estado a: \"aceptado\" en el modelo de la orden de retiro\n      if (this.props.withdraws && this.props.withdraws[withdraw.id]) {\n        await this.props.action.update_item_state(\n          {\n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              proof: withdraw.proof,\n              sent: true,\n              state: \"accepted\",\n            },\n          },\n          \"withdraws\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.withdraws[withdraw.id].account_id,\n            order_id: withdraw.id,\n          },\n          1\n        );\n        // this.props.coinsendaServices.showNotification('Retiro exitoso', 'Retiro enviado con éxito')\n        this.props.action.success_sound();\n        if (!this.props.isModalActive && !this.props.isRenderModalActive) {\n          await this.props.action.socket_notify(\n            this.props.withdraws[withdraw.id],\n            \"withdraws\"\n          );\n          this.props.action.toggleOtherModal();\n        }\n      }\n    }\n\n    if (withdraw.state === \"pending\" && withdraw.currency_type === \"crypto\") {\n      // Las ordenes de retiro cripto en estado pendiente se deben de confirmar vía api\n      let res = await this.props.coinsendaServices.addUpdateWithdraw(\n        withdraw.id,\n        \"confirmed\"\n      );\n      if (!res) {\n        this.props.action.isAppLoading(false);\n        return this.props.toastMessage(\n          \"No se ha podido crear la orden de retiro\",\n          \"error\"\n        );\n      }\n    }\n\n    const { currentWithdraw } = this.state;\n    console.log('||||||||||||||||||||||| withdraw socket console ::', withdraw, currentWithdraw)\n    // debugger\n    // console.log('|||||||||||||||||||||||||||||||||||  Withdraw SOCKET ==>', withdraw.state, ' == ', withdraw.id, ' ==> ', currentWithdraw)\n\n    if (\n      withdraw.state === \"confirmed\" &&\n      currentWithdraw.currency_type === \"crypto\"\n    ) {\n      // Añade esta orden de retiro crypto confirmado al estado\n      // actualiza la actividad de la cuenta a la que corresponde este retiro y actualiza el balance\n      let new_withdraw_model = {\n        id: currentWithdraw.id,\n        account_id: currentWithdraw.account_id,\n        ...currentWithdraw,\n        state: \"confirmed\",\n      };\n      await this.props.coinsendaServices.addItemToState(\n        \"withdraws\",\n        new_withdraw_model\n      );\n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw_model.account_id,\n        \"withdraws\"\n      );\n      await this.props.coinsendaServices.manageBalance(\n        new_withdraw_model.account_id,\n        \"reduce\",\n        new_withdraw_model.amount\n      );\n      await this.props.action.isAppLoading(false);\n      this.props.action.add_new_transaction_animation();\n      // this.props.coinsendaServices.getWalletsByUser(true)\n      this.props.history.push(\n        `/wallets/activity/${new_withdraw_model.account_id}/withdraws`\n      );\n    }\n\n    if (\n      withdraw.state === \"accepted\" &&\n      currentWithdraw.currency_type === \"fiat\"\n    ) {\n      let new_withdraw = this.state.currentWithdraw;\n      await this.props.coinsendaServices.addItemToState(\"withdraws\", {\n        ...new_withdraw,\n        state: \"confirmed\",\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        new_withdraw.account_id,\n        \"withdraws\"\n      );\n      this.props.action.add_new_transaction_animation();\n      // alert('withdraw accepted')\n      //update used_counter of withdraw account relation\n\n      if (this.props.withdraw_accounts[currentWithdraw.withdraw_account_id]) {\n        let withdraw_account = this.props.withdraw_accounts[\n          currentWithdraw.withdraw_account_id\n        ];\n        //actualiza el movimiento operacional de la cuenta de retiro\n        this.props.action.update_item_state(\n          {\n            [currentWithdraw.withdraw_account_id]: {\n              ...withdraw_account,\n              used_counter: ++withdraw_account.used_counter,\n              inscribed: true,\n            },\n          },\n          \"withdraw_accounts\"\n        );\n      }\n    }\n\n\n    if (withdraw.state === \"rejected\" || withdraw.state === \"canceled\") {\n      \n      // await this.props.coinsendaServices.get_withdraws(this.props.withdraws[withdraw.id].account_id)\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          { \n            [withdraw.id]: {\n              ...this.props.withdraws[withdraw.id],\n              state: withdraw.state,\n            },\n          },\n          \"withdraws\"\n        );\n\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.withdraws[withdraw.id].account_id,\n          \"withdraws\"\n        );\n\n        await this.props.coinsendaServices.getWalletsByUser(true)\n\n      }, 500);\n\n      this.props.action.exit_sound();\n      let state = withdraw.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Retiro ${state}`, \"error\");\n    }\n\n    // if(withdraw.metadata && !withdraw.state){\n    //   // alert('withdraw socket')\n    //\n    //     const { userId } = withdraw\n    //     let fiat_accounts = await this.props.coinsendaServices.getFiatAccountByUserId()\n    //     if(!fiat_accounts){return false}\n    //\n    //     for (let i = 0; i < fiat_accounts.length; i++) {\n    //       if(fiat_accounts[i].currency.currency !== 'usd'){\n    //         const { activity_for_account } = this.props\n    //         if(activity_for_account[fiat_accounts[i].id] && activity_for_account[fiat_accounts[i].id].withdraws){return false}\n    //         await this.props.coisendaServices.get_withdraws(fiat_accounts[i].id)\n    //       }\n    //     }\n    //     this.props.toastMessage('Retiro(s) ha(n) sido enviado(s) a tu cuenta bancaria.', 'success')\n    //     this.props.action.success_sound()\n    //\n    // }\n  };\n\n  deposit_mangagement = async (deposit) => {\n\n    if (deposit.state === \"pending\" && deposit.currency_type === \"fiat\") {\n      await this.props.coinsendaServices.addItemToState(\"deposits\", {\n        ...deposit,\n        type_order: \"deposit\",\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        deposit.account_id,\n        \"deposits\"\n      );\n    }\n\n    // if(deposit.state === 'confirmed' && && this.state.currentDeposit.currency_type === 'crypto')){\n    if (deposit.state === \"confirmed\") {\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n\n        // si el deposito no está en el estado, es porque es de tipo cripto...\n        let cDeposit = await this.props.coinsendaServices.getDepositById(deposit.id);\n        // console.log('|||||||| _______________________________________DEPOSIT cDeposit', deposit.id)\n        \n        if (this.props.activity_for_account[cDeposit.account_id] && this.props.activity_for_account[cDeposit.account_id].deposits) {\n          await this.props.coinsendaServices.addItemToState(\"deposits\", {\n            ...cDeposit,\n            type_order: \"deposit\",\n          });\n          await this.props.coinsendaServices.updateActivityState(cDeposit.account_id, \"deposits\");\n        } else {\n          await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        }\n        this.props.action.update_item_state(\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); //actualiza el movimiento operacional de la wallet\n        this.props.action.addNotification(\"wallets\", { account_id: cDeposit.account_id, order_id: cDeposit.id }, 1);\n        // this.props.coinsendaServices.showNotification('Deposito Cripto', 'Nuevo deposito detectado')\n        await this.props.action.socket_notify(\n          { ...cDeposit, state: \"confirmed\" },\n          \"deposits\",\n          \"Nuevo deposito detectado\"\n        );\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n\n    if (deposit.confirmations) {\n\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n        let cDeposit = await this.props.coinsendaServices.getOrderById(deposit.id, \"deposits\");\n        await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n        // console.log('=============> DEPOSIT SOCKET ', cDeposit)\n      }\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              confirmations: deposit.confirmations,\n              state:deposit.confirmations > 5 ? 'accepted' : 'confirmed'\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(this.props.deposits[deposit.id].account_id, \"deposits\");\n      }\n      return;\n    }\n\n\n\n\n\n    if (deposit.state === \"accepted\") {\n      let cDeposit = await this.props.coinsendaServices.getOrderById(\n        deposit.id,\n        \"deposits\"\n      );\n\n      if (!this.props.deposits || (this.props.deposits && !this.props.deposits[deposit.id])) {\n        await this.props.coinsendaServices.get_deposits(cDeposit.account_id);\n      }\n\n      if (this.props.deposits && this.props.deposits[deposit.id]) {\n        this.props.action.update_item_state(\n          {\n            [cDeposit.account_id]: {\n              ...this.props.wallets[cDeposit.account_id],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        ); //actualiza el movimiento operacional de la wallet\n        this.props.action.addNotification(\n          \"wallets\",\n          {\n            account_id: this.props.deposits[deposit.id].account_id,\n            order_id: deposit.id,\n          },\n          1\n        );\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        await this.props.action.socket_notify(\n          this.props.deposits[deposit.id],\n          \"deposits\"\n        );\n        await this.props.action.renderModal(null);\n        this.props.action.toggleOtherModal();\n        this.props.action.success_sound();\n        // this.props.coinsendaServices.showNotification('Deposito aceptado', 'Tu deposito ha sido aceptado exitosamente')\n        setTimeout(() => {\n          this.props.action.add_coin_sound();\n        }, 1500);\n      }\n    }\n\n\n\n\n\n\n\n\n    if (deposit.state === \"rejected\" || deposit.state === \"canceled\") {\n      if (this.props.deposits[deposit.id].state === \"canceled\") {\n        return false;\n      }\n      // setTimeout(async()=>{\n      // Tiempo para que transcurra la animación del item\n\n      setTimeout(async () => {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        // await this.props.action.update_pending_activity(this.props.deposits[deposit.id].account_id, 'deposits')\n      }, 500);\n      this.props.action.exit_sound();\n      let state = deposit.state === \"canceled\" ? \"cancelado\" : \"rechazado\";\n      this.props.toastMessage(`Deposito ${state}`, \"error\");\n      // }, 2000)\n    }\n\n    if (deposit.state === \"confirmed\") {\n      // console.log('deposito confirmado fiat')\n      // this.props.coinsendaServices.showNotification('Deposito fiat', 'Su deposito ha sido confirmado con éxito')\n      if (\n        this.props.deposits &&\n        this.props.deposits[deposit.id] &&\n        this.props.deposits[deposit.id].currency_type === \"fiat\"\n      ) {\n        await this.props.action.update_item_state(\n          {\n            [deposit.id]: {\n              ...this.props.deposits[deposit.id],\n              state: deposit.state,\n            },\n          },\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.updateActivityState(\n          this.props.deposits[deposit.id].account_id,\n          \"deposits\"\n        );\n        await this.props.coinsendaServices.getWalletsByUser(true);\n        // this.props.history.push('?form=deposit_confirmed_success')\n        this.props.action.isAppLoading(false);\n        this.props.action.success_sound();\n        this.props.toastMessage(\"Deposito confirmado con exito\", \"success\");\n      }\n    }\n  };\n\n\n\n\n\n\n\n  swap_management = async (swap) => {\n    // console.log('||||||||||||||||||||||||||||| ===========> SOCKET SWAP => ', swap.state, '  ==>  ', swap)\n    // debugger\n\n\n    if (swap.state === \"pending\") {\n      // await this.props.action.current_section_params({ active_trade_operation: true })\n      // el bought lo retorna el socket en el estado aceptado\n      let new_swap = swap;\n      await this.props.coinsendaServices.addItemToState(\"swaps\", {\n        ...new_swap,\n        state: \"pending\",\n        activeTrade: true,\n      });\n      await this.props.coinsendaServices.updateActivityState(\n        new_swap.account_from,\n        \"swaps\"\n      );\n      this.props.action.isAppLoading(false);\n      await this.props.history.push(`/wallets/activity/${new_swap.account_from}/swaps`);\n      this.props.action.add_new_transaction_animation();\n    }\n\n\n    if(swap.state === 'rejected' || swap.state === 'canceled'){\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [this.state.currentSwap.id]: {\n              ...this.props.swaps[this.state.currentSwap.id],\n              state: swap.state,\n              bought: swap.bought,\n              activeTrade: false\n            },\n          },\n          \"swaps\"\n        );\n        this.props.coinsendaServices.updateActivityState(this.state.currentSwap.account_from, \"swaps\");\n        this.props.action.ticket_rejected();\n        return this.props.toastMessage(\"El intercambio no se pudo realizar, contacta con soporte\", \"error\");\n      }, 2500);\n\n    }\n\n\n\n\n    if (swap.state === \"accepted\" && this.state.currentSwap.state !== \"done\") {\n      const { currentSwap } = this.state;\n\n      await this.setState({ currentSwap: { ...currentSwap, state: \"done\" } });\n      setTimeout(async () => {\n        await this.props.action.success_sound();\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"confirmed\",\n              bought: swap.bought,\n            },\n          },\n          \"swaps\"\n        );\n      }, 2500);\n\n      setTimeout(async () => {\n        this.props.action.update_item_state(\n          {\n            [currentSwap.id]: {\n              ...this.props.swaps[currentSwap.id],\n              state: \"accepted\",\n            },\n          },\n          \"swaps\"\n        );\n        await this.props.action.success_sound();\n        setTimeout(async () => {\n          await this.props.action.update_item_state(\n            {\n              [currentSwap.id]: {\n                ...this.props.swaps[currentSwap.id],\n                activeTrade: false,\n              },\n            },\n            \"swaps\"\n          );\n          await this.props.coinsendaServices.manageBalance(\n            currentSwap.account_from,\n            \"reduce\",\n            currentSwap.spent\n          );\n          await this.props.action.add_coin_sound();\n          await this.props.toastMessage(\n            \"Nuevo intercambio realizado\",\n            \"success\"\n          );\n          this.props.coinsendaServices.updateActivityState(currentSwap.account_from, \"swaps\");\n        }, 2000);\n      }, 5500);\n\n      // add the acredited order into account to\n      if (this.props.wallets[currentSwap.account_to]) {\n        const { wallets } = this.props;\n        this.props.coinsendaServices.updateActivityState(\n          currentSwap.account_to,\n          \"swaps\"\n        );\n        this.props.action.update_item_state(\n          {\n            [currentSwap.account_to]: {\n              ...wallets[currentSwap.account_to],\n              count: 1,\n            },\n          },\n          \"wallets\"\n        );\n      }\n    }\n\n\n\n    if (swap.status === \"error\") {\n      this.props.toastMessage(\n        \"El intercambio no se pudo realizar, contacta con soporte\",\n        \"error\"\n      );\n      this.props.action.ticket_canceled();\n      // this.props.action.current_section_params({swap_socket_channel:this.state.currentSwap})\n    }\n  };\n\n\n  status_management = async(status) => {\n    await this.props.coinsendaServices.updateUserStatus(status)\n    if(status.countries.international === 'level_1'){\n      this.props.coinsendaServices.init()\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  // console.log('||||||||||||||||||||||||||||||||||||||||||||| ======>>> props Sockets ==> ', props)\n\n  const { loggedIn } = state.auth;\n  const {\n    user,\n    deposits,\n    withdraws,\n    wallets,\n    withdraw_accounts,\n    swaps,\n  } = state.modelData;\n  const { ui } = state;\n\n  return {\n    loggedIn,\n    user: user,\n    deposits,\n    withdraws,\n    activity_for_account: state.storage.activity_for_account,\n    wallets,\n    swaps,\n    withdraw_accounts,\n    isModalActive: ui.otherModal,\n    isRenderModalActive: ui.modal.render,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    action: bindActionCreators(actions, dispatch),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withCoinsendaServices(SocketsComponent))\n);\n"],"sourceRoot":""}