{"version":3,"sources":["components/withListCreator.js","components/widgets/accountList/account-list.js"],"names":["specialListCreatorSelector","createSelector","state","withdraw_accounts","wallets","_","isWithdrawView","withdrawAccounts","data","Object","keys","filter","key","currency_type","map","IconSwitch","loadable","NewWalletComponent","EmptyStateAccountList","account_type","AuxComponent","isMovilViewport","useViewport","className","id","size","icon","withListCreator","AsComponent","props","isWalletsView","actions","mainListLoader","items","label","coinsendaService","useCoinsendaServices","isVerified","setIsVerified","useState","keyActions","useSelector","ui","setCurrentSelection","useNavigationKeyActions","loader","uniqueIdForElement","default","idForClickableElement","useKeyActionAsClick","availableCurrencies","useAvailableWalletCreator","console","log","useEffect","verified","getUserVerificationStatus","createNewWallet","verificationState","showValidationPrompt","renderModal","toggleModal","callToValidate","confirmationModalToggle","confirmationModalPayload","title","description","txtPrimary","action","svg","isHugeContainer","isWithdrawListStyle","mainButtonText","isBottonAvailable","length","path","match","params","primary_path","isEmpty","type","handleClick","style","account","visible","number","focusedId","color","React","memo","isLoading","loaders","mainList","modelData","useActions","toProps"],"mappings":"2NAKA,MAAMA,EAA6BC,aAChCC,GAAUA,EAAMC,oBAChBD,GAAUA,EAAME,UACjB,CAACC,EAAGC,IAAmBA,IACvB,CAACC,EAAkBH,EAASE,KAC1B,MAAME,EAAOF,EAAiBC,EAAmBH,EACjD,OACEI,GACAC,OAAOC,KAAKF,GACTG,QAAQC,KACEN,GAA8C,WAA5BE,EAAKI,GAAKC,iBAEtCC,KAAKF,GACGJ,EAAKI,Q,iFCCtB,MAAMG,EAAaC,aAAS,IAAM,0CAE5BC,EAAqBD,aAAS,IAAM,+DAqL1C,MAAME,EAAwB,IAAqC,IAApC,aAAEC,EAAF,aAAgBC,GAAmB,EAChE,MAAM,gBAAEC,GAAoBC,cAC5B,OACE,qBAAKC,UAAU,2BAAf,SACE,sBAAKA,UAAU,gCAAf,UACE,mBAAGC,GAAG,cAAcD,UAAU,SAA9B,SACoB,sBAAjBJ,EACG,8GACA,+IAGJC,GAAgB,cAACA,EAAD,IAElB,cAACL,EAAD,CAAYU,KAAMJ,EAAkB,IAAM,IAAKK,KAAK,qBAM7CC,IDrMyBC,ECqMzBD,WDrMyBC,ECDxC,SAAqBC,GAAQ,IAAD,IAI1B,MAAM,cACJC,EADI,eAEJxB,EAFI,QAGJyB,EAHI,eAIJC,GACEH,EACEI,EAAQJ,EAAMI,OAAS,GACvBC,EAAK,yBACTJ,EAAgB,aAAe,sBAE1BK,GAAoBC,eACpBC,EAAYC,GAAiBC,oBAAS,IACvC,WAAEC,GAAeC,aAAavC,GAAUA,EAAMwC,MAC7CC,GAAuBC,YAAwB,CACpDX,QACAY,OAAQb,EACRc,mBAAoB,cACpBC,SAAU,KAEN,gBAAE1B,GAAoBC,cAEtB0B,EAAwBC,aAC5B,EACA,2BACA,KAGKC,GAAuBC,cAE9BC,QAAQC,IAAI,oCAAqCH,GAEjDI,qBAAU,KAER,MAAMC,EAAWpB,EAAiBqB,0BAA0B,WAC5DlB,EAAciB,KAEb,IAEH,MAAME,EAAkB,IACU,cAA5B5B,EAAM6B,kBACDC,IAEJtB,EAIFP,EACMC,EAAQ6B,YAAY3C,QAE7Bc,EAAQ8B,cANCC,IASLH,EAAuB,KAC3B5B,EAAQgC,0BACRhC,EAAQiC,yBAAyB,CAC/BC,MAAO,gCACPC,YACE,0GACFC,WAAY,YACZC,QAAQ,EACRC,IAAK,cAIHP,EAAiB,KAKrB/B,EAAQgC,0BACRhC,EAAQiC,yBAAyB,CAC/BC,MAAO,gCACPC,YACE,0GACFC,WAAY,YACZC,QAAQ,EACRC,IAAK,cAGHC,EAAkBrC,EAAQ,GAI1BsC,EAAsB,GAK5B,IAAIC,EAAiBlE,EAAiB,+BAAiC,wBACvEkE,EAAkBnD,EAAmEmD,EAApE,UAAsBA,EAAtB,YAAwChC,EAAa,MAAQ,IAE9E,MAAMiC,GAAqB3C,MAAwBA,KAAa,OAAIoB,QAAJ,IAAIA,OAAJ,EAAIA,EAAqBwB,SACnFC,EAAI,OAAG9C,QAAH,IAAGA,GAAH,UAAGA,EAAO+C,aAAV,iBAAG,EAAcC,cAAjB,aAAG,EAAsBC,aAGnC,OACE,eAAC,IAAD,CAAoBvD,UAAS,6BAAwBoD,EAAxB,YAAgCI,kBAAQ9C,GAAS,UAAY,IAA1F,UACE,cAAC,IAAD,WACKJ,EAAMgB,SAAWxB,GAClB,cAAC,IAAD,CACEG,GAAIwB,EACJd,MAAOsC,EACPQ,KAAI,UAAKP,EAAoB,UAAY,YACzCQ,YAAaR,EAAoBhB,EAAkB,UAIrD5B,EAAMgB,QAAUxB,IAAqB0D,kBAAQ9C,IAC7C,cAAC,IAAD,CACET,GAAIwB,EACJd,MAAOsC,EACPQ,KAAI,UAAKP,EAAoB,YAAc,YAC3CQ,YAAaR,EAAoBhB,EAAkB,OAGxDxB,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOyC,QAAS,EACxB,cAAC,IAAD,CACEQ,MACEZ,EACI,IAA+BC,GAC/BA,EAENhD,UAAS,gCAA+B,OAALU,QAAK,IAALA,OAAA,EAAAA,EAAOyC,QAAS,EAAI,gBAAkB,IAN3E,SAQGzC,EAAMnB,KAAI,CAACqE,EAAS3D,IACd2D,GAAYA,EAAQC,QAIvB,cAAC,UAAD,CAEEzC,oBAAqBA,EACrB0C,OAAQ7D,EACR8D,UAAS,qBAAgB9D,GACzB2D,QAASA,EACThE,aAAcW,EAAgB,UAAY,oBAC1Ce,OAAQhB,EAAMgB,QANTrB,GAJA,SAeXK,EAAMgB,OACR,cAAC,UAAD,CAAc0C,MAAM,OAAOrD,MAAOA,IAElC6C,kBAAQ9C,KACPJ,EAAMgB,QACL,qCACE,cAAC3B,EAAD,CACEC,aAAcW,EAAgB,UAAY,sBAG1CT,GACE,cAAC,IAAD,CACEG,GAAIwB,EACJd,MAAOsC,EACPQ,KAAI,UAAKP,EAAoB,UAAY,YACzCQ,YAAaR,EAAoBhB,EAAkB,cD9J5D+B,IAAMC,MAAK,SAAU5D,GAC1B,MAAMgB,EAASJ,aAAavC,GAAUA,EAAMwF,UAAU7C,SAChDb,EAAiBS,aAAavC,GAAUA,EAAMwC,GAAGiD,QAAQC,WACzD3D,EAAQQ,aAAavC,GAAUF,EAA2BE,EAAM2F,UAAWhE,EAAMvB,kBACjFyB,EAAU+D,cACVC,EAAU,CACdrC,mBAAmB,EACnB1B,iBACAa,UAGF,OACE,cAACjB,EAAD,IAAiBmE,EAAShE,QAASA,EAASE,MAAOA,KAAWJ","file":"static/js/145.c3a95510.chunk.js","sourcesContent":["import React from \"react\";\nimport { useActions } from \"../hooks/useActions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nconst specialListCreatorSelector = createSelector(\n  (state) => state.withdraw_accounts,\n  (state) => state.wallets,\n  (_, isWithdrawView) => isWithdrawView,\n  (withdrawAccounts, wallets, isWithdrawView) => {\n    const data = isWithdrawView ? withdrawAccounts : wallets;\n    return (\n      data &&\n      Object.keys(data)\n        .filter((key) => {\n          return !(isWithdrawView && data[key].currency_type === \"crypto\");\n        })\n        .map((key) => {\n          return data[key];\n        })\n    );\n  }\n);\n\nexport default function withListCreator(AsComponent) {\n  return React.memo(function (props) {\n    const loader = useSelector((state) => state.isLoading.loader);\n    const mainListLoader = useSelector((state) => state.ui.loaders.mainList);\n    const items = useSelector((state) => specialListCreatorSelector(state.modelData, props.isWithdrawView));\n    const actions = useActions();\n    const toProps = {\n      verificationState: true,\n      mainListLoader,\n      loader,\n    };\n\n    return (\n      <AsComponent {...toProps} actions={actions} items={items} {...props} />\n    );\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport loadable from \"@loadable/component\";\nimport SimpleLoader from \"../loaders\";\nimport ItemAccount from \"./item_account\";\nimport { AddNewItem } from \"../buttons/buttons\";\nimport PropTypes from \"prop-types\";\nimport { AccountListContainer } from \"./styles\";\nimport withListCreator from \"../../withListCreator\";\nimport { useCoinsendaServices } from \"../../../services/useCoinsendaServices\";\nimport useNavigationKeyActions from \"../../../hooks/useNavigationKeyActions\";\nimport useKeyActionAsClick from \"../../../hooks/useKeyActionAsClick\";\nimport useViewport from \"../../../hooks/useWindowSize\";\nimport useAvailableWalletCreator from \"../../hooks/useAvailableWalletCreator\";\nimport { useSelector } from \"react-redux\";\nimport \"../../wallets/views/wallet_views.css\";\nimport TitleSection from '../../widgets/titleSectionComponent'\nimport { AccountListWrapper } from '../layoutStyles'\nimport { isEmpty } from 'lodash'\n\nconst IconSwitch = loadable(() => import(\"../icons/iconSwitch\"));\n// const NewWalletComponent = loadable(() => import(\"../../wallets/newWallet\"));\nconst NewWalletComponent = loadable(() => import(\"../../forms/widgets/newWallet/init\"));\n\nfunction AccountList(props) {\n\n\n\n  const {\n    isWalletsView,\n    isWithdrawView,\n    actions,\n    mainListLoader,\n  } = props;\n  const items = props.items || [];\n  const label = `Obteniendo tus ${\n    isWalletsView ? \"Billeteras\" : \"Cuentas de retiro\"\n  }`;\n  const [coinsendaService] = useCoinsendaServices();\n  const [isVerified, setIsVerified] = useState(false);\n  const { keyActions } = useSelector((state) => state.ui);\n  const [setCurrentSelection] = useNavigationKeyActions({\n    items,\n    loader: mainListLoader,\n    uniqueIdForElement: \"accountItem\",\n    default: -1,\n  });\n  const { isMovilViewport } = useViewport();\n  // 97 keyCode for A\n  const idForClickableElement = useKeyActionAsClick(\n    true,\n    \"main-accounts-add-button\",\n    97\n  );\n\n  const [availableCurrencies] = useAvailableWalletCreator();\n\n  console.log('|||||||  availableCurrencies  => ', availableCurrencies)\n\n  useEffect(() => {\n    // actions.cleanCurrentSection()\n    const verified = coinsendaService.getUserVerificationStatus(\"level_1\");\n    setIsVerified(verified);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const createNewWallet = () => {\n    if (props.verificationState === \"confirmed\") {\n      return showValidationPrompt();\n    }\n    if (!isVerified) {\n      return callToValidate();\n    }\n\n    if(isWalletsView){\n      return actions.renderModal(NewWalletComponent);\n    }\n    actions.toggleModal();\n  };\n\n  const showValidationPrompt = () => {\n    actions.confirmationModalToggle();\n    actions.confirmationModalPayload({\n      title: \"Estamos trabajando en esto...\",\n      description:\n        \"Hemos recibido satisfactoriamente tus datos de verificaci칩n, en breve podr치s operar en coinsenda.\",\n      txtPrimary: \"Entendido\",\n      action: false,\n      svg: \"verified\",\n    });\n  };\n\n  const callToValidate = () => {\n    // const message = isWalletsView\n    //   ? \"billeteras crypto/fiat.\"\n    //   : \"cuentas de retiro fiat.\";\n\n    actions.confirmationModalToggle();\n    actions.confirmationModalPayload({\n      title: \"Estamos trabajando en esto...\",\n      description:\n        \"Hemos recibido satisfactoriamente tus datos de verificaci칩n, en breve podr치s operar en coinsenda.\",\n      txtPrimary: \"Entendido\",\n      action: false,\n      svg: \"verified\",\n    });\n  };\n  const isHugeContainer = items > 10;\n  const styleForHugeContainer = {\n    // height: 'auto',\n  };\n  const isWithdrawListStyle = {\n    // marginBottom: '40px'\n  };\n\n  \n  let mainButtonText = isWithdrawView ? \"Crear nueva cuenta de retiro\" : \"Crear nueva billetera\";\n  mainButtonText = !isMovilViewport ? `${mainButtonText} ${keyActions ? '[A]' : ''}` : mainButtonText;\n\n  const isBottonAvailable = !isWalletsView ? true : (isWalletsView && availableCurrencies?.length) ? true : false\n  const path = props?.match?.params?.primary_path\n\n\n  return (\n    <AccountListWrapper className={`accountListWrapper ${path} ${isEmpty(items) ? 'isEmpty' : ''}`}>\n      <TitleSection>\n        {(!props.loader && !isMovilViewport) && (\n          <AddNewItem\n            id={idForClickableElement}\n            label={mainButtonText}\n            type={`${isBottonAvailable ? \"primary\" : \"disabled\"}`}\n            handleClick={isBottonAvailable ? createNewWallet : null}\n          />\n        )}\n      </TitleSection>\n      {((!props.loader && isMovilViewport) && !isEmpty(items)) && (\n          <AddNewItem\n            id={idForClickableElement}\n            label={mainButtonText}\n            type={`${isBottonAvailable ? \"secundary\" : \"disabled\"}`}\n            handleClick={isBottonAvailable ? createNewWallet : null}\n          />\n        )}\n      {items && items?.length > 0 ? (\n        <AccountListContainer\n          style={\n            isHugeContainer\n              ? { ...styleForHugeContainer, ...isWithdrawListStyle }\n              : isWithdrawListStyle\n          }\n          className={`AccountListContainer ${items?.length > 3 ? 'contet-center' : ''}`}\n        >\n          {items.map((account, id) => {\n            if (!account || !account.visible) {\n              return null;\n            }\n            return (\n              <ItemAccount\n                key={id}\n                setCurrentSelection={setCurrentSelection}\n                number={id}\n                focusedId={`accountItem${id}`}\n                account={account}\n                account_type={isWalletsView ? \"wallets\" : \"withdraw_accounts\"}\n                loader={props.loader}\n              />\n            ); \n          })}\n        </AccountListContainer>\n      ) : props.loader ? (\n        <SimpleLoader color=\"blue\" label={label} />\n      ) : (\n        isEmpty(items) &&\n        !props.loader && (\n          <>\n            <EmptyStateAccountList\n              account_type={isWalletsView ? \"wallets\" : \"withdraw_accounts\"}\n            />\n            {\n              isMovilViewport &&\n                <AddNewItem\n                  id={idForClickableElement}\n                  label={mainButtonText}\n                  type={`${isBottonAvailable ? \"primary\" : \"disabled\"}`}\n                  handleClick={isBottonAvailable ? createNewWallet : null}\n                />\n            }\n          </>\n        )\n      )}\n    </AccountListWrapper>\n  );\n}\n\nAccountList.propTypes = {\n  all_pairs: PropTypes.object,\n  isAppLoaded: PropTypes.bool,\n  currencies: PropTypes.array,\n  current_wallet: PropTypes.object,\n  items: PropTypes.array,\n  loader: PropTypes.bool,\n};\n\nconst EmptyStateAccountList = ({ account_type, AuxComponent }) => {\n  const { isMovilViewport } = useViewport();\n  return (\n    <div className=\"withdraw_accounts_screen\">\n      <div className=\"withdraw_accounts_screen_cont\">\n        <p id=\"WalletList2\" className=\"fuente\">\n          {account_type === \"withdraw_accounts\"\n            ? \"A칰n no tienes cuentas de retiro agregadas, crea multiples cuentas y gestiona retiros en tu moneda local.\"\n            : \"A칰n no tienes billeteras agregadas, crea y gestiona Billeteras de BTC y COP para que puedas hacer dep칩sitos, intercambios y retiros.\"}\n        </p>\n        {\n          AuxComponent && <AuxComponent/>\n        }\n        <IconSwitch size={isMovilViewport ? 220 : 330} icon=\"newAccount\" />\n      </div>\n    </div>\n  );\n};\n\nexport default withListCreator(AccountList);\n"],"sourceRoot":""}